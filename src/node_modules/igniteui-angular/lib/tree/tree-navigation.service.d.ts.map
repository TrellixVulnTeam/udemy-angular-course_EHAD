{"version":3,"file":"tree-navigation.service.d.ts","sources":["tree-navigation.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy } from '@angular/core';\nimport { IgxTree, IgxTreeNode } from './common';\nimport { IgxTreeService } from './tree.service';\nimport { IgxTreeSelectionService } from './tree-selection.service';\n/** @hidden @internal */\nexport declare class IgxTreeNavigationService implements OnDestroy {\n    private treeService;\n    private selectionService;\n    private tree;\n    private _focusedNode;\n    private _lastFocusedNode;\n    private _activeNode;\n    private _visibleChildren;\n    private _invisibleChildren;\n    private _disabledChildren;\n    private _cacheChange;\n    constructor(treeService: IgxTreeService, selectionService: IgxTreeSelectionService);\n    register(tree: IgxTree): void;\n    get focusedNode(): IgxTreeNode<any>;\n    set focusedNode(value: IgxTreeNode<any>);\n    get activeNode(): IgxTreeNode<any>;\n    set activeNode(value: IgxTreeNode<any>);\n    get visibleChildren(): IgxTreeNode<any>[];\n    update_disabled_cache(node: IgxTreeNode<any>): void;\n    init_invisible_cache(): void;\n    update_visible_cache(node: IgxTreeNode<any>, expanded: boolean, shouldEmit?: boolean): void;\n    /**\n     * Sets the node as focused (and active)\n     *\n     * @param node target node\n     * @param isActive if true, sets the node as active\n     */\n    setFocusedAndActiveNode(node: IgxTreeNode<any>, isActive?: boolean): void;\n    /** Handler for keydown events. Used in tree.component.ts */\n    handleKeydown(event: KeyboardEvent): void;\n    ngOnDestroy(): void;\n    private handleNavigation;\n    private handleArrowLeft;\n    private handleArrowRight;\n    private handleUpDownArrow;\n    private handleAsterisk;\n    private handleSpace;\n    /** Gets the next visible node in the given direction - 1 -> next, -1 -> previous */\n    private getVisibleNode;\n}\n"]}