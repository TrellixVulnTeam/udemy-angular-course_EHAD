{"version":3,"file":"tree.service.d.ts","sources":["tree.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IgxTree, IgxTreeNode } from './common';\n/** @hidden @internal */\nexport declare class IgxTreeService {\n    expandedNodes: Set<IgxTreeNode<any>>;\n    collapsingNodes: Set<IgxTreeNode<any>>;\n    private tree;\n    /**\n     * Adds the node to the `expandedNodes` set and fires the nodes change event\n     *\n     * @param node target node\n     * @param uiTrigger is the event triggered by a ui interraction (so we know if we should animate)\n     * @returns void\n     */\n    expand(node: IgxTreeNode<any>, uiTrigger?: boolean): void;\n    /**\n     * Adds a node to the `collapsing` collection\n     *\n     * @param node target node\n     */\n    collapsing(node: IgxTreeNode<any>): void;\n    /**\n     * Removes the node from the 'expandedNodes' set and emits the node's change event\n     *\n     * @param node target node\n     * @returns void\n     */\n    collapse(node: IgxTreeNode<any>): void;\n    isExpanded(node: IgxTreeNode<any>): boolean;\n    register(tree: IgxTree): void;\n    private siblingComparer;\n}\n"]}