{"version":3,"file":"tree.component.d.ts","sources":["tree.component.d.ts"],"names":[],"mappingssourcesContent":["import { QueryList, EventEmitter, TemplateRef, OnInit, AfterViewInit, OnDestroy, ElementRef } from '@angular/core';\nimport { DisplayDensityBase, IDisplayDensityOptions } from '../core/displayDensity';\nimport { ToggleAnimationSettings } from '../expansion-panel/toggle-animation-component';\nimport { IgxTreeSelectionType, IgxTree, ITreeNodeToggledEventArgs, ITreeNodeTogglingEventArgs, ITreeNodeSelectionEvent, IgxTreeNode, IgxTreeSearchResolver } from './common';\nimport { IgxTreeNavigationService } from './tree-navigation.service';\nimport { IgxTreeNodeComponent } from './tree-node/tree-node.component';\nimport { IgxTreeSelectionService } from './tree-selection.service';\nimport { IgxTreeService } from './tree.service';\n/**\n * @hidden @internal\n * Used for templating the select marker of the tree\n */\nexport declare class IgxTreeSelectMarkerDirective {\n}\n/**\n * @hidden @internal\n * Used for templating the expand indicator of the tree\n */\nexport declare class IgxTreeExpandIndicatorDirective {\n}\nexport declare class IgxTreeComponent extends DisplayDensityBase implements IgxTree, OnInit, AfterViewInit, OnDestroy {\n    private navService;\n    private selectionService;\n    private treeService;\n    private element;\n    protected _displayDensityOptions?: IDisplayDensityOptions;\n    cssClass: string;\n    /**\n     * Gets/Sets tree selection mode\n     *\n     * @remarks\n     * By default the tree selection mode is 'None'\n     * @param selectionMode: IgxTreeSelectionType\n     */\n    get selection(): IgxTreeSelectionType;\n    set selection(selectionMode: IgxTreeSelectionType);\n    /** Get/Set how the tree should handle branch expansion.\n     * If set to `true`, only a single branch can be expanded at a time, collapsing all others\n     *\n     * ```html\n     * <igx-tree [singleBranchExpand]=\"true\">\n     * ...\n     * </igx-tree>\n     * ```\n     *\n     * ```typescript\n     * const tree: IgxTree = this.tree;\n     * this.tree.singleBranchExpand = false;\n     * ```\n     */\n    singleBranchExpand: boolean;\n    /** Get/Set the animation settings that branches should use when expanding/collpasing.\n     *\n     * ```html\n     * <igx-tree [animationSettings]=\"customAnimationSettings\">\n     * </igx-tree>\n     * ```\n     *\n     * ```typescript\n     * const animationSettings: ToggleAnimationSettings = {\n     *      openAnimation: growVerIn,\n     *      closeAnimation: growVerOut\n     * };\n     *\n     * this.tree.animationSettings = animationSettings;\n     * ```\n     */\n    animationSettings: ToggleAnimationSettings;\n    /** Emitted when the node selection is changed through interaction\n     *\n     * ```html\n     * <igx-tree (nodeSelection)=\"handleNodeSelection($event)\">\n     * </igx-tree>\n     * ```\n     *\n     *```typescript\n     * public handleNodeSelection(event: ITreeNodeSelectionEvent) {\n     *  const newSelection: IgxTreeNode<any>[] = event.newSelection;\n     *  const added: IgxTreeNode<any>[] = event.added;\n     *  console.log(\"New selection will be: \", newSelection);\n     *  console.log(\"Added nodes: \", event.added);\n     * }\n     *```\n     */\n    nodeSelection: EventEmitter<ITreeNodeSelectionEvent>;\n    /** Emitted when a node is expanding, before it finishes\n     *\n     * ```html\n     * <igx-tree (nodeExpanding)=\"handleNodeExpanding($event)\">\n     * </igx-tree>\n     * ```\n     *\n     *```typescript\n     * public handleNodeExpanding(event: ITreeNodeTogglingEventArgs) {\n     *  const expandedNode: IgxTreeNode<any> = event.node;\n     *  if (expandedNode.disabled) {\n     *      event.cancel = true;\n     *  }\n     * }\n     *```\n     */\n    nodeExpanding: EventEmitter<ITreeNodeTogglingEventArgs>;\n    /** Emitted when a node is expanded, after it finishes\n     *\n     * ```html\n     * <igx-tree (nodeExpanded)=\"handleNodeExpanded($event)\">\n     * </igx-tree>\n     * ```\n     *\n     *```typescript\n     * public handleNodeExpanded(event: ITreeNodeToggledEventArgs) {\n     *  const expandedNode: IgxTreeNode<any> = event.node;\n     *  console.log(\"Node is expanded: \", expandedNode.data);\n     * }\n     *```\n     */\n    nodeExpanded: EventEmitter<ITreeNodeToggledEventArgs>;\n    /** Emitted when a node is collapsing, before it finishes\n     *\n     * ```html\n     * <igx-tree (nodeCollapsing)=\"handleNodeCollapsing($event)\">\n     * </igx-tree>\n     * ```\n     *\n     *```typescript\n     * public handleNodeCollapsing(event: ITreeNodeTogglingEventArgs) {\n     *  const collapsedNode: IgxTreeNode<any> = event.node;\n     *  if (collapsedNode.alwaysOpen) {\n     *      event.cancel = true;\n     *  }\n     * }\n     *```\n     */\n    nodeCollapsing: EventEmitter<ITreeNodeTogglingEventArgs>;\n    /** Emitted when a node is collapsed, after it finishes\n     *\n     * @example\n     * ```html\n     * <igx-tree (nodeCollapsed)=\"handleNodeCollapsed($event)\">\n     * </igx-tree>\n     * ```\n     * ```typescript\n     * public handleNodeCollapsed(event: ITreeNodeToggledEventArgs) {\n     *  const collapsedNode: IgxTreeNode<any> = event.node;\n     *  console.log(\"Node is collapsed: \", collapsedNode.data);\n     * }\n     * ```\n     */\n    nodeCollapsed: EventEmitter<ITreeNodeToggledEventArgs>;\n    /**\n     * Emitted when the active node is changed.\n     *\n     * @example\n     * ```\n     * <igx-tree (activeNodeChanged)=\"activeNodeChanged($event)\"></igx-tree>\n     * ```\n     */\n    activeNodeChanged: EventEmitter<IgxTreeNode<any>>;\n    /**\n     * A custom template to be used for the expand indicator of nodes\n     * ```html\n     * <igx-tree>\n     *  <ng-template igxTreeExpandIndicator let-expanded>\n     *      <igx-icon>{{ expanded ? \"close_fullscreen\": \"open_in_full\"}}</igx-icon>\n     *  </ng-template>\n     * </igx-tree>\n     * ```\n     */\n    expandIndicator: TemplateRef<any>;\n    /** @hidden @internal */\n    nodes: QueryList<IgxTreeNodeComponent<any>>;\n    /** @hidden @internal */\n    disabledChange: EventEmitter<IgxTreeNode<any>>;\n    /**\n     * Returns all **root level** nodes\n     *\n     * ```typescript\n     * const tree: IgxTree = this.tree;\n     * const rootNodes: IgxTreeNodeComponent<any>[] = tree.rootNodes;\n     * ```\n     */\n    get rootNodes(): IgxTreeNodeComponent<any>[];\n    /**\n     * Emitted when the active node is set through API\n     *\n     * @hidden @internal\n     */\n    activeNodeBindingChange: EventEmitter<IgxTreeNode<any>>;\n    /** @hidden @internal */\n    forceSelect: any[];\n    private _selection;\n    private destroy$;\n    private unsubChildren$;\n    constructor(navService: IgxTreeNavigationService, selectionService: IgxTreeSelectionService, treeService: IgxTreeService, element: ElementRef<HTMLElement>, _displayDensityOptions?: IDisplayDensityOptions);\n    /** @hidden @internal */\n    get nativeElement(): HTMLElement;\n    /**\n     * Expands all of the passed nodes.\n     * If no nodes are passed, expands ALL nodes\n     *\n     * @param nodes nodes to be expanded\n     *\n     * ```typescript\n     * const targetNodes: IgxTreeNode<any> = this.tree.findNodes(true, (_data: any, node: IgxTreeNode<any>) => node.data.expandable);\n     * tree.expandAll(nodes);\n     * ```\n     */\n    expandAll(nodes?: IgxTreeNode<any>[]): void;\n    /**\n     * Collapses all of the passed nodes.\n     * If no nodes are passed, collapses ALL nodes\n     *\n     * @param nodes nodes to be collapsed\n     *\n     * ```typescript\n     * const targetNodes: IgxTreeNode<any> = this.tree.findNodes(true, (_data: any, node: IgxTreeNode<any>) => node.data.collapsible);\n     * tree.collapseAll(nodes);\n     * ```\n     */\n    collapseAll(nodes?: IgxTreeNode<any>[]): void;\n    /**\n     * Deselect all nodes if the nodes collection is empty. Otherwise, deselect the nodes in the nodes collection.\n     *\n     * @example\n     * ```typescript\n     *  const arr = [\n     *      this.tree.nodes.toArray()[0],\n     *      this.tree.nodes.toArray()[1]\n     *  ];\n     *  this.tree.deselectAll(arr);\n     * ```\n     * @param nodes: IgxTreeNodeComponent<any>[]\n     */\n    deselectAll(nodes?: IgxTreeNodeComponent<any>[]): void;\n    /**\n     * Returns all of the nodes that match the passed searchTerm.\n     * Accepts a custom comparer function for evaluating the search term against the nodes.\n     *\n     * @remark\n     * Default search compares the passed `searchTerm` against the node's `data` Input.\n     * When using `findNodes` w/o a `comparer`, make sure all nodes have `data` passed.\n     *\n     * @param searchTerm The data of the searched node\n     * @param comparer A custom comparer function that evaluates the passed `searchTerm` against all nodes.\n     * @returns Array of nodes that match the search. `null` if no nodes are found.\n     *\n     * ```html\n     * <igx-tree>\n     *     <igx-tree-node *ngFor=\"let node of data\" [data]=\"node\">\n     *          {{ node.label }}\n     *     </igx-tree-node>\n     * </igx-tree>\n     * ```\n     *\n     * ```typescript\n     * public data: DataEntry[] = FETCHED_DATA;\n     * ...\n     * const matchedNodes: IgxTreeNode<DataEntry>[] = this.tree.findNodes<DataEntry>(searchTerm: data[5]);\n     * ```\n     *\n     * Using a custom comparer\n     * ```typescript\n     * public data: DataEntry[] = FETCHED_DATA;\n     * ...\n     * const comparer: IgxTreeSearchResolver = (data: any, node: IgxTreeNode<DataEntry>) {\n     *      return node.data.index % 2 === 0;\n     * }\n     * const evenIndexNodes: IgxTreeNode<DataEntry>[] = this.tree.findNodes<DataEntry>(null, comparer);\n     * ```\n     */\n    findNodes(searchTerm: any, comparer?: IgxTreeSearchResolver): IgxTreeNodeComponent<any>[] | null;\n    /** @hidden @internal */\n    handleKeydown(event: KeyboardEvent): void;\n    /** @hidden @internal */\n    ngOnInit(): void;\n    /** @hidden @internal */\n    ngAfterViewInit(): void;\n    /** @hidden @internal */\n    ngOnDestroy(): void;\n    private expandToNode;\n    private subToCollapsing;\n    private subToChanges;\n    private scrollNodeIntoView;\n    private _comparer;\n}\n/**\n * @hidden\n *\n * NgModule defining the components and directives needed for `igx-tree`\n */\nexport declare class IgxTreeModule {\n}\n"]}