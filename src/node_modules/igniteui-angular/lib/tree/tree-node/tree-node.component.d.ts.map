{"version":3,"file":"tree-node.component.d.ts","sources":["tree-node.component.d.ts"],"names":[],"mappingssourcesContent":["import { AnimationBuilder } from '@angular/animations';\nimport { OnInit, OnDestroy, TemplateRef, AfterViewInit, QueryList, ElementRef, ChangeDetectorRef, EventEmitter } from '@angular/core';\nimport { ToggleAnimationPlayer, ToggleAnimationSettings } from '../../expansion-panel/toggle-animation-component';\nimport { IgxTree, IgxTreeNode } from '../common';\nimport { IgxTreeSelectionService } from '../tree-selection.service';\nimport { IgxTreeNavigationService } from '../tree-navigation.service';\nimport { IgxTreeService } from '../tree.service';\nimport { ITreeResourceStrings } from '../../core/i18n/tree-resources';\n/**\n * @hidden @internal\n * Used for links (`a` tags) in the body of an `igx-tree-node`. Handles aria and event dispatch.\n */\nexport declare class IgxTreeNodeLinkDirective implements OnDestroy {\n    private node;\n    private navService;\n    elementRef: ElementRef;\n    role: string;\n    /**\n     * The node's parent. Should be used only when the link is defined\n     * in `<ng-template>` tag outside of its parent, as Angular DI will not properly provide a reference\n     *\n     * ```html\n     * <igx-tree>\n     *     <igx-tree-node #myNode *ngFor=\"let node of data\" [data]=\"node\">\n     *         <ng-template *ngTemplateOutlet=\"nodeTemplate; context: { $implicit: data, parentNode: myNode }\">\n     *         </ng-template>\n     *     </igx-tree-node>\n     *     ...\n     *     <!-- node template is defined under tree to access related services -->\n     *     <ng-template #nodeTemplate let-data let-node=\"parentNode\">\n     *         <a [igxTreeNodeLink]=\"node\">{{ data.label }}</a>\n     *     </ng-template>\n     * </igx-tree>\n     * ```\n     */\n    set parentNode(val: any);\n    get parentNode(): any;\n    /** A pointer to the parent node */\n    private get target();\n    private _parentNode;\n    constructor(node: IgxTreeNode<any>, navService: IgxTreeNavigationService, elementRef: ElementRef);\n    /** @hidden @internal */\n    get tabIndex(): number;\n    /**\n     * @hidden @internal\n     * Clear the node's focused state\n     */\n    handleBlur(): void;\n    /**\n     * @hidden @internal\n     * Set the node as focused\n     */\n    handleFocus(): void;\n    ngOnDestroy(): void;\n}\n/**\n *\n * The tree node component represents a child node of the tree component or another tree node.\n * Usage:\n *\n * ```html\n *  <igx-tree>\n *  ...\n *    <igx-tree-node [data]=\"data\" [selected]=\"service.isNodeSelected(data.Key)\" [expanded]=\"service.isNodeExpanded(data.Key)\">\n *      {{ data.FirstName }} {{ data.LastName }}\n *    </igx-tree-node>\n *  ...\n *  </igx-tree>\n * ```\n */\nexport declare class IgxTreeNodeComponent<T> extends ToggleAnimationPlayer implements IgxTreeNode<T>, OnInit, AfterViewInit, OnDestroy {\n    tree: IgxTree;\n    protected selectionService: IgxTreeSelectionService;\n    protected treeService: IgxTreeService;\n    protected navService: IgxTreeNavigationService;\n    protected cdr: ChangeDetectorRef;\n    protected builder: AnimationBuilder;\n    private element;\n    parentNode: IgxTreeNode<any>;\n    /**\n     * The data entry that the node is visualizing.\n     *\n     * @remarks\n     * Required for searching through nodes.\n     *\n     * @example\n     * ```html\n     *  <igx-tree>\n     *  ...\n     *    <igx-tree-node [data]=\"data\">\n     *      {{ data.FirstName }} {{ data.LastName }}\n     *    </igx-tree-node>\n     *  ...\n     *  </igx-tree>\n     * ```\n     */\n    data: T;\n    /**\n     * To be used for load-on-demand scenarios in order to specify whether the node is loading data.\n     *\n     * @remarks\n     * Loading nodes do not render children.\n     */\n    loading: boolean;\n    /** @hidden @internal */\n    set tabIndex(val: number);\n    /** @hidden @internal */\n    get tabIndex(): number;\n    /** @hidden @internal */\n    get animationSettings(): ToggleAnimationSettings;\n    /**\n     * Gets/Sets the resource strings.\n     *\n     * @remarks\n     * Uses EN resources by default.\n     */\n    set resourceStrings(value: ITreeResourceStrings);\n    /**\n     * An accessor that returns the resource strings.\n     */\n    get resourceStrings(): ITreeResourceStrings;\n    /**\n     * Gets/Sets the active state of the node\n     *\n     * @param value: boolean\n     */\n    set active(value: boolean);\n    get active(): boolean;\n    /**\n     * Emitted when the node's `selected` property changes.\n     *\n     * ```html\n     * <igx-tree>\n     *      <igx-tree-node *ngFor=\"let node of data\" [data]=\"node\" [(selected)]=\"node.selected\">\n     *      </igx-tree-node>\n     * </igx-tree>\n     * ```\n     *\n     * ```typescript\n     * const node: IgxTreeNode<any> = this.tree.findNodes(data[0])[0];\n     * node.selectedChange.pipe(takeUntil(this.destroy$)).subscribe((e: boolean) => console.log(\"Node selection changed to \", e))\n     * ```\n     */\n    selectedChange: EventEmitter<boolean>;\n    /**\n     * Emitted when the node's `expanded` property changes.\n     *\n     * ```html\n     * <igx-tree>\n     *      <igx-tree-node *ngFor=\"let node of data\" [data]=\"node\" [(expanded)]=\"node.expanded\">\n     *      </igx-tree-node>\n     * </igx-tree>\n     * ```\n     *\n     * ```typescript\n     * const node: IgxTreeNode<any> = this.tree.findNodes(data[0])[0];\n     * node.expandedChange.pipe(takeUntil(this.destroy$)).subscribe((e: boolean) => console.log(\"Node expansion state changed to \", e))\n     * ```\n     */\n    expandedChange: EventEmitter<boolean>;\n    /** @hidden @internal */\n    get focused(): boolean;\n    /**\n     * Retrieves the full path to the node incuding itself\n     *\n     * ```typescript\n     * const node: IgxTreeNode<any> = this.tree.findNodes(data[0])[0];\n     * const path: IgxTreeNode<any>[] = node.path;\n     * ```\n     */\n    get path(): IgxTreeNode<any>[];\n    /**\n     * Gets/Sets the disabled state of the node\n     *\n     * @param value: boolean\n     */\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    /** @hidden @internal */\n    cssClass: string;\n    /** @hidden @internal */\n    get role(): \"none\" | \"treeitem\";\n    /** @hidden @internal */\n    linkChildren: QueryList<ElementRef>;\n    /** @hidden @internal */\n    _children: QueryList<IgxTreeNode<any>>;\n    /** @hidden @internal */\n    allChildren: QueryList<IgxTreeNode<any>>;\n    /**\n     * Return the child nodes of the node (if any)\n     *\n     * @remark\n     * Returns `null` if node does not have children\n     *\n     * @example\n     * ```typescript\n     * const node: IgxTreeNode<any> = this.tree.findNodes(data[0])[0];\n     * const children: IgxTreeNode<any>[] = node.children;\n     * ```\n     */\n    get children(): IgxTreeNode<any>[];\n    /** @hidden @internal */\n    header: ElementRef;\n    private _defaultExpandIndicatorTemplate;\n    private childrenContainer;\n    private get hasLinkChildren();\n    /** @hidden @internal */\n    get isCompact(): boolean;\n    /** @hidden @internal */\n    get isCosy(): boolean;\n    /** @hidden @internal */\n    isFocused: boolean;\n    /** @hidden @internal */\n    registeredChildren: IgxTreeNodeLinkDirective[];\n    /** @hidden @internal */\n    private _resourceStrings;\n    private _tabIndex;\n    private _disabled;\n    constructor(tree: IgxTree, selectionService: IgxTreeSelectionService, treeService: IgxTreeService, navService: IgxTreeNavigationService, cdr: ChangeDetectorRef, builder: AnimationBuilder, element: ElementRef<HTMLElement>, parentNode: IgxTreeNode<any>);\n    /**\n     * @hidden @internal\n     */\n    get showSelectors(): boolean;\n    /**\n     * @hidden @internal\n     */\n    get indeterminate(): boolean;\n    /** The depth of the node, relative to the root\n     *\n     * ```html\n     * <igx-tree>\n     *  ...\n     *  <igx-tree-node #node>\n     *      My level is {{ node.level }}\n     *  </igx-tree-node>\n     * </igx-tree>\n     * ```\n     *\n     * ```typescript\n     * const node: IgxTreeNode<any> = this.tree.findNodes(data[12])[0];\n     * const level: number = node.level;\n     * ```\n     */\n    get level(): number;\n    /** Get/set whether the node is selected. Supporst two-way binding.\n     *\n     * ```html\n     * <igx-tree>\n     *  ...\n     *  <igx-tree-node *ngFor=\"let node of data\" [(selected)]=\"node.selected\">\n     *      {{ node.label }}\n     *  </igx-tree-node>\n     * </igx-tree>\n     * ```\n     *\n     * ```typescript\n     * const node: IgxTreeNode<any> = this.tree.findNodes(data[0])[0];\n     * const selected = node.selected;\n     * node.selected = true;\n     * ```\n     */\n    get selected(): boolean;\n    set selected(val: boolean);\n    /** Get/set whether the node is expanded\n     *\n     * ```html\n     * <igx-tree>\n     *  ...\n     *  <igx-tree-node *ngFor=\"let node of data\" [expanded]=\"node.name === this.expandedNode\">\n     *      {{ node.label }}\n     *  </igx-tree-node>\n     * </igx-tree>\n     * ```\n     *\n     * ```typescript\n     * const node: IgxTreeNode<any> = this.tree.findNodes(data[0])[0];\n     * const expanded = node.expanded;\n     * node.expanded = true;\n     * ```\n     */\n    get expanded(): boolean;\n    set expanded(val: boolean);\n    /** @hidden @internal */\n    get expandIndicatorTemplate(): TemplateRef<any>;\n    /**\n     * The native DOM element representing the node. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second node\n     * const node: IgxTreeNode = this.tree.nodes.first();\n     * const nodeElement: HTMLElement = node.nativeElement;\n     * ```\n     */\n    /** @hidden @internal */\n    get nativeElement(): HTMLElement;\n    /** @hidden @internal */\n    ngOnInit(): void;\n    /** @hidden @internal */\n    ngAfterViewInit(): void;\n    /**\n     * @hidden @internal\n     * Sets the focus to the node's <a> child, if present\n     * Sets the node as the tree service's focusedNode\n     * Marks the node as the current active element\n     */\n    handleFocus(): void;\n    /**\n     * @hidden @internal\n     * Clear the node's focused status\n     */\n    clearFocus(): void;\n    /**\n     * @hidden @internal\n     */\n    onSelectorClick(event: any): void;\n    /**\n     * Toggles the node expansion state, triggering animation\n     *\n     * ```html\n     * <igx-tree>\n     *      <igx-tree-node #node>My Node</igx-tree-node>\n     * </igx-tree>\n     * <button igxButton (click)=\"node.toggle()\">Toggle Node</button>\n     * ```\n     *\n     * ```typescript\n     * const myNode: IgxTreeNode<any> = this.tree.findNodes(data[0])[0];\n     * myNode.toggle();\n     * ```\n     */\n    toggle(): void;\n    /** @hidden @internal */\n    indicatorClick(): void;\n    /**\n     * @hidden @internal\n     */\n    onPointerDown(event: any): void;\n    ngOnDestroy(): void;\n    /**\n     * Expands the node, triggering animation\n     *\n     * ```html\n     * <igx-tree>\n     *      <igx-tree-node #node>My Node</igx-tree-node>\n     * </igx-tree>\n     * <button igxButton (click)=\"node.expand()\">Expand Node</button>\n     * ```\n     *\n     * ```typescript\n     * const myNode: IgxTreeNode<any> = this.tree.findNodes(data[0])[0];\n     * myNode.expand();\n     * ```\n     */\n    expand(): void;\n    /**\n     * Collapses the node, triggering animation\n     *\n     * ```html\n     * <igx-tree>\n     *      <igx-tree-node #node>My Node</igx-tree-node>\n     * </igx-tree>\n     * <button igxButton (click)=\"node.collapse()\">Collapse Node</button>\n     * ```\n     *\n     * ```typescript\n     * const myNode: IgxTreeNode<any> = this.tree.findNodes(data[0])[0];\n     * myNode.collapse();\n     * ```\n     */\n    collapse(): void;\n    /** @hidden @internal */\n    addLinkChild(link: IgxTreeNodeLinkDirective): void;\n    /** @hidden @internal */\n    removeLinkChild(link: IgxTreeNodeLinkDirective): void;\n}\n"]}