{"version":3,"file":"button.directive.d.ts","sources":["button.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, Renderer2 } from '@angular/core';\nimport { DisplayDensityBase, IDisplayDensityOptions } from '../../core/density';\nimport { IBaseEventArgs } from '../../core/utils';\ndeclare const IgxButtonType: {\n    Flat: \"flat\";\n    Raised: \"raised\";\n    Outlined: \"outlined\";\n    Icon: \"icon\";\n    FAB: \"fab\";\n};\n/**\n * Determines the Button type.\n */\nexport declare type IgxButtonType = typeof IgxButtonType[keyof typeof IgxButtonType];\n/**\n * The Button directive provides the Ignite UI Button functionality to every component that's intended to be used as a button.\n *\n * @igxModule IgxButtonModule\n *\n * @igxParent Data Entry & Display\n *\n * @igxTheme igx-button-theme\n *\n * @igxKeywords button, span, div, click\n *\n * @remarks\n * The Ignite UI Button directive is intended to be used by any button, span or div and turn it into a fully functional button.\n *\n * @example\n * ```html\n * <button igxButton=\"outlined\">A Button</button>\n * ```\n */\nexport declare class IgxButtonDirective extends DisplayDensityBase {\n    element: ElementRef;\n    private _renderer;\n    protected _displayDensityOptions: IDisplayDensityOptions;\n    private static ngAcceptInputType_type;\n    /**\n     * Called when the button is clicked.\n     */\n    buttonClick: EventEmitter<any>;\n    /**\n     * Called when the button is selected.\n     */\n    buttonSelected: EventEmitter<IButtonEventArgs>;\n    /**\n     * Sets/gets the `role` attribute.\n     *\n     * @example\n     * ```typescript\n     * this.button.role = 'navbutton';\n     * let buttonRole = this.button.role;\n     * ```\n     */\n    role: string;\n    /**\n     * @hidden\n     * @internal\n     */\n    _cssClass: string;\n    /**\n     * @hidden\n     * @internal\n     */\n    _disabled: boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _type;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _color;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _label;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _backgroundColor;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _selected;\n    /**\n     * Gets or sets whether the button is selected.\n     * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.\n     *\n     * @example\n     * ```html\n     * <button igxButton=\"flat\" [selected]=\"button.selected\"></button>\n     * ```\n     */\n    set selected(value: boolean);\n    get selected(): boolean;\n    constructor(element: ElementRef, _renderer: Renderer2, _displayDensityOptions: IDisplayDensityOptions);\n    /**\n     * @hidden\n     * @internal\n     */\n    onClick(ev: MouseEvent): void;\n    /**\n     * Returns the underlying DOM element.\n     */\n    get nativeElement(): any;\n    /**\n     * Sets the type of the button.\n     *\n     * @example\n     * ```html\n     * <button igxButton=\"icon\"></button>\n     * ```\n     */\n    set type(type: IgxButtonType);\n    /**\n     * Sets the button text color.\n     *\n     * @example\n     * ```html\n     * <button igxButton igxButtonColor=\"orange\"></button>\n     * ```\n     */\n    set color(value: string);\n    /**\n     * Sets the background color of the button.\n     *\n     * @example\n     *  ```html\n     * <button igxButton igxButtonBackground=\"red\"></button>\n     * ```\n     */\n    set background(value: string);\n    /**\n     * Sets the `aria-label` attribute.\n     *\n     * @example\n     *  ```html\n     * <button igxButton=\"flat\" igxLabel=\"Label\"></button>\n     * ```\n     */\n    set label(value: string);\n    /**\n     * Get the disabled state of the button;\n     *\n     * @example\n     * ```typescript\n     * const disabled = this.button.disabled;\n     * ```\n     */\n    get disabled(): boolean;\n    /**\n     * Enables/disables the button.\n     *\n     * @example\n     * ```html\n     * <button igxButton= \"fab\" [disabled]=\"true\"></button>\n     * ```\n     */\n    set disabled(val: boolean);\n    /**\n     * @hidden\n     * @internal\n     */\n    get flat(): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    get raised(): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    get outlined(): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    get icon(): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    get fab(): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    get cosy(): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    get compact(): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    get disabledAttribute(): true;\n    /**\n     * @hidden\n     * @internal\n     */\n    select(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    deselect(): void;\n}\nexport interface IButtonEventArgs extends IBaseEventArgs {\n    button: IgxButtonDirective;\n}\n/**\n *\n * @hidden\n */\nexport declare class IgxButtonModule {\n}\nexport {};\n"]}