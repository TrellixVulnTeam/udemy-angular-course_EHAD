{"version":3,"file":"date-range-picker.component.d.ts","sources":["date-range-picker.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, Injector, NgModuleRef, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges, TemplateRef } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';\nimport { WEEKDAYS } from '../calendar/public_api';\nimport { IDisplayDensityOptions } from '../core/density';\nimport { IDateRangePickerResourceStrings } from '../core/i18n/date-range-picker-resources';\nimport { PlatformUtil } from '../core/utils';\nimport { IgxPickerActionsDirective } from '../date-common/picker-icons.common';\nimport { PickerBaseDirective } from '../date-common/picker-base.directive';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport { IgxInputDirective, IgxInputGroupComponent, IgxInputGroupType, IgxLabelDirective } from '../input-group/public_api';\nimport { IgxOverlayService, OverlaySettings } from '../services/public_api';\nimport { DateRange, IgxDateRangeInputsBaseComponent } from './date-range-picker-inputs.common';\n/**\n * Provides the ability to select a range of dates from a calendar UI or editable inputs.\n *\n * @igxModule IgxDateRangeModule\n *\n * @igxTheme igx-input-group-theme, igx-calendar-theme, igx-date-range-picker-theme\n *\n * @igxKeywords date, range, date range, date picker\n *\n * @igxGroup scheduling\n *\n * @remarks\n * It displays the range selection in a single or two input fields.\n * The default template displays a single *readonly* input field\n * while projecting `igx-date-range-start` and `igx-date-range-end`\n * displays two *editable* input fields.\n *\n * @example\n * ```html\n * <igx-date-range-picker mode=\"dropdown\"></igx-date-range-picker>\n * ```\n */\nexport declare class IgxDateRangePickerComponent extends PickerBaseDirective implements OnChanges, OnInit, AfterViewInit, OnDestroy, ControlValueAccessor, Validator {\n    element: ElementRef;\n    protected _localeId: any;\n    protected platform: PlatformUtil;\n    private _injector;\n    private _moduleRef;\n    private _overlayService;\n    protected _displayDensityOptions?: IDisplayDensityOptions;\n    protected _inputGroupType?: IgxInputGroupType;\n    /**\n     * The number of displayed month views.\n     *\n     * @remarks\n     * Default is `2`.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker [displayMonthsCount]=\"3\"></igx-date-range-picker>\n     * ```\n     */\n    displayMonthsCount: number;\n    /**\n     * Gets/Sets whether dates that are not part of the current month will be displayed.\n     *\n     * @remarks\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker [hideOutsideDays]=\"true\"></igx-date-range-picker>\n     * ```\n     */\n    hideOutsideDays: boolean;\n    /**\n     * The start day of the week.\n     *\n     * @remarks\n     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker [weekStart]=\"1\"></igx-date-range-picker>\n     * ```\n     */\n    weekStart: WEEKDAYS;\n    /**\n     * Locale settings used for value formatting and calendar.\n     *\n     * @remarks\n     * Uses Angular's `LOCALE_ID` by default. Affects both input mask and display format if those are not set.\n     * If a `locale` is set, it must be registered via `registerLocaleData`.\n     * Please refer to https://angular.io/guide/i18n#i18n-pipes.\n     * If it is not registered, `Intl` will be used for formatting.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker locale=\"jp\"></igx-date-range-picker>\n     * ```\n     */\n    locale: string;\n    /**\n     * A custom formatter function, applied on the selected or passed in date.\n     *\n     * @example\n     * ```typescript\n     * private dayFormatter = new Intl.DateTimeFormat(\"en\", { weekday: \"long\" });\n     * private monthFormatter = new Intl.DateTimeFormat(\"en\", { month: \"long\" });\n     *\n     * public formatter(date: Date): string {\n     *  return `${this.dayFormatter.format(date)} - ${this.monthFormatter.format(date)} - ${date.getFullYear()}`;\n     * }\n     * ```\n     * ```html\n     * <igx-date-range-picker [formatter]=\"formatter\"></igx-date-range-picker>\n     * ```\n     */\n    formatter: (val: DateRange) => string;\n    /**\n     * The default text of the calendar dialog `done` button.\n     *\n     * @remarks\n     * Default value is `Done`.\n     * An @Input property that renders Done button with custom text. By default `doneButtonText` is set to Done.\n     * The button will only show up in `dialog` mode.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker doneButtonText=\"完了\"></igx-date-range-picker>\n     * ```\n     */\n    set doneButtonText(value: string);\n    get doneButtonText(): string;\n    /**\n     * Custom overlay settings that should be used to display the calendar.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker [overlaySettings]=\"customOverlaySettings\"></igx-date-range-picker>\n     * ```\n     */\n    overlaySettings: OverlaySettings;\n    /**\n     * The format used when editable inputs are not focused.\n     *\n     * @remarks\n     * Uses Angular's DatePipe.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker displayFormat=\"EE/M/yy\"></igx-date-range-picker>\n     * ```\n     *\n     */\n    displayFormat: string;\n    /**\n     * The expected user input format and placeholder.\n     *\n     * @remarks\n     * Default is `\"'MM/dd/yyyy'\"`\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker inputFormat=\"dd/MM/yy\"></igx-date-range-picker>\n     * ```\n     */\n    inputFormat: string;\n    /**\n     * The minimum value in a valid range.\n     *\n     * @example\n     * <igx-date-range-picker [minValue]=\"minDate\"></igx-date-range-picker>\n     */\n    set minValue(value: Date | string);\n    get minValue(): Date | string;\n    /**\n     * The maximum value in a valid range.\n     *\n     * @example\n     * <igx-date-range-picker [maxValue]=\"maxDate\"></igx-date-range-picker>\n     */\n    set maxValue(value: Date | string);\n    get maxValue(): Date | string;\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n     */\n    set resourceStrings(value: IDateRangePickerResourceStrings);\n    /**\n     * An accessor that returns the resource strings.\n     */\n    get resourceStrings(): IDateRangePickerResourceStrings;\n    /**\n     * Sets the `placeholder` for single-input `IgxDateRangePickerComponent`.\n     *\n     *   @example\n     * ```html\n     * <igx-date-range-picker [placeholder]=\"'Choose your dates'\"></igx-date-range-picker>\n     * ```\n     */\n    placeholder: string;\n    /**\n     * Gets/Sets the container used for the popup element.\n     *\n     * @remarks\n     *  `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     * @example\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-date-range-picker [outlet]=\"outlet\"></igx-date-range-picker>\n     * //..\n     * ```\n     */\n    outlet: IgxOverlayOutletDirective | ElementRef<any>;\n    /**\n     * Emitted when the picker's value changes. Used for two-way binding.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker [(value)]=\"date\"></igx-date-range-picker>\n     * ```\n     */\n    valueChange: EventEmitter<DateRange>;\n    /** @hidden @internal */\n    cssClass: string;\n    /** @hidden @internal */\n    inputGroup: IgxInputGroupComponent;\n    /** @hidden @internal */\n    inputDirective: IgxInputDirective;\n    /** @hidden @internal */\n    projectedInputs: QueryList<IgxDateRangeInputsBaseComponent>;\n    label: IgxLabelDirective;\n    pickerActions: IgxPickerActionsDirective;\n    /** @hidden @internal */\n    dateSeparatorTemplate: TemplateRef<any>;\n    /** @hidden @internal */\n    get dateSeparator(): string;\n    /** @hidden @internal */\n    get appliedFormat(): string;\n    /** @hidden @internal */\n    get singleInputFormat(): string;\n    /**\n     * Gets calendar state.\n     *\n     * ```typescript\n     * let state = this.dateRange.collapsed;\n     * ```\n     */\n    get collapsed(): boolean;\n    /**\n     * The currently selected value / range from the calendar\n     *\n     * @remarks\n     * The current value is of type `DateRange`\n     *\n     * @example\n     * ```typescript\n     * const newValue: DateRange = { start: new Date(\"2/2/2012\"), end: new Date(\"3/3/2013\")};\n     * this.dateRangePicker.value = newValue;\n     * ```\n     */\n    get value(): DateRange | null;\n    set value(value: DateRange | null);\n    /** @hidden @internal */\n    get hasProjectedInputs(): boolean;\n    /** @hidden @internal */\n    get separatorClass(): string;\n    private get calendar();\n    private get dropdownOverlaySettings();\n    private get dialogOverlaySettings();\n    private get required();\n    private _resourceStrings;\n    private _doneButtonText;\n    private _dateSeparator;\n    private _value;\n    private _overlayId;\n    private _ngControl;\n    private _statusChanges$;\n    private _calendar;\n    private _positionSettings;\n    private _focusedInput;\n    private _overlaySubFilter;\n    private _dialogOverlaySettings;\n    private _dropDownOverlaySettings;\n    private onChangeCallback;\n    private onTouchCallback;\n    private onValidatorChange;\n    constructor(element: ElementRef, _localeId: any, platform: PlatformUtil, _injector: Injector, _moduleRef: NgModuleRef<any>, _overlayService: IgxOverlayService, _displayDensityOptions?: IDisplayDensityOptions, _inputGroupType?: IgxInputGroupType);\n    /** @hidden @internal */\n    onKeyDown(event: KeyboardEvent): void;\n    /**\n     * Opens the date range picker's dropdown or dialog.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker #dateRange></igx-date-range-picker>\n     *\n     * <button (click)=\"dateRange.open()\">Open Dialog</button\n     * ```\n     */\n    open(overlaySettings?: OverlaySettings): void;\n    /**\n     * Closes the date range picker's dropdown or dialog.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker #dateRange></igx-date-range-picker>\n     *\n     * <button (click)=\"dateRange.close()\">Close Dialog</button>\n     * ```\n     */\n    close(): void;\n    /**\n     * Toggles the date range picker's dropdown or dialog\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker #dateRange></igx-date-range-picker>\n     *\n     * <button (click)=\"dateRange.toggle()\">Toggle Dialog</button>\n     * ```\n     */\n    toggle(overlaySettings?: OverlaySettings): void;\n    /**\n     * Selects a range of dates. If no `endDate` is passed, range is 1 day (only `startDate`)\n     *\n     * @example\n     * ```typescript\n     * public selectFiveDayRange() {\n     *  const today = new Date();\n     *  const inFiveDays = new Date(new Date().setDate(today.getDate() + 5));\n     *  this.dateRange.select(today, inFiveDays);\n     * }\n     * ```\n     */\n    select(startDate: Date, endDate?: Date): void;\n    /** @hidden @internal */\n    writeValue(value: DateRange): void;\n    /** @hidden @internal */\n    registerOnChange(fn: any): void;\n    /** @hidden @internal */\n    registerOnTouched(fn: any): void;\n    /** @hidden @internal */\n    validate(control: AbstractControl): ValidationErrors | null;\n    /** @hidden @internal */\n    registerOnValidatorChange?(fn: any): void;\n    /** @hidden @internal */\n    setDisabledState?(isDisabled: boolean): void;\n    /** @hidden */\n    ngOnInit(): void;\n    /** @hidden */\n    ngAfterViewInit(): void;\n    /** @hidden @internal */\n    ngOnChanges(changes: SimpleChanges): void;\n    /** @hidden @internal */\n    ngOnDestroy(): void;\n    /** @hidden @internal */\n    getEditElement(): HTMLInputElement;\n    protected onStatusChanged: () => void;\n    private get isTouchedOrDirty();\n    private handleSelection;\n    private handleClosing;\n    private subscribeToOverlayEvents;\n    private updateValue;\n    private updateValidityOnBlur;\n    private updateDisabledState;\n    private getInputState;\n    private setRequiredToInputs;\n    private parseMinValue;\n    private parseMaxValue;\n    private updateCalendar;\n    private swapEditorDates;\n    private valueInRange;\n    private extractRange;\n    private toRangeOfDates;\n    private subscribeToDateEditorEvents;\n    private attachOnTouched;\n    private cacheFocusedInput;\n    private configPositionStrategy;\n    private configOverlaySettings;\n    private initialSetValue;\n    private updateInputs;\n    private updateDisplayFormat;\n    private updateInputFormat;\n    private _initializeCalendarContainer;\n}\n"]}