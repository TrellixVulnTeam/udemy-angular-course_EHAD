import { IGridEditDoneEventArgs, IGridEditEventArgs, IgxGridBaseDirective } from '../grid/public_api';
import { IgxRowDirective } from '../row.directive';
import { GridType } from './grid.interface';
export declare class IgxRow {
    id: any;
    index: number;
    data: any;
    grid: IgxGridBaseDirective & GridType;
    transactionState: any;
    state: any;
    newData: any;
    isAddRow: boolean;
    constructor(id: any, index: number, data: any, grid: IgxGridBaseDirective & GridType);
    createEditEventArgs(includeNewValue?: boolean, event?: Event): IGridEditEventArgs;
    createDoneEditEventArgs(cachedRowData: any, event?: Event): IGridEditDoneEventArgs;
}
export declare class IgxCell {
    id: any;
    rowIndex: number;
    column: any;
    value: any;
    editValue: any;
    rowData: any;
    grid: IgxGridBaseDirective & GridType;
    primaryKey: any;
    state: any;
    constructor(id: any, rowIndex: number, column: any, value: any, editValue: any, rowData: any, grid: IgxGridBaseDirective & GridType);
    castToNumber(value: any): any;
    createEditEventArgs(includeNewValue?: boolean, event?: Event): IGridEditEventArgs;
    createDoneEditEventArgs(value: any, event?: Event): IGridEditDoneEventArgs;
}
export declare class IgxGridCRUDService {
    grid: IgxGridBaseDirective & GridType;
    cell: IgxCell | null;
    row: IgxRow | null;
    isInCompositionMode: boolean;
    cancelAddMode: boolean;
    /**
     * @hidden @interal
     */
    addRowParent: any;
    private _cellEditingBlocked;
    private _rowEditingBlocked;
    createCell(cell: any): IgxCell;
    createRow(cell: IgxCell): IgxRow;
    sameRow(rowID: any): boolean;
    sameCell(cell: IgxCell): boolean;
    get cellInEditMode(): boolean;
    /**
     * @hidden @internal
     */
    get rowInEditMode(): IgxRowDirective<IgxGridBaseDirective & GridType>;
    get rowEditing(): boolean;
    get primaryKey(): any;
    get cellEditingBlocked(): boolean;
    set cellEditingBlocked(val: boolean);
    get rowEditingBlocked(): boolean;
    set rowEditingBlocked(val: boolean);
    enterEditMode(cell: any, event?: Event): void;
    /** Clears cell and row editing state and closes row editing template if it is open */
    endEditMode(): void;
    /**
     * Finishes the row transactions on the current row.
     *
     * @remarks
     * If `commit === true`, passes them from the pending state to the data (or transaction service)
     * @example
     * ```html
     * <button igxButton (click)="grid.endEdit(true)">Commit Row</button>
     * ```
     * @param commit
     */
    endEdit(commit?: boolean, event?: Event): boolean;
    /** Enters row edit mode */
    beginRowEdit(newCell: any, event?: Event): boolean;
    /**
     * @hidden @internal
     */
    endRowTransaction(commit: boolean, row: IgxRow, event?: Event): boolean;
    /** Exit row edit mode */
    exitRowEdit(commit: boolean, event?: Event): boolean;
    /**
     * @hidden
     * @internal
     */
    endRowEditTabStop(commit?: boolean, event?: Event): boolean;
    /** Clears row editing state */
    endRowEdit(): void;
    beginCellEdit(newCell: any, event?: Event): void;
    /** Exit cell edit mode */
    exitCellEdit(event?: Event): boolean;
    /** Clears cell editing state */
    endCellEdit(): void;
    /** Returns whether the targeted cell is in edit mode */
    targetInEdit(rowIndex: number, columnIndex: number): boolean;
    /** Enters cell edit mode */
    beginAddRow(cell: any, event?: Event): void;
    endAdd(commit?: boolean, event?: Event): boolean;
    /**
     * @hidden @internal
     */
    endAddRow(): void;
    /**
     * @hidden
     * @internal
     * TODO: consider changing modifier
     */
    _findRecordIndexInView(rec: any): number;
    private _getParentRecordId;
}
