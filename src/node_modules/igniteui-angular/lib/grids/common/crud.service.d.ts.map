{"version":3,"file":"crud.service.d.ts","sources":["crud.service.d.ts"],"names":[],"mappingssourcesContent":["import { IGridEditDoneEventArgs, IGridEditEventArgs, IgxGridBaseDirective } from '../grid/public_api';\nimport { IgxRowDirective } from '../row.directive';\nimport { GridType } from './grid.interface';\nexport declare class IgxRow {\n    id: any;\n    index: number;\n    data: any;\n    grid: IgxGridBaseDirective & GridType;\n    transactionState: any;\n    state: any;\n    newData: any;\n    isAddRow: boolean;\n    constructor(id: any, index: number, data: any, grid: IgxGridBaseDirective & GridType);\n    createEditEventArgs(includeNewValue?: boolean, event?: Event): IGridEditEventArgs;\n    createDoneEditEventArgs(cachedRowData: any, event?: Event): IGridEditDoneEventArgs;\n}\nexport declare class IgxCell {\n    id: any;\n    rowIndex: number;\n    column: any;\n    value: any;\n    editValue: any;\n    rowData: any;\n    grid: IgxGridBaseDirective & GridType;\n    primaryKey: any;\n    state: any;\n    constructor(id: any, rowIndex: number, column: any, value: any, editValue: any, rowData: any, grid: IgxGridBaseDirective & GridType);\n    castToNumber(value: any): any;\n    createEditEventArgs(includeNewValue?: boolean, event?: Event): IGridEditEventArgs;\n    createDoneEditEventArgs(value: any, event?: Event): IGridEditDoneEventArgs;\n}\nexport declare class IgxGridCRUDService {\n    grid: IgxGridBaseDirective & GridType;\n    cell: IgxCell | null;\n    row: IgxRow | null;\n    isInCompositionMode: boolean;\n    cancelAddMode: boolean;\n    /**\n     * @hidden @interal\n     */\n    addRowParent: any;\n    private _cellEditingBlocked;\n    private _rowEditingBlocked;\n    createCell(cell: any): IgxCell;\n    createRow(cell: IgxCell): IgxRow;\n    sameRow(rowID: any): boolean;\n    sameCell(cell: IgxCell): boolean;\n    get cellInEditMode(): boolean;\n    /**\n     * @hidden @internal\n     */\n    get rowInEditMode(): IgxRowDirective<IgxGridBaseDirective & GridType>;\n    get rowEditing(): boolean;\n    get primaryKey(): any;\n    get cellEditingBlocked(): boolean;\n    set cellEditingBlocked(val: boolean);\n    get rowEditingBlocked(): boolean;\n    set rowEditingBlocked(val: boolean);\n    enterEditMode(cell: any, event?: Event): void;\n    /** Clears cell and row editing state and closes row editing template if it is open */\n    endEditMode(): void;\n    /**\n     * Finishes the row transactions on the current row.\n     *\n     * @remarks\n     * If `commit === true`, passes them from the pending state to the data (or transaction service)\n     * @example\n     * ```html\n     * <button igxButton (click)=\"grid.endEdit(true)\">Commit Row</button>\n     * ```\n     * @param commit\n     */\n    endEdit(commit?: boolean, event?: Event): boolean;\n    /** Enters row edit mode */\n    beginRowEdit(newCell: any, event?: Event): boolean;\n    /**\n     * @hidden @internal\n     */\n    endRowTransaction(commit: boolean, row: IgxRow, event?: Event): boolean;\n    /** Exit row edit mode */\n    exitRowEdit(commit: boolean, event?: Event): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    endRowEditTabStop(commit?: boolean, event?: Event): boolean;\n    /** Clears row editing state */\n    endRowEdit(): void;\n    beginCellEdit(newCell: any, event?: Event): void;\n    /** Exit cell edit mode */\n    exitCellEdit(event?: Event): boolean;\n    /** Clears cell editing state */\n    endCellEdit(): void;\n    /** Returns whether the targeted cell is in edit mode */\n    targetInEdit(rowIndex: number, columnIndex: number): boolean;\n    /** Enters cell edit mode */\n    beginAddRow(cell: any, event?: Event): void;\n    endAdd(commit?: boolean, event?: Event): boolean;\n    /**\n     * @hidden @internal\n     */\n    endAddRow(): void;\n    /**\n     * @hidden\n     * @internal\n     * TODO: consider changing modifier\n     */\n    _findRecordIndexInView(rec: any): number;\n    private _getParentRecordId;\n}\n"]}