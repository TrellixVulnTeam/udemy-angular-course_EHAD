{"version":3,"file":"tabs.directive.d.ts","sources":["tabs.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AnimationBuilder } from '@angular/animations';\nimport { AfterViewInit, EventEmitter, OnDestroy, QueryList } from '@angular/core';\nimport { IgxCarouselComponentBase } from '../carousel/carousel-base';\nimport { IBaseEventArgs } from '../core/utils';\nimport { IgxTabItemDirective } from './tab-item.directive';\nimport { IgxTabContentBase, IgxTabsBase } from './tabs.base';\nexport interface ITabsBaseEventArgs extends IBaseEventArgs {\n    readonly owner: IgxTabsDirective;\n}\nexport interface ITabsSelectedIndexChangingEventArgs extends ITabsBaseEventArgs {\n    cancel: boolean;\n    readonly oldIndex: number;\n    newIndex: number;\n}\nexport interface ITabsSelectedItemChangeEventArgs extends ITabsBaseEventArgs {\n    readonly oldItem: IgxTabItemDirective;\n    readonly newItem: IgxTabItemDirective;\n}\nexport declare abstract class IgxTabsDirective extends IgxCarouselComponentBase implements IgxTabsBase, AfterViewInit, OnDestroy {\n    /** @hidden */\n    role: string;\n    /**\n     * An @Input property that gets/sets the index of the selected item.\n     * Default value is 0 if contents are defined otherwise defaults to -1.\n     */\n    get selectedIndex(): number;\n    set selectedIndex(value: number);\n    /**\n     * Enables/disables the transition animation of the contents.\n     */\n    get disableAnimation(): boolean;\n    set disableAnimation(value: boolean);\n    /**\n     * Output to enable support for two-way binding on [(selectedIndex)]\n     */\n    selectedIndexChange: EventEmitter<number>;\n    /**\n     * Emitted when the selected index is about to change.\n     */\n    selectedIndexChanging: EventEmitter<ITabsSelectedIndexChangingEventArgs>;\n    /**\n     * Emitted when the selected item is changed.\n     */\n    selectedItemChange: EventEmitter<ITabsSelectedItemChangeEventArgs>;\n    /**\n     * Returns the items.\n     */\n    items: QueryList<IgxTabItemDirective>;\n    /**\n     * Gets the selected item.\n     */\n    get selectedItem(): IgxTabItemDirective;\n    /** @hidden */\n    panels: QueryList<IgxTabContentBase>;\n    /** @hidden */\n    protected _disableAnimation: boolean;\n    /** @hidden */\n    protected currentItem: IgxTabItemDirective;\n    /** @hidden */\n    protected previousItem: IgxTabItemDirective;\n    /** @hidden */\n    protected componentName: string;\n    private _selectedIndex;\n    private _itemChanges$;\n    /** @hidden */\n    constructor(builder: AnimationBuilder);\n    /** @hidden */\n    ngAfterViewInit(): void;\n    /** @hidden */\n    ngOnDestroy(): void;\n    /** @hidden */\n    selectTab(tab: IgxTabItemDirective, selected: boolean): void;\n    /** @hidden */\n    protected getPreviousElement(): HTMLElement;\n    /** @hidden */\n    protected getCurrentElement(): HTMLElement;\n    /** @hidden */\n    protected scrollTabHeaderIntoView(): void;\n    /** @hidden */\n    protected onItemChanges(): void;\n    private setAttributes;\n    private setHeaderAttribute;\n    private setPanelAttribute;\n    private get hasPanels();\n    private updateSelectedTabs;\n    private triggerPanelAnimations;\n    /** @hidden */\n    protected abstract getNextTabId(): any;\n}\n"]}