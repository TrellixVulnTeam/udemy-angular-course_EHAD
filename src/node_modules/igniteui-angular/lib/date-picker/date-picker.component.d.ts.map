{"version":3,"file":"date-picker.component.d.ts","sources":["date-picker.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnDestroy, ElementRef, NgModuleRef, OnInit, AfterViewInit, Injector, AfterViewChecked, QueryList, Renderer2, PipeTransform } from '@angular/core';\nimport { ControlValueAccessor, AbstractControl, ValidationErrors, Validator } from '@angular/forms';\nimport { WEEKDAYS, IFormattingViews, IFormattingOptions } from '../calendar/public_api';\nimport { IgxLabelDirective, IgxInputGroupType } from '../input-group/public_api';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings, IgxOverlayService } from '../services/public_api';\nimport { IDatePickerResourceStrings } from '../core/i18n/date-picker-resources';\nimport { DateRangeDescriptor } from '../core/dates/dateRange';\nimport { PlatformUtil } from '../core/utils';\nimport { PickerBaseDirective } from '../date-common/picker-base.directive';\nimport { IDisplayDensityOptions } from '../core/density';\nimport { DatePart, DatePartDeltas } from '../directives/date-time-editor/public_api';\nimport { PickerHeaderOrientation as PickerHeaderOrientation } from '../date-common/types';\nimport { IDatePickerValidationFailedEventArgs } from './date-picker.common';\nimport { IgxPickerClearComponent } from '../date-common/public_api';\n/**\n * Date Picker displays a popup calendar that lets users select a single date.\n *\n * @igxModule IgxDatePickerModule\n * @igxTheme igx-calendar-theme, igx-icon-theme\n * @igxGroup Scheduling\n * @igxKeywords datepicker, calendar, schedule, date\n * @example\n * ```html\n * <igx-date-picker [(ngModel)]=\"selectedDate\"></igx-date-picker>\n * ```\n */\nexport declare class IgxDatePickerComponent extends PickerBaseDirective implements ControlValueAccessor, Validator, OnInit, AfterViewInit, OnDestroy, AfterViewChecked {\n    element: ElementRef<HTMLElement>;\n    protected _localeId: string;\n    private _overlayService;\n    private _moduleRef;\n    private _injector;\n    private _renderer;\n    private platform;\n    protected _displayDensityOptions?: IDisplayDensityOptions;\n    protected _inputGroupType?: IgxInputGroupType;\n    /**\n     * Gets/Sets on which day the week starts.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker [weekStart]=\"4\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    weekStart: WEEKDAYS | number;\n    /**\n     * Gets/Sets whether the inactive dates will be hidden.\n     *\n     * @remarks\n     * Applies to dates that are out of the current month.\n     * Default value is `false`.\n     * @example\n     * ```html\n     * <igx-date-picker [hideOutsideDays]=\"true\"></igx-date-picker>\n     * ```\n     * @example\n     * ```typescript\n     * let hideOutsideDays = this.datePicker.hideOutsideDays;\n     * ```\n     */\n    hideOutsideDays: boolean;\n    /**\n     * Gets/Sets the number of month views displayed.\n     *\n     * @remarks\n     * Default value is `1`.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker [displayMonthsCount]=\"2\"></igx-date-picker>\n     * ```\n     * @example\n     * ```typescript\n     * let monthViewsDisplayed = this.datePicker.displayMonthsCount;\n     * ```\n     */\n    displayMonthsCount: number;\n    /**\n     * Show/hide week numbers\n     *\n     * @example\n     * ```html\n     * <igx-date-picker [showWeekNumbers]=\"true\"></igx-date-picker>\n     * ``\n     */\n    showWeekNumbers: boolean;\n    /**\n     * Gets/Sets a custom formatter function on the selected or passed date.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker [value]=\"date\" [formatter]=\"formatter\"></igx-date-picker>\n     * ```\n     */\n    formatter: (val: Date) => string;\n    /**\n     * Gets/Sets the orientation of the `IgxDatePickerComponent` header.\n     *\n     *  @example\n     * ```html\n     * <igx-date-picker headerOrientation=\"vertical\"></igx-date-picker>\n     * ```\n     */\n    headerOrientation: PickerHeaderOrientation;\n    /**\n     * Gets/Sets the today button's label.\n     *\n     *  @example\n     * ```html\n     * <igx-date-picker todayButtonLabel=\"Today\"></igx-date-picker>\n     * ```\n     */\n    todayButtonLabel: string;\n    /**\n     * Gets/Sets the cancel button's label.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker cancelButtonLabel=\"Cancel\"></igx-date-picker>\n     * ```\n     */\n    cancelButtonLabel: string;\n    /**\n     * Specify if the currently spun date segment should loop over.\n     *\n     *  @example\n     * ```html\n     * <igx-date-picker [spinLoop]=\"false\"></igx-date-picker>\n     * ```\n     */\n    spinLoop: boolean;\n    /**\n     * Delta values used to increment or decrement each editor date part on spin actions.\n     * All values default to `1`.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker [spinDelta]=\"{ date: 5, month: 2 }\"></igx-date-picker>\n     * ```\n     */\n    spinDelta: Pick<DatePartDeltas, 'date' | 'month' | 'year'>;\n    /**\n     * Gets/Sets the container used for the popup element.\n     *\n     * @remarks\n     *  `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     * @example\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-date-picker [outlet]=\"outlet\"></igx-date-picker>\n     * //..\n     * ```\n     */\n    outlet: IgxOverlayOutletDirective | ElementRef;\n    /**\n     * Gets/Sets the value of `id` attribute.\n     *\n     * @remarks If not provided it will be automatically generated.\n     * @example\n     * ```html\n     * <igx-date-picker [id]=\"'igx-date-picker-3'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    id: string;\n    /**\n     * Gets/Sets the format views of the `IgxDatePickerComponent`.\n     *\n     * @example\n     * ```typescript\n     * let formatViews = this.datePicker.formatViews;\n     *  this.datePicker.formatViews = {day:false, month: false, year:false};\n     * ```\n     */\n    formatViews: IFormattingViews;\n    /**\n     * Gets/Sets the disabled dates descriptors.\n     *\n     * @example\n     * ```typescript\n     * let disabledDates = this.datepicker.disabledDates;\n     * this.datePicker.disabledDates = [ {type: DateRangeType.Weekends}, ...];\n     * ```\n     */\n    get disabledDates(): DateRangeDescriptor[];\n    set disabledDates(value: DateRangeDescriptor[]);\n    /**\n     * Gets/Sets the special dates descriptors.\n     *\n     * @example\n     * ```typescript\n     * let specialDates = this.datepicker.specialDates;\n     * this.datePicker.specialDates = [ {type: DateRangeType.Weekends}, ... ];\n     * ```\n     */\n    get specialDates(): DateRangeDescriptor[];\n    set specialDates(value: DateRangeDescriptor[]);\n    /**\n     * Gets/Sets the format options of the `IgxDatePickerComponent`.\n     *\n     * @example\n     * ```typescript\n     * this.datePicker.calendarFormat = {day: \"numeric\",  month: \"long\", weekday: \"long\", year: \"numeric\"};\n     * ```\n     */\n    calendarFormat: IFormattingOptions;\n    /**\n     * Gets/Sets the selected date.\n     *\n     *  @example\n     * ```html\n     * <igx-date-picker [value]=\"date\"></igx-date-picker>\n     * ```\n     */\n    get value(): Date | string;\n    set value(date: Date | string);\n    /**\n     * The minimum value the picker will accept.\n     *\n     * @example\n     * <igx-date-picker [minValue]=\"minDate\"></igx-date-picker>\n     */\n    set minValue(value: Date | string);\n    get minValue(): Date | string;\n    /**\n     * The maximum value the picker will accept.\n     *\n     * @example\n     * <igx-date-picker [maxValue]=\"maxDate\"></igx-date-picker>\n     */\n    set maxValue(value: Date | string);\n    get maxValue(): Date | string;\n    /**\n     * Gets/Sets the resource strings for the picker's default toggle icon.\n     * By default it uses EN resources.\n     */\n    resourceStrings: IDatePickerResourceStrings;\n    /** @hidden @internal */\n    readOnly: boolean;\n    /**\n     * Emitted when the picker's value changes.\n     *\n     * @remarks\n     * Used for `two-way` bindings.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker [(value)]=\"date\"></igx-date-picker>\n     * ```\n     */\n    valueChange: EventEmitter<Date>;\n    /**\n     * Emitted when the user types/spins invalid date in the date-picker editor.\n     *\n     *  @example\n     * ```html\n     * <igx-date-picker (validationFailed)=\"onValidationFailed($event)\"></igx-date-picker>\n     * ```\n     */\n    validationFailed: EventEmitter<IDatePickerValidationFailedEventArgs>;\n    /** @hidden @internal */\n    clearComponents: QueryList<IgxPickerClearComponent>;\n    /** @hidden @internal */\n    label: IgxLabelDirective;\n    private headerTemplate;\n    private dateTimeEditor;\n    private inputGroup;\n    private labelDirective;\n    private inputDirective;\n    private subheaderTemplate;\n    private pickerActions;\n    private get dialogOverlaySettings();\n    private get dropDownOverlaySettings();\n    private get inputGroupElement();\n    private get dateValue();\n    private get pickerFormatViews();\n    private get pickerCalendarFormat();\n    /** @hidden @internal */\n    displayValue: PipeTransform;\n    private _resourceStrings;\n    private _dateValue;\n    private _overlayId;\n    private _value;\n    private _targetViewDate;\n    private _ngControl;\n    private _statusChanges$;\n    private _calendar;\n    private _specialDates;\n    private _disabledDates;\n    private _overlaySubFilter;\n    private _dropDownOverlaySettings;\n    private _dialogOverlaySettings;\n    private _calendarFormat;\n    private _defFormatViews;\n    private _onChangeCallback;\n    private _onTouchedCallback;\n    private _onValidatorChange;\n    constructor(element: ElementRef<HTMLElement>, _localeId: string, _overlayService: IgxOverlayService, _moduleRef: NgModuleRef<any>, _injector: Injector, _renderer: Renderer2, platform: PlatformUtil, _displayDensityOptions?: IDisplayDensityOptions, _inputGroupType?: IgxInputGroupType);\n    /** @hidden @internal */\n    get required(): boolean;\n    /** @hidden @internal */\n    get pickerResourceStrings(): IDatePickerResourceStrings;\n    /** @hidden @internal */\n    onKeyDown(event: KeyboardEvent): void;\n    /**\n     * Opens the picker's dropdown or dialog.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker #picker></igx-date-picker>\n     *\n     * <button (click)=\"picker.open()\">Open Dialog</button>\n     * ```\n     */\n    open(settings?: OverlaySettings): void;\n    /**\n     * Toggles the picker's dropdown or dialog\n     *\n     * @example\n     * ```html\n     * <igx-date-picker #picker></igx-date-picker>\n     *\n     * <button (click)=\"picker.toggle()\">Toggle Dialog</button>\n     * ```\n     */\n    toggle(settings?: OverlaySettings): void;\n    /**\n     * Closes the picker's dropdown or dialog.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker #picker></igx-date-picker>\n     *\n     * <button (click)=\"picker.close()\">Close Dialog</button>\n     * ```\n     */\n    close(): void;\n    /**\n     * Selects a date.\n     *\n     * @remarks Updates the value in the input field.\n     *\n     * @example\n     * ```typescript\n     * this.datePicker.select(date);\n     * ```\n     * @param date passed date that has to be set to the calendar.\n     */\n    select(value: Date): void;\n    /**\n     * Selects today's date and closes the picker.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker #picker></igx-date-picker>\n     *\n     * <button (click)=\"picker.selectToday()\">Select Today</button>\n     * ```\n     * */\n    selectToday(): void;\n    /**\n     * Clears the input field and the picker's value.\n     *\n     * @example\n     * ```typescript\n     * this.datePicker.clear();\n     * ```\n     */\n    clear(): void;\n    /**\n     * Increment a specified `DatePart`.\n     *\n     * @param datePart The optional DatePart to increment. Defaults to Date.\n     * @param delta The optional delta to increment by. Overrides `spinDelta`.\n     * @example\n     * ```typescript\n     * this.datePicker.increment(DatePart.Date);\n     * ```\n     */\n    increment(datePart?: DatePart, delta?: number): void;\n    /**\n     * Decrement a specified `DatePart`\n     *\n     * @param datePart The optional DatePart to decrement. Defaults to Date.\n     * @param delta The optional delta to decrement by. Overrides `spinDelta`.\n     * @example\n     * ```typescript\n     * this.datePicker.decrement(DatePart.Date);\n     * ```\n     */\n    decrement(datePart?: DatePart, delta?: number): void;\n    /** @hidden @internal */\n    writeValue(value: Date | string): void;\n    /** @hidden @internal */\n    registerOnChange(fn: any): void;\n    /** @hidden @internal */\n    registerOnTouched(fn: any): void;\n    /** @hidden @internal */\n    setDisabledState?(isDisabled: boolean): void;\n    /** @hidden @internal */\n    registerOnValidatorChange(fn: any): void;\n    /** @hidden @internal */\n    validate(control: AbstractControl): ValidationErrors | null;\n    /** @hidden @internal */\n    ngOnInit(): void;\n    /** @hidden @internal */\n    ngAfterViewInit(): void;\n    /** @hidden @internal */\n    ngAfterViewChecked(): void;\n    /** @hidden @internal */\n    ngOnDestroy(): void;\n    /** @hidden @internal */\n    getEditElement(): HTMLInputElement;\n    private subscribeToClick;\n    private setDateValue;\n    private updateValidity;\n    private get isTouchedOrDirty();\n    private onStatusChanged;\n    private handleSelection;\n    private subscribeToDateEditorEvents;\n    private subscribeToOverlayEvents;\n    private getMinMaxDates;\n    private setDisabledDates;\n    private _initializeCalendarContainer;\n    private setCalendarViewDate;\n}\n"]}