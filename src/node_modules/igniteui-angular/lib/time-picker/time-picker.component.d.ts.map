{"version":3,"file":"time-picker.component.d.ts","sources":["time-picker.component.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, OnDestroy, OnInit, AfterViewInit, Injector, PipeTransform, QueryList } from '@angular/core';\nimport { ControlValueAccessor, AbstractControl, ValidationErrors, Validator } from '@angular/forms';\nimport { HammerGestureConfig } from '@angular/platform-browser';\nimport { IgxInputGroupType } from '../input-group/public_api';\nimport { IDisplayDensityOptions } from '../core/density';\nimport { IgxTimePickerActionsDirective } from './time-picker.directives';\nimport { IgxTimePickerBase } from './time-picker.common';\nimport { OverlaySettings } from '../services/overlay/utilities';\nimport { ITimePickerResourceStrings } from '../core/i18n/time-picker-resources';\nimport { IBaseEventArgs, PlatformUtil } from '../core/utils';\nimport { PickerInteractionMode } from '../date-common/types';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { PickerBaseDirective } from '../date-common/picker-base.directive';\nimport { DatePart, DatePartDeltas } from '../directives/date-time-editor/public_api';\nimport { PickerHeaderOrientation } from '../date-common/types';\nimport { IgxPickerClearComponent } from '../date-common/picker-icons.common';\nexport declare class TimePickerHammerConfig extends HammerGestureConfig {\n    overrides: {\n        pan: {\n            direction: 24;\n            threshold: number;\n        };\n    };\n}\nexport interface IgxTimePickerValidationFailedEventArgs extends IBaseEventArgs {\n    previousValue: Date | string;\n    currentValue: Date | string;\n}\nexport declare class IgxTimePickerComponent extends PickerBaseDirective implements IgxTimePickerBase, ControlValueAccessor, OnInit, OnDestroy, AfterViewInit, Validator {\n    element: ElementRef;\n    protected _localeId: string;\n    protected _displayDensityOptions: IDisplayDensityOptions;\n    protected _inputGroupType: IgxInputGroupType;\n    private _injector;\n    private platform;\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * ```html\n     * <igx-time-picker [id]=\"'igx-time-picker-5'\" [displayFormat]=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    id: string;\n    /**\n     * The format used when editable input is not focused. Defaults to the `inputFormat` if not set.\n     *\n     * @remarks\n     * Uses Angular's `DatePipe`.\n     *\n     * @example\n     * ```html\n     * <igx-time-picker displayFormat=\"mm:ss\"></igx-time-picker>\n     * ```\n     *\n     */\n    displayFormat: string;\n    /**\n     * The expected user input format and placeholder.\n     *\n     * @remarks\n     * Default is `hh:mm tt`\n     *\n     * @example\n     * ```html\n     * <igx-time-picker inputFormat=\"HH:mm\"></igx-time-picker>\n     * ```\n     */\n    inputFormat: string;\n    /**\n     * Gets/Sets the interaction mode - dialog or drop down.\n     *\n     * @example\n     * ```html\n     * <igx-time-picker mode=\"dialog\"></igx-time-picker>\n     * ```\n     */\n    mode: PickerInteractionMode;\n    /**\n     * The minimum value the picker will accept.\n     *\n     * @remarks\n     * If a `string` value is passed in, it must be in ISO format.\n     *\n     * @example\n     * ```html\n     * <igx-time-picker [minValue]=\"18:00:00\"></igx-time-picker>\n     * ```\n     */\n    set minValue(value: Date | string);\n    get minValue(): Date | string;\n    /**\n     * Gets if the dropdown/dialog is collapsed\n     *\n     * ```typescript\n     * let isCollapsed = this.timePicker.collapsed;\n     * ```\n     */\n    get collapsed(): boolean;\n    /**\n     * The maximum value the picker will accept.\n     *\n     * @remarks\n     * If a `string` value is passed in, it must be in ISO format.\n     *\n     * @example\n     * ```html\n     * <igx-time-picker [maxValue]=\"20:30:00\"></igx-time-picker>\n     * ```\n     */\n    set maxValue(value: Date | string);\n    get maxValue(): Date | string;\n    /**\n     * An @Input property that determines the spin behavior. By default `spinLoop` is set to true.\n     * The seconds, minutes and hour spinning will wrap around by default.\n     * ```html\n     * <igx-time-picker [spinLoop]=\"false\"></igx-time-picker>\n     * ```\n     */\n    spinLoop: boolean;\n    /**\n     * Gets/Sets a custom formatter function on the selected or passed date.\n     *\n     * @example\n     * ```html\n     * <igx-time-picker [value]=\"date\" [formatter]=\"formatter\"></igx-time-picker>\n     * ```\n     */\n    formatter: (val: Date) => string;\n    /**\n     * Sets the orientation of the picker's header.\n     *\n     * @remarks\n     * Available in dialog mode only. Default value is `horizontal`.\n     *\n     * ```html\n     * <igx-time-picker [headerOrientation]=\"'vertical'\"></igx-time-picker>\n     * ```\n     */\n    headerOrientation: PickerHeaderOrientation;\n    /** @hidden @internal */\n    readOnly: boolean;\n    /**\n     * Emitted after a selection has been done.\n     *\n     * @example\n     * ```html\n     * <igx-time-picker (selected)=\"onSelection($event)\"></igx-time-picker>\n     * ```\n     */\n    selected: EventEmitter<Date>;\n    /**\n     * Emitted when the picker's value changes.\n     *\n     * @remarks\n     * Used for `two-way` bindings.\n     *\n     * @example\n     * ```html\n     * <igx-time-picker [(value)]=\"date\"></igx-time-picker>\n     * ```\n     */\n    valueChange: EventEmitter<string | Date>;\n    /**\n     * Emitted when the user types/spins invalid time in the time-picker editor.\n     *\n     *  @example\n     * ```html\n     * <igx-time-picker (validationFailed)=\"onValidationFailed($event)\"></igx-time-picker>\n     * ```\n     */\n    validationFailed: EventEmitter<IgxTimePickerValidationFailedEventArgs>;\n    /** @hidden */\n    hourList: ElementRef;\n    /** @hidden */\n    minuteList: ElementRef;\n    /** @hidden */\n    secondsList: ElementRef;\n    /** @hidden */\n    ampmList: ElementRef;\n    /** @hidden @internal */\n    clearComponents: QueryList<IgxPickerClearComponent>;\n    /** @hidden @internal */\n    label: IgxLabelDirective;\n    /** @hidden @internal */\n    timePickerActionsDirective: IgxTimePickerActionsDirective;\n    private inputDirective;\n    private _inputGroup;\n    private dateTimeEditor;\n    private toggleRef;\n    /** @hidden */\n    cleared: boolean;\n    /** @hidden */\n    isNotEmpty: boolean;\n    /** @hidden */\n    currentHour: number;\n    /** @hidden */\n    currentMinutes: number;\n    /** @hidden */\n    get showClearButton(): boolean;\n    /** @hidden */\n    get showHoursList(): boolean;\n    /** @hidden */\n    get showMinutesList(): boolean;\n    /** @hidden */\n    get showSecondsList(): boolean;\n    /** @hidden */\n    get showAmPmList(): boolean;\n    /** @hidden */\n    get isTwelveHourFormat(): boolean;\n    /** @hidden @internal */\n    get isDropdown(): boolean;\n    /** @hidden @internal */\n    get isVertical(): boolean;\n    /** @hidden @internal */\n    get selectedDate(): Date;\n    /** @hidden @internal */\n    get minDateValue(): Date;\n    /** @hidden @internal */\n    get maxDateValue(): Date;\n    private get required();\n    private get dialogOverlaySettings();\n    private get dropDownOverlaySettings();\n    /** @hidden @internal */\n    displayValue: PipeTransform;\n    /** @hidden @internal */\n    minDropdownValue: Date;\n    /** @hidden @internal */\n    maxDropdownValue: Date;\n    /** @hidden @internal */\n    hourItems: any[];\n    /** @hidden @internal */\n    minuteItems: any[];\n    /** @hidden @internal */\n    secondsItems: any[];\n    /** @hidden @internal */\n    ampmItems: any[];\n    private _value;\n    private _dateValue;\n    private _dateMinValue;\n    private _dateMaxValue;\n    private _selectedDate;\n    private _resourceStrings;\n    private _okButtonLabel;\n    private _cancelButtonLabel;\n    private _itemsDelta;\n    private _statusChanges$;\n    private _ngControl;\n    private _onChangeCallback;\n    private _onTouchedCallback;\n    private _onValidatorChange;\n    private _defaultDialogOverlaySettings;\n    private _defaultDropDownOverlaySettings;\n    /**\n     * The currently selected value / time from the drop-down/dialog\n     *\n     * @remarks\n     * The current value is of type `Date`\n     *\n     * @example\n     * ```typescript\n     * const newValue: Date = new Date(2000, 2, 2, 10, 15, 15);\n     * this.timePicker.value = newValue;\n     * ```\n     */\n    get value(): Date | string;\n    /**\n     * An accessor that allows you to set a time using the `value` input.\n     * ```html\n     * public date: Date = new Date(Date.now());\n     *  //...\n     * <igx-time-picker [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    set value(value: Date | string);\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n     */\n    set resourceStrings(value: ITimePickerResourceStrings);\n    /**\n     * An accessor that returns the resource strings.\n     */\n    get resourceStrings(): ITimePickerResourceStrings;\n    /**\n     * An @Input property that renders OK button with custom text. By default `okButtonLabel` is set to OK.\n     * ```html\n     * <igx-time-picker okButtonLabel='SET' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    set okButtonLabel(value: string);\n    /**\n     * An accessor that returns the label of ok button.\n     */\n    get okButtonLabel(): string;\n    /**\n     * An @Input property that renders cancel button with custom text.\n     * By default `cancelButtonLabel` is set to Cancel.\n     * ```html\n     * <igx-time-picker cancelButtonLabel='Exit' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    set cancelButtonLabel(value: string);\n    /**\n     * An accessor that returns the label of cancel button.\n     */\n    get cancelButtonLabel(): string;\n    /**\n     * Delta values used to increment or decrement each editor date part on spin actions and\n     * to display time portions in the dropdown/dialog.\n     * By default `itemsDelta` is set to `{hour: 1, minute: 1, second: 1}`\n     * ```html\n     * <igx-time-picker [itemsDelta]=\"{hour:3, minute:5, second:10}\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    set itemsDelta(value: Pick<DatePartDeltas, 'hours' | 'minutes' | 'seconds'>);\n    get itemsDelta(): Pick<DatePartDeltas, 'hours' | 'minutes' | 'seconds'>;\n    constructor(element: ElementRef, _localeId: string, _displayDensityOptions: IDisplayDensityOptions, _inputGroupType: IgxInputGroupType, _injector: Injector, platform: PlatformUtil);\n    /** @hidden @internal */\n    onKeyDown(event: KeyboardEvent): void;\n    /** @hidden @internal */\n    getPartValue(value: Date, type: string): string;\n    /** @hidden @internal */\n    toISOString(value: Date): string;\n    /** @hidden @internal */\n    writeValue(value: Date | string): void;\n    /** @hidden @internal */\n    registerOnChange(fn: (_: Date | string) => void): void;\n    /** @hidden @internal */\n    registerOnTouched(fn: () => void): void;\n    /** @hidden @internal */\n    registerOnValidatorChange(fn: any): void;\n    /** @hidden @internal */\n    validate(control: AbstractControl): ValidationErrors | null;\n    /** @hidden @internal */\n    setDisabledState(isDisabled: boolean): void;\n    /** @hidden */\n    ngOnInit(): void;\n    /** @hidden */\n    ngAfterViewInit(): void;\n    /** @hidden */\n    ngOnDestroy(): void;\n    /** @hidden */\n    getEditElement(): HTMLInputElement;\n    /**\n     * Opens the picker's dialog UI.\n     *\n     * @param settings OverlaySettings - the overlay settings to use for positioning the drop down or dialog container according to\n     * ```html\n     * <igx-time-picker #picker [value]=\"date\"></igx-time-picker>\n     * <button (click)=\"picker.open()\">Open Dialog</button>\n     * ```\n     */\n    open(settings?: OverlaySettings): void;\n    /**\n     * Closes the dropdown/dialog.\n     * ```html\n     * <igx-time-picker #timePicker></igx-time-picker>\n     * ```\n     * ```typescript\n     * @ViewChild('timePicker', { read: IgxTimePickerComponent }) picker: IgxTimePickerComponent;\n     * picker.close();\n     * ```\n     */\n    close(): void;\n    toggle(settings?: OverlaySettings): void;\n    /**\n     * Clears the time picker value if it is a `string` or resets the time to `00:00:00` if the value is a Date object.\n     *\n     * @example\n     * ```typescript\n     * this.timePicker.clear();\n     * ```\n     */\n    clear(): void;\n    /**\n     * Selects time from the igxTimePicker.\n     *\n     * @example\n     * ```typescript\n     * this.timePicker.select(date);\n     *\n     * @param date Date object containing the time to be selected.\n     */\n    select(date: Date | string): void;\n    /**\n     * Increment a specified `DatePart`.\n     *\n     * @param datePart The optional DatePart to increment. Defaults to Hour.\n     * @param delta The optional delta to increment by. Overrides `itemsDelta`.\n     * @example\n     * ```typescript\n     * this.timePicker.increment(DatePart.Hours);\n     * ```\n     */\n    increment(datePart?: DatePart, delta?: number): void;\n    /**\n     * Decrement a specified `DatePart`\n     *\n     * @param datePart The optional DatePart to decrement. Defaults to Hour.\n     * @param delta The optional delta to decrement by. Overrides `itemsDelta`.\n     * @example\n     * ```typescript\n     * this.timePicker.decrement(DatePart.Seconds);\n     * ```\n     */\n    decrement(datePart?: DatePart, delta?: number): void;\n    /** @hidden @internal */\n    cancelButtonClick(): void;\n    /** @hidden @internal */\n    okButtonClick(): void;\n    /** @hidden @internal */\n    onItemClick(item: string, dateType: string): void;\n    /** @hidden @internal */\n    nextHour(delta: number): void;\n    /** @hidden @internal */\n    nextMinute(delta: number): void;\n    /** @hidden @internal */\n    nextSeconds(delta: number): void;\n    /** @hidden @internal */\n    nextAmPm(delta?: number): void;\n    /** @hidden @internal */\n    setSelectedValue(value: Date): void;\n    protected onStatusChanged(): void;\n    private setMinMaxDropdownValue;\n    private initializeContainer;\n    private validateDropdownValue;\n    private emitValueChange;\n    private emitValidationFailedEvent;\n    private updateValidityOnBlur;\n    private valueInRange;\n    private parseToDate;\n    private toTwentyFourHourFormat;\n    private updateValue;\n    private updateEditorValue;\n    private subscribeToDateEditorEvents;\n    private subscribeToToggleDirectiveEvents;\n}\n/**\n * @hidden\n */\nexport declare class IgxTimePickerModule {\n}\n"]}