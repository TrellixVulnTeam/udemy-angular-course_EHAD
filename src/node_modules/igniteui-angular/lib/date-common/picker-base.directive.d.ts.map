{"version":3,"file":"picker-base.directive.d.ts","sources":["picker-base.directive.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, QueryList } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { DisplayDensityBase, IDisplayDensityOptions } from '../core/density';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IToggleView } from '../core/navigation';\nimport { IBaseCancelableBrowserEventArgs, IBaseEventArgs } from '../core/utils';\nimport { DateRange } from '../date-range-picker/public_api';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport { IgxInputGroupType } from '../input-group/public_api';\nimport { OverlaySettings } from '../services/overlay/utilities';\nimport { IgxPickerToggleComponent } from './picker-icons.common';\nimport { PickerInteractionMode } from './types';\nexport declare abstract class PickerBaseDirective extends DisplayDensityBase implements IToggleView, EditorProvider, AfterViewInit, OnDestroy {\n    element: ElementRef;\n    protected _localeId: string;\n    protected _displayDensityOptions?: IDisplayDensityOptions;\n    protected _inputGroupType?: IgxInputGroupType;\n    /**\n     * The editor's input mask.\n     *\n     * @remarks\n     * Also used as a placeholder when none is provided.\n     * Default is `\"'MM/dd/yyyy'\"`\n     *\n     * @example\n     * ```html\n     * <igx-date-picker inputFormat=\"dd/MM/yy\"></igx-date-picker>\n     * ```\n     */\n    inputFormat: string;\n    /**\n     * The format used to display the picker's value when it's not being edited.\n     *\n     * @remarks\n     * Uses Angular's DatePipe.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker displayFormat=\"EE/M/yy\"></igx-date-picker>\n     * ```\n     *\n     */\n    displayFormat: string;\n    /**\n     * Sets the `placeholder` of the picker's input.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker [placeholder]=\"'Choose your date'\"></igx-date-picker>\n     * ```\n     */\n    placeholder: string;\n    /**\n     * Can be `dropdown` with editable input field or `dialog` with readonly input field.\n     *\n     * @remarks\n     * Default mode is `dropdown`\n     *\n     * @example\n     * ```html\n     * <igx-date-picker mode=\"dialog\"></igx-date-picker>\n     * ```\n     */\n    mode: PickerInteractionMode;\n    /**\n     * Overlay settings used to display the pop-up element.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker [overlaySettings]=\"customOverlaySettings\"></igx-date-picker>\n     * ```\n     */\n    overlaySettings: OverlaySettings;\n    /**\n     * Enables or disables the picker.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker [disabled]=\"'true'\"></igx-date-picker>\n     * ```\n     */\n    disabled: boolean;\n    /**\n     * Locale settings used for value formatting and calendar or time spinner.\n     *\n     * @remarks\n     * Uses Angular's `LOCALE_ID` by default. Affects both input mask and display format if those are not set.\n     * If a `locale` is set, it must be registered via `registerLocaleData`.\n     * Please refer to https://angular.io/guide/i18n#i18n-pipes.\n     * If it is not registered, `Intl` will be used for formatting.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker locale=\"jp\"></igx-date-picker>\n     * ```\n     */\n    locale: string;\n    /**\n     * The container used for the pop-up element.\n     *\n     * @example\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * <!-- ... -->\n     * <igx-date-picker [outlet]=\"outlet\"></igx-date-picker>\n     * <!-- ... -->\n     * ```\n     */\n    outlet: IgxOverlayOutletDirective | ElementRef;\n    /**\n     * Determines how the picker's input will be styled.\n     *\n     * @remarks\n     * Default is `box`.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker [type]=\"'line'\"></igx-date-picker>\n     * ```\n     */\n    set type(val: IgxInputGroupType);\n    get type(): IgxInputGroupType;\n    /**\n     * Gets/Sets the default template editor's tabindex.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker [tabIndex]=\"1\"></igx-date-picker>\n     * ```\n     */\n    tabIndex: number | string;\n    /**\n     * Emitted when the calendar has started opening, cancelable.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker (opening)=\"handleOpening($event)\"></igx-date-picker>\n     * ```\n     */\n    opening: EventEmitter<IBaseCancelableBrowserEventArgs>;\n    /**\n     * Emitted after the calendar has opened.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker (opened)=\"handleOpened($event)\"></igx-date-picker>\n     * ```\n     */\n    opened: EventEmitter<IBaseEventArgs>;\n    /**\n     * Emitted when the calendar has started closing, cancelable.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker (closing)=\"handleClosing($event)\"></igx-date-picker>\n     * ```\n     */\n    closing: EventEmitter<IBaseCancelableBrowserEventArgs>;\n    /**\n     * Emitted after the calendar has closed.\n     *\n     * @example\n     * ```html\n     * <igx-date-picker (closed)=\"handleClosed($event)\"></igx-date-picker>\n     * ```\n     */\n    closed: EventEmitter<IBaseEventArgs>;\n    /** @hidden @internal */\n    toggleComponents: QueryList<IgxPickerToggleComponent>;\n    protected _collapsed: boolean;\n    protected _type: IgxInputGroupType;\n    protected _minValue: Date | string;\n    protected _maxValue: Date | string;\n    /**\n     * Gets the picker's pop-up state.\n     *\n     * @example\n     * ```typescript\n     * const state = this.picker.collapsed;\n     * ```\n     */\n    get collapsed(): boolean;\n    /** @hidden @internal */\n    get isDropdown(): boolean;\n    protected _destroy$: Subject<unknown>;\n    abstract valueChange: EventEmitter<any>;\n    constructor(element: ElementRef, _localeId: string, _displayDensityOptions?: IDisplayDensityOptions, _inputGroupType?: IgxInputGroupType);\n    /** @hidden @internal */\n    ngAfterViewInit(): void;\n    /** @hidden @internal */\n    ngOnDestroy(): void;\n    /** Subscribes to the click events of toggle/clear icons in a query */\n    protected subToIconsClicked(components: QueryList<IgxPickerToggleComponent>, next: () => any): void;\n    abstract select(value: Date | DateRange | string): void;\n    abstract open(settings?: OverlaySettings): void;\n    abstract toggle(settings?: OverlaySettings): void;\n    abstract close(): void;\n    abstract getEditElement(): HTMLInputElement;\n}\n"]}