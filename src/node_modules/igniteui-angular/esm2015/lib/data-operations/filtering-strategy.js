import { FilteringLogic } from './filtering-expression.interface';
import { FilteringExpressionsTree } from './filtering-expressions-tree';
import { resolveNestedPath, parseDate } from '../core/utils';
const DateType = 'date';
const DateTimeType = 'dateTime';
const TimeType = 'time';
export class NoopFilteringStrategy {
    constructor() { }
    static instance() {
        return this._instance || (this._instance = new NoopFilteringStrategy());
    }
    filter(data, _, __) {
        return data;
    }
}
NoopFilteringStrategy._instance = null;
export class BaseFilteringStrategy {
    findMatchByExpression(rec, expr, isDate, isTime, grid) {
        const cond = expr.condition;
        const val = this.getFieldValue(rec, expr.fieldName, isDate, isTime, grid);
        return cond.logic(val, expr.searchVal, expr.ignoreCase);
    }
    matchRecord(rec, expressions, grid) {
        if (expressions) {
            if (expressions instanceof FilteringExpressionsTree) {
                const expressionsTree = expressions;
                const operator = expressionsTree.operator;
                let matchOperand;
                if (expressionsTree.filteringOperands && expressionsTree.filteringOperands.length) {
                    for (const operand of expressionsTree.filteringOperands) {
                        matchOperand = this.matchRecord(rec, operand, grid);
                        // Return false if at least one operand does not match and the filtering logic is And
                        if (!matchOperand && operator === FilteringLogic.And) {
                            return false;
                        }
                        // Return true if at least one operand matches and the filtering logic is Or
                        if (matchOperand && operator === FilteringLogic.Or) {
                            return true;
                        }
                    }
                    return matchOperand;
                }
                return true;
            }
            else {
                const expression = expressions;
                const column = grid && grid.getColumnByName(expression.fieldName);
                const isDate = column ? column.dataType === DateType || column.dataType === DateTimeType : false;
                const isTime = column ? column.dataType === TimeType : false;
                return this.findMatchByExpression(rec, expression, isDate, isTime, grid);
            }
        }
        return true;
    }
}
export class FilteringStrategy extends BaseFilteringStrategy {
    constructor() {
        super();
    }
    static instance() {
        return this._instace || (this._instace = new this());
    }
    filter(data, expressionsTree, advancedExpressionsTree, grid) {
        let i;
        let rec;
        const len = data.length;
        const res = [];
        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {
            return data;
        }
        for (i = 0; i < len; i++) {
            rec = data[i];
            if (this.matchRecord(rec, expressionsTree, grid) && this.matchRecord(rec, advancedExpressionsTree, grid)) {
                res.push(rec);
            }
        }
        return res;
    }
    getFieldValue(rec, fieldName, isDate = false, isTime = false) {
        let value = resolveNestedPath(rec, fieldName);
        value = value && (isDate || isTime) ? parseDate(value) : value;
        return value;
    }
}
FilteringStrategy._instace = null;
export class FormattedValuesFilteringStrategy extends FilteringStrategy {
    /**
     * Creates a new instance of FormattedValuesFilteringStrategy.
     *
     * @param fields An array of column field names that should be formatted.
     * If omitted the values of all columns which has formatter will be formatted.
     */
    constructor(fields) {
        super();
        this.fields = fields;
    }
    /** @hidden */
    shouldApplyFormatter(fieldName) {
        return !this.fields || this.fields.length === 0 || this.fields.some(f => f === fieldName);
    }
    getFieldValue(rec, fieldName, isDate = false, isTime = false, grid) {
        const column = grid.getColumnByName(fieldName);
        let value = resolveNestedPath(rec, fieldName);
        value = column.formatter && this.shouldApplyFormatter(fieldName) ?
            column.formatter(value) : value && (isDate || isTime) ? parseDate(value) : value;
        return value;
    }
}
//# sourceMappingURL=data:application/json;base64,