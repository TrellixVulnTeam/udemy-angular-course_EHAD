import { Injectable } from '@angular/core';
/** @hidden @internal */
export class IgxTreeService {
    constructor() {
        this.expandedNodes = new Set();
        this.collapsingNodes = new Set();
        this.siblingComparer = (data, node) => node !== data && node.level === data.level;
    }
    /**
     * Adds the node to the `expandedNodes` set and fires the nodes change event
     *
     * @param node target node
     * @param uiTrigger is the event triggered by a ui interraction (so we know if we should animate)
     * @returns void
     */
    expand(node, uiTrigger) {
        var _a;
        this.collapsingNodes.delete(node);
        if (!this.expandedNodes.has(node)) {
            node.expandedChange.emit(true);
        }
        else {
            return;
        }
        this.expandedNodes.add(node);
        if (this.tree.singleBranchExpand) {
            (_a = this.tree.findNodes(node, this.siblingComparer)) === null || _a === void 0 ? void 0 : _a.forEach(e => {
                if (uiTrigger) {
                    e.collapse();
                }
                else {
                    e.expanded = false;
                }
            });
        }
    }
    /**
     * Adds a node to the `collapsing` collection
     *
     * @param node target node
     */
    collapsing(node) {
        this.collapsingNodes.add(node);
    }
    /**
     * Removes the node from the 'expandedNodes' set and emits the node's change event
     *
     * @param node target node
     * @returns void
     */
    collapse(node) {
        if (this.expandedNodes.has(node)) {
            node.expandedChange.emit(false);
        }
        this.collapsingNodes.delete(node);
        this.expandedNodes.delete(node);
    }
    isExpanded(node) {
        return this.expandedNodes.has(node);
    }
    register(tree) {
        this.tree = tree;
    }
}
IgxTreeService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL3RyZWUvdHJlZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0Msd0JBQXdCO0FBRXhCLE1BQU0sT0FBTyxjQUFjO0lBRDNCO1FBRVcsa0JBQWEsR0FBMEIsSUFBSSxHQUFHLEVBQW9CLENBQUM7UUFDbkUsb0JBQWUsR0FBMEIsSUFBSSxHQUFHLEVBQW9CLENBQUM7UUE0RHBFLG9CQUFlLEdBRXZCLENBQUMsSUFBc0IsRUFBRSxJQUFzQixFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNuRyxDQUFDO0lBNURHOzs7Ozs7T0FNRztJQUNJLE1BQU0sQ0FBQyxJQUFzQixFQUFFLFNBQW1COztRQUNyRCxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEM7YUFBTTtZQUNILE9BQU87U0FDVjtRQUNELElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUM5QixNQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLDBDQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDekQsSUFBSSxTQUFTLEVBQUU7b0JBQ1gsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO2lCQUNoQjtxQkFBTTtvQkFDSCxDQUFDLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztpQkFDdEI7WUFDTCxDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxVQUFVLENBQUMsSUFBc0I7UUFDcEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksUUFBUSxDQUFDLElBQXNCO1FBQ2xDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDOUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbkM7UUFDRCxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRU0sVUFBVSxDQUFDLElBQXNCO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVNLFFBQVEsQ0FBQyxJQUFhO1FBQ3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUM7OztZQTdESixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4VHJlZSwgSWd4VHJlZU5vZGUgfSBmcm9tICcuL2NvbW1vbic7XG5cbi8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIElneFRyZWVTZXJ2aWNlIHtcbiAgICBwdWJsaWMgZXhwYW5kZWROb2RlczogU2V0PElneFRyZWVOb2RlPGFueT4+ID0gbmV3IFNldDxJZ3hUcmVlTm9kZTxhbnk+PigpO1xuICAgIHB1YmxpYyBjb2xsYXBzaW5nTm9kZXM6IFNldDxJZ3hUcmVlTm9kZTxhbnk+PiA9IG5ldyBTZXQ8SWd4VHJlZU5vZGU8YW55Pj4oKTtcbiAgICBwcml2YXRlIHRyZWU6IElneFRyZWU7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIHRoZSBub2RlIHRvIHRoZSBgZXhwYW5kZWROb2Rlc2Agc2V0IGFuZCBmaXJlcyB0aGUgbm9kZXMgY2hhbmdlIGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gbm9kZSB0YXJnZXQgbm9kZVxuICAgICAqIEBwYXJhbSB1aVRyaWdnZXIgaXMgdGhlIGV2ZW50IHRyaWdnZXJlZCBieSBhIHVpIGludGVycmFjdGlvbiAoc28gd2Uga25vdyBpZiB3ZSBzaG91bGQgYW5pbWF0ZSlcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgcHVibGljIGV4cGFuZChub2RlOiBJZ3hUcmVlTm9kZTxhbnk+LCB1aVRyaWdnZXI/OiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29sbGFwc2luZ05vZGVzLmRlbGV0ZShub2RlKTtcbiAgICAgICAgaWYgKCF0aGlzLmV4cGFuZGVkTm9kZXMuaGFzKG5vZGUpKSB7XG4gICAgICAgICAgICBub2RlLmV4cGFuZGVkQ2hhbmdlLmVtaXQodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5leHBhbmRlZE5vZGVzLmFkZChub2RlKTtcbiAgICAgICAgaWYgKHRoaXMudHJlZS5zaW5nbGVCcmFuY2hFeHBhbmQpIHtcbiAgICAgICAgICAgIHRoaXMudHJlZS5maW5kTm9kZXMobm9kZSwgdGhpcy5zaWJsaW5nQ29tcGFyZXIpPy5mb3JFYWNoKGUgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh1aVRyaWdnZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5jb2xsYXBzZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGUuZXhwYW5kZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBub2RlIHRvIHRoZSBgY29sbGFwc2luZ2AgY29sbGVjdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIG5vZGUgdGFyZ2V0IG5vZGVcbiAgICAgKi9cbiAgICBwdWJsaWMgY29sbGFwc2luZyhub2RlOiBJZ3hUcmVlTm9kZTxhbnk+KTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29sbGFwc2luZ05vZGVzLmFkZChub2RlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBub2RlIGZyb20gdGhlICdleHBhbmRlZE5vZGVzJyBzZXQgYW5kIGVtaXRzIHRoZSBub2RlJ3MgY2hhbmdlIGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gbm9kZSB0YXJnZXQgbm9kZVxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBwdWJsaWMgY29sbGFwc2Uobm9kZTogSWd4VHJlZU5vZGU8YW55Pik6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5leHBhbmRlZE5vZGVzLmhhcyhub2RlKSkge1xuICAgICAgICAgICAgbm9kZS5leHBhbmRlZENoYW5nZS5lbWl0KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbGxhcHNpbmdOb2Rlcy5kZWxldGUobm9kZSk7XG4gICAgICAgIHRoaXMuZXhwYW5kZWROb2Rlcy5kZWxldGUobm9kZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGlzRXhwYW5kZWQobm9kZTogSWd4VHJlZU5vZGU8YW55Pik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5leHBhbmRlZE5vZGVzLmhhcyhub2RlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVnaXN0ZXIodHJlZTogSWd4VHJlZSkge1xuICAgICAgICB0aGlzLnRyZWUgPSB0cmVlO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2libGluZ0NvbXBhcmVyOlxuICAgIChkYXRhOiBJZ3hUcmVlTm9kZTxhbnk+LCBub2RlOiBJZ3hUcmVlTm9kZTxhbnk+KSA9PiBib29sZWFuID1cbiAgICAoZGF0YTogSWd4VHJlZU5vZGU8YW55Piwgbm9kZTogSWd4VHJlZU5vZGU8YW55PikgPT4gbm9kZSAhPT0gZGF0YSAmJiBub2RlLmxldmVsID09PSBkYXRhLmxldmVsO1xufVxuIl19