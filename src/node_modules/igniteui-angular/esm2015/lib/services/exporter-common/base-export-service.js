import { EventEmitter } from '@angular/core';
import { cloneArray, cloneValue, resolveNestedPath, yieldingLoop } from '../../core/utils';
import { DataUtil } from '../../data-operations/data-util';
import { ExportUtilities } from './export-utilities';
import { TreeGridFilteringStrategy } from '../../grids/tree-grid/tree-grid.filtering.strategy';
import { getHierarchy, isHierarchyMatch } from '../../data-operations/operations';
import { DatePipe } from '@angular/common';
export var ExportRecordType;
(function (ExportRecordType) {
    ExportRecordType[ExportRecordType["GroupedRecord"] = 1] = "GroupedRecord";
    ExportRecordType[ExportRecordType["TreeGridRecord"] = 2] = "TreeGridRecord";
    ExportRecordType[ExportRecordType["DataRecord"] = 3] = "DataRecord";
    ExportRecordType[ExportRecordType["HierarchicalGridRecord"] = 4] = "HierarchicalGridRecord";
    ExportRecordType[ExportRecordType["HeaderRecord"] = 5] = "HeaderRecord";
})(ExportRecordType || (ExportRecordType = {}));
export const DEFAULT_OWNER = 'default';
const DEFAULT_COLUMN_WIDTH = 8.43;
export class IgxBaseExporter {
    constructor() {
        this.exportEnded = new EventEmitter();
        /**
         * This event is emitted when a row is exported.
         * ```typescript
         * this.exporterService.rowExporting.subscribe((args: IRowExportingEventArgs) => {
         * // put event handler code here
         * });
         * ```
         *
         * @memberof IgxBaseExporter
         */
        this.rowExporting = new EventEmitter();
        /**
         * This event is emitted when a column is exported.
         * ```typescript
         * this.exporterService.columnExporting.subscribe((args: IColumnExportingEventArgs) => {
         * // put event handler code here
         * });
         * ```
         *
         * @memberof IgxBaseExporter
         */
        this.columnExporting = new EventEmitter();
        this._sort = null;
        this._ownersMap = new Map();
        this.flatRecords = [];
    }
    /**
     * Method for exporting IgxGrid component's data.
     * ```typescript
     * this.exporterService.export(this.igxGridForExport, this.exportOptions);
     * ```
     *
     * @memberof IgxBaseExporter
     */
    export(grid, options) {
        if (options === undefined || options === null) {
            throw Error('No options provided!');
        }
        this.options = options;
        const columns = grid.columnList.toArray();
        const columnList = this.getColumns(columns);
        const tagName = grid.nativeElement.tagName.toLowerCase();
        if (tagName === 'igx-hierarchical-grid') {
            this._ownersMap.set(grid, columnList);
            const childLayoutList = grid.childLayoutList;
            for (const island of childLayoutList) {
                this.mapHierarchicalGridColumns(island);
            }
        }
        else {
            this._ownersMap.set(DEFAULT_OWNER, columnList);
        }
        this.prepareData(grid);
        this.exportGridRecordsData(this.flatRecords, grid);
    }
    /**
     * Method for exporting any kind of array data.
     * ```typescript
     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);
     * ```
     *
     * @memberof IgxBaseExporter
     */
    exportData(data, options) {
        if (options === undefined || options === null) {
            throw Error('No options provided!');
        }
        this.options = options;
        const records = data.map(d => {
            const record = {
                data: d,
                type: ExportRecordType.DataRecord,
                level: 0
            };
            return record;
        });
        this.exportGridRecordsData(records);
    }
    exportGridRecordsData(records, grid) {
        var _a;
        if (this._ownersMap.size === 0) {
            const recordsData = records.map(r => r.data);
            const keys = ExportUtilities.getKeysFromData(recordsData);
            const columns = keys.map((k) => ({ header: k, field: k, skip: false }));
            const columnWidths = new Array(keys.length).fill(DEFAULT_COLUMN_WIDTH);
            const mapRecord = {
                columns,
                columnWidths,
                indexOfLastPinnedColumn: -1
            };
            this._ownersMap.set(DEFAULT_OWNER, mapRecord);
        }
        for (const [key, mapRecord] of this._ownersMap) {
            let skippedPinnedColumnsCount = 0;
            let columnsWithoutHeaderCount = 1;
            let indexOfLastPinnedColumn = mapRecord.indexOfLastPinnedColumn;
            mapRecord.columns.forEach((column, index) => {
                if (!column.skip) {
                    const columnExportArgs = {
                        header: !ExportUtilities.isNullOrWhitespaces(column.header) ?
                            column.header :
                            'Column' + columnsWithoutHeaderCount++,
                        field: column.field,
                        columnIndex: index,
                        cancel: false,
                        skipFormatter: false,
                        grid: key === DEFAULT_OWNER ? grid : key
                    };
                    this.columnExporting.emit(columnExportArgs);
                    column.header = columnExportArgs.header;
                    column.skip = columnExportArgs.cancel;
                    column.skipFormatter = columnExportArgs.skipFormatter;
                    if (column.skip && index <= indexOfLastPinnedColumn) {
                        skippedPinnedColumnsCount++;
                    }
                    if (this._sort && this._sort.fieldName === column.field) {
                        if (column.skip) {
                            this._sort = null;
                        }
                        else {
                            this._sort.fieldName = column.header;
                        }
                    }
                }
            });
            indexOfLastPinnedColumn -= skippedPinnedColumnsCount;
        }
        const dataToExport = new Array();
        const actualData = (_a = records[0]) === null || _a === void 0 ? void 0 : _a.data;
        const isSpecialData = ExportUtilities.isSpecialData(actualData);
        yieldingLoop(records.length, 100, (i) => {
            const row = records[i];
            this.exportRow(dataToExport, row, i, isSpecialData);
        }, () => {
            this.exportDataImplementation(dataToExport, this.options);
            this.resetDefaults();
        });
    }
    exportRow(data, record, index, isSpecialData) {
        if (!isSpecialData && record.type !== ExportRecordType.HeaderRecord) {
            const columns = record.owner === undefined ?
                this._ownersMap.get(DEFAULT_OWNER).columns :
                this._ownersMap.get(record.owner).columns;
            record.data = columns.reduce((a, e) => {
                if (!e.skip) {
                    let rawValue = resolveNestedPath(record.data, e.field);
                    const shouldApplyFormatter = e.formatter && !e.skipFormatter && record.type !== ExportRecordType.GroupedRecord;
                    if (e.dataType === 'date' &&
                        !(rawValue instanceof Date) &&
                        !shouldApplyFormatter &&
                        rawValue !== undefined &&
                        rawValue !== null) {
                        rawValue = new Date(rawValue);
                    }
                    else if (e.dataType === 'string' && rawValue instanceof Date) {
                        rawValue = rawValue.toString();
                    }
                    a[e.header] = shouldApplyFormatter ? e.formatter(rawValue) : rawValue;
                }
                return a;
            }, {});
        }
        const rowArgs = {
            rowData: record.data,
            rowIndex: index,
            cancel: false
        };
        this.rowExporting.emit(rowArgs);
        if (!rowArgs.cancel) {
            data.push(record);
        }
    }
    prepareData(grid) {
        this.flatRecords = [];
        const tagName = grid.nativeElement.tagName.toLowerCase();
        const hasFiltering = (grid.filteringExpressionsTree && grid.filteringExpressionsTree.filteringOperands.length > 0) ||
            (grid.advancedFilteringExpressionsTree && grid.advancedFilteringExpressionsTree.filteringOperands.length > 0);
        const hasSorting = grid.sortingExpressions &&
            grid.sortingExpressions.length > 0;
        switch (tagName) {
            case 'igx-hierarchical-grid': {
                this.prepareHierarchicalGridData(grid, hasFiltering, hasSorting);
                break;
            }
            case 'igx-tree-grid': {
                this.prepareTreeGridData(grid, hasFiltering, hasSorting);
                break;
            }
            default: {
                this.prepareGridData(grid, hasFiltering, hasSorting);
                break;
            }
        }
    }
    prepareHierarchicalGridData(grid, hasFiltering, hasSorting) {
        const skipOperations = (!hasFiltering || !this.options.ignoreFiltering) &&
            (!hasSorting || !this.options.ignoreSorting);
        if (skipOperations) {
            const data = grid.filteredSortedData;
            this.addHierarchicalGridData(grid, data);
        }
        else {
            let data = grid.data;
            if (hasFiltering && !this.options.ignoreFiltering) {
                const filteringState = {
                    expressionsTree: grid.filteringExpressionsTree,
                    advancedExpressionsTree: grid.advancedFilteringExpressionsTree,
                    strategy: grid.filterStrategy
                };
                data = DataUtil.filter(data, filteringState, grid);
            }
            if (hasSorting && !this.options.ignoreSorting) {
                this._sort = cloneValue(grid.sortingExpressions[0]);
                data = DataUtil.sort(data, grid.sortingExpressions, grid.sortStrategy, grid);
            }
            this.addHierarchicalGridData(grid, data);
        }
    }
    addHierarchicalGridData(grid, records) {
        const childLayoutList = grid.childLayoutList;
        const columnFields = this._ownersMap.get(grid).columns.map(col => col.field);
        for (const entry of records) {
            const expansionStateVal = grid.expansionStates.has(entry) ? grid.expansionStates.get(entry) : false;
            const dataWithoutChildren = Object.keys(entry)
                .filter(k => columnFields.includes(k))
                .reduce((obj, key) => {
                obj[key] = entry[key];
                return obj;
            }, {});
            const hierarchicalGridRecord = {
                data: dataWithoutChildren,
                level: 0,
                type: ExportRecordType.HierarchicalGridRecord,
                owner: grid,
            };
            this.flatRecords.push(hierarchicalGridRecord);
            for (const island of childLayoutList) {
                const path = {
                    rowID: island.primaryKey ? entry[island.primaryKey] : entry,
                    rowIslandKey: island.key
                };
                const islandGrid = grid === null || grid === void 0 ? void 0 : grid.hgridAPI.getChildGrid([path]);
                const keyRecordData = this.prepareIslandData(island, islandGrid, entry[island.key]) || [];
                this.getAllChildColumnsAndData(island, keyRecordData, expansionStateVal, islandGrid);
            }
        }
    }
    prepareIslandData(island, islandGrid, data) {
        if (islandGrid !== undefined) {
            const hasFiltering = (islandGrid.filteringExpressionsTree &&
                islandGrid.filteringExpressionsTree.filteringOperands.length > 0) ||
                (islandGrid.advancedFilteringExpressionsTree &&
                    islandGrid.advancedFilteringExpressionsTree.filteringOperands.length > 0);
            const hasSorting = islandGrid.sortingExpressions &&
                islandGrid.sortingExpressions.length > 0;
            const skipOperations = (!hasFiltering || !this.options.ignoreFiltering) &&
                (!hasSorting || !this.options.ignoreSorting);
            if (skipOperations) {
                data = islandGrid.filteredSortedData;
            }
            else {
                if (hasFiltering && !this.options.ignoreFiltering) {
                    const filteringState = {
                        expressionsTree: islandGrid.filteringExpressionsTree,
                        advancedExpressionsTree: islandGrid.advancedFilteringExpressionsTree,
                        strategy: islandGrid.filterStrategy
                    };
                    data = DataUtil.filter(data, filteringState, islandGrid);
                }
                if (hasSorting && !this.options.ignoreSorting) {
                    this._sort = cloneValue(islandGrid.sortingExpressions[0]);
                    data = DataUtil.sort(data, islandGrid.sortingExpressions, islandGrid.sortStrategy, islandGrid);
                }
            }
        }
        else {
            const hasFiltering = (island.filteringExpressionsTree &&
                island.filteringExpressionsTree.filteringOperands.length > 0) ||
                (island.advancedFilteringExpressionsTree &&
                    island.advancedFilteringExpressionsTree.filteringOperands.length > 0);
            const hasSorting = island.sortingExpressions &&
                island.sortingExpressions.length > 0;
            const skipOperations = (!hasFiltering || this.options.ignoreFiltering) &&
                (!hasSorting || this.options.ignoreSorting);
            if (!skipOperations) {
                if (hasFiltering && !this.options.ignoreFiltering) {
                    const filteringState = {
                        expressionsTree: island.filteringExpressionsTree,
                        advancedExpressionsTree: island.advancedFilteringExpressionsTree,
                        strategy: island.filterStrategy
                    };
                    data = DataUtil.filter(data, filteringState, island);
                }
                if (hasSorting && !this.options.ignoreSorting) {
                    this._sort = cloneValue(island.sortingExpressions[0]);
                    data = DataUtil.sort(data, island.sortingExpressions, island.sortStrategy, island);
                }
            }
        }
        return data;
    }
    getAllChildColumnsAndData(island, childData, expansionStateVal, grid) {
        const islandColumnList = island.childColumns.toArray();
        const columnList = this.getColumns(islandColumnList);
        const columnHeader = columnList.columns.map(col => col.header ? col.header : col.field);
        const headerRecord = {
            data: columnHeader,
            level: island.level,
            type: ExportRecordType.HeaderRecord,
            owner: island,
            hidden: !expansionStateVal
        };
        if (childData && childData.length > 0) {
            this.flatRecords.push(headerRecord);
            for (const rec of childData) {
                const exportRecord = {
                    data: rec,
                    level: island.level,
                    type: ExportRecordType.HierarchicalGridRecord,
                    owner: island,
                    hidden: !expansionStateVal
                };
                this.flatRecords.push(exportRecord);
                if (island.children.length > 0) {
                    const islandExpansionStateVal = grid === undefined ?
                        false :
                        grid.expansionStates.has(rec) ?
                            grid.expansionStates.get(rec) :
                            false;
                    for (const childIsland of island.children) {
                        const path = {
                            rowID: childIsland.primaryKey ? rec[childIsland.primaryKey] : rec,
                            rowIslandKey: childIsland.key
                        };
                        const childIslandGrid = grid === null || grid === void 0 ? void 0 : grid.hgridAPI.getChildGrid([path]);
                        const keyRecordData = this.prepareIslandData(island, childIslandGrid, rec[childIsland.key]) || [];
                        this.getAllChildColumnsAndData(childIsland, keyRecordData, islandExpansionStateVal, childIslandGrid);
                    }
                }
            }
        }
    }
    prepareGridData(grid, hasFiltering, hasSorting) {
        const groupedGridGroupingState = {
            expressions: grid.groupingExpressions,
            expansion: grid.groupingExpansionState,
            defaultExpanded: grid.groupsExpanded,
        };
        const hasGrouping = grid.groupingExpressions &&
            grid.groupingExpressions.length > 0;
        const skipOperations = (!hasFiltering || !this.options.ignoreFiltering) &&
            (!hasSorting || !this.options.ignoreSorting) &&
            (!hasGrouping || !this.options.ignoreGrouping);
        if (skipOperations) {
            if (hasGrouping) {
                this.addGroupedData(grid, grid.groupsRecords, groupedGridGroupingState);
            }
            else {
                this.addFlatData(grid.filteredSortedData);
            }
        }
        else {
            let gridData = grid.data;
            if (hasFiltering && !this.options.ignoreFiltering) {
                const filteringState = {
                    expressionsTree: grid.filteringExpressionsTree,
                    advancedExpressionsTree: grid.advancedFilteringExpressionsTree,
                    strategy: grid.filterStrategy
                };
                gridData = DataUtil.filter(gridData, filteringState, grid);
            }
            if (hasSorting && !this.options.ignoreSorting) {
                // TODO: We should drop support for this since in a grouped grid it doesn't make sense
                // this._sort = !isGroupedGrid ?
                //     cloneValue(grid.sortingExpressions[0]) :
                //     grid.sortingExpressions.length > 1 ?
                //         cloneValue(grid.sortingExpressions[1]) :
                //         cloneValue(grid.sortingExpressions[0]);
                gridData = DataUtil.sort(gridData, grid.sortingExpressions, grid.sortStrategy, grid);
            }
            if (hasGrouping && !this.options.ignoreGrouping) {
                const groupsRecords = [];
                DataUtil.group(cloneArray(gridData), groupedGridGroupingState, grid, groupsRecords);
                gridData = groupsRecords;
            }
            if (hasGrouping && !this.options.ignoreGrouping) {
                this.addGroupedData(grid, gridData, groupedGridGroupingState);
            }
            else {
                this.addFlatData(gridData);
            }
        }
    }
    prepareTreeGridData(grid, hasFiltering, hasSorting) {
        const skipOperations = (!hasFiltering || !this.options.ignoreFiltering) &&
            (!hasSorting || !this.options.ignoreSorting);
        if (skipOperations) {
            this.addTreeGridData(grid.processedRootRecords);
        }
        else {
            let gridData = grid.rootRecords;
            if (hasFiltering && !this.options.ignoreFiltering) {
                const filteringState = {
                    expressionsTree: grid.filteringExpressionsTree,
                    advancedExpressionsTree: grid.advancedFilteringExpressionsTree,
                    strategy: (grid.filterStrategy) ? grid.filterStrategy : new TreeGridFilteringStrategy()
                };
                gridData = filteringState.strategy
                    .filter(gridData, filteringState.expressionsTree, filteringState.advancedExpressionsTree);
            }
            if (hasSorting && !this.options.ignoreSorting) {
                this._sort = cloneValue(grid.sortingExpressions[0]);
                gridData = DataUtil.treeGridSort(gridData, grid.sortingExpressions, grid.sortStrategy);
            }
            this.addTreeGridData(gridData);
        }
    }
    addTreeGridData(records, parentExpanded = true) {
        if (!records) {
            return;
        }
        for (const record of records) {
            const hierarchicalRecord = {
                data: record.data,
                level: record.level,
                hidden: !parentExpanded,
                type: ExportRecordType.TreeGridRecord
            };
            this.flatRecords.push(hierarchicalRecord);
            this.addTreeGridData(record.children, parentExpanded && record.expanded);
        }
    }
    addFlatData(records) {
        if (!records) {
            return;
        }
        for (const record of records) {
            const data = {
                data: record,
                type: ExportRecordType.DataRecord,
                level: 0
            };
            this.flatRecords.push(data);
        }
    }
    addGroupedData(grid, records, groupingState, parentExpanded = true) {
        if (!records) {
            return;
        }
        const firstCol = this._ownersMap.get(DEFAULT_OWNER).columns[0].field;
        for (const record of records) {
            let recordVal = record.value;
            const hierarchy = getHierarchy(record);
            const expandState = groupingState.expansion.find((s) => isHierarchyMatch(s.hierarchy || [{ fieldName: record.expression.fieldName, value: recordVal }], hierarchy));
            const expanded = expandState ? expandState.expanded : groupingState.defaultExpanded;
            const isDate = recordVal instanceof Date;
            if (isDate) {
                const timeZoneOffset = recordVal.getTimezoneOffset() * 60000;
                const isoString = (new Date(recordVal - timeZoneOffset)).toISOString();
                const pipe = new DatePipe(grid.locale);
                recordVal = pipe.transform(isoString);
            }
            const groupExpressionName = record.column && record.column.header ?
                record.column.header :
                record.expression.fieldName;
            recordVal = recordVal !== null ? recordVal : '';
            const groupExpression = {
                data: { [firstCol]: `${groupExpressionName}: ${recordVal} (${record.records.length})` },
                level: record.level,
                hidden: !parentExpanded,
                type: ExportRecordType.GroupedRecord,
            };
            this.flatRecords.push(groupExpression);
            if (record.groups.length > 0) {
                this.addGroupedData(grid, record.groups, groupingState, expanded && parentExpanded);
            }
            else {
                const rowRecords = record.records;
                for (const rowRecord of rowRecords) {
                    const currentRecord = {
                        data: rowRecord,
                        level: record.level + 1,
                        hidden: !(expanded && parentExpanded),
                        type: ExportRecordType.DataRecord,
                    };
                    this.flatRecords.push(currentRecord);
                }
            }
        }
    }
    getColumns(columns) {
        const colList = [];
        const colWidthList = [];
        const hiddenColumns = [];
        let indexOfLastPinnedColumn = -1;
        let lastVisibleColumnIndex = -1;
        columns.forEach((column) => {
            var _a;
            const columnHeader = !ExportUtilities.isNullOrWhitespaces(column.header) ? column.header : column.field;
            const exportColumn = !column.hidden || this.options.ignoreColumnsVisibility;
            const index = this.options.ignoreColumnsOrder || this.options.ignoreColumnsVisibility ? column.index : column.visibleIndex;
            const columnWidth = Number((_a = column.width) === null || _a === void 0 ? void 0 : _a.slice(0, -2)) || DEFAULT_COLUMN_WIDTH;
            const columnInfo = {
                header: columnHeader,
                dataType: column.dataType,
                field: column.field,
                skip: !exportColumn,
                formatter: column.formatter,
                skipFormatter: false
            };
            if (index !== -1) {
                colList[index] = columnInfo;
                colWidthList[index] = columnWidth;
                lastVisibleColumnIndex = Math.max(lastVisibleColumnIndex, index);
            }
            else {
                hiddenColumns.push(columnInfo);
            }
            if (column.pinned && exportColumn) {
                indexOfLastPinnedColumn++;
            }
        });
        // Append the hidden columns to the end of the list
        hiddenColumns.forEach((hiddenColumn) => {
            colList[++lastVisibleColumnIndex] = hiddenColumn;
        });
        const result = {
            columns: colList,
            columnWidths: colWidthList,
            indexOfLastPinnedColumn
        };
        return result;
    }
    mapHierarchicalGridColumns(island) {
        const islandColumnList = island.childColumns.toArray();
        const columnList = this.getColumns(islandColumnList);
        this._ownersMap.set(island, columnList);
        if (island.children.length > 0) {
            for (const childIsland of island.children) {
                this.mapHierarchicalGridColumns(childIsland);
            }
        }
    }
    resetDefaults() {
        this._sort = null;
        this.flatRecords = [];
        this.options = {};
        this._ownersMap.clear();
    }
}
//# sourceMappingURL=data:application/json;base64,