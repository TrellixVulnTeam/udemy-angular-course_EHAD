import { ExportRecordType } from '../exporter-common/base-export-service';
import { ExportUtilities } from '../exporter-common/export-utilities';
import { WorksheetDataDictionary } from './worksheet-data-dictionary';
/** @hidden */
export class WorksheetData {
    constructor(_data, options, sort, columnCount, rootKeys, indexOfLastPinnedColumn, columnWidths) {
        this._data = _data;
        this.options = options;
        this.sort = sort;
        this.columnCount = columnCount;
        this.rootKeys = rootKeys;
        this.indexOfLastPinnedColumn = indexOfLastPinnedColumn;
        this.columnWidths = columnWidths;
        this.initializeData();
    }
    get data() {
        return this._data;
    }
    get rowCount() {
        return this._rowCount;
    }
    get isEmpty() {
        return !this.rowCount || !this.columnCount;
    }
    get isSpecialData() {
        return this._isSpecialData;
    }
    get dataDictionary() {
        return this._dataDictionary;
    }
    initializeData() {
        if (!this._data || this._data.length === 0) {
            return;
        }
        if (this._data[0].type === ExportRecordType.HierarchicalGridRecord) {
            this.options.exportAsTable = false;
        }
        this._isSpecialData = ExportUtilities.isSpecialData(this._data[0].data);
        this._rowCount = this._data.length + 1;
        this._dataDictionary = new WorksheetDataDictionary(this.columnCount, this.options.columnWidth, this.columnWidths);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya3NoZWV0LWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvc2VydmljZXMvZXhjZWwvd29ya3NoZWV0LWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFpQixNQUFNLHdDQUF3QyxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUV0RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV0RSxjQUFjO0FBQ2QsTUFBTSxPQUFPLGFBQWE7SUFLdEIsWUFBb0IsS0FBc0IsRUFDdkIsT0FBZ0MsRUFDaEMsSUFBUyxFQUNULFdBQW1CLEVBQ25CLFFBQWtCLEVBQ2xCLHVCQUErQixFQUMvQixZQUFzQjtRQU5yQixVQUFLLEdBQUwsS0FBSyxDQUFpQjtRQUN2QixZQUFPLEdBQVAsT0FBTyxDQUF5QjtRQUNoQyxTQUFJLEdBQUosSUFBSSxDQUFLO1FBQ1QsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFDbkIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQiw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQVE7UUFDL0IsaUJBQVksR0FBWixZQUFZLENBQVU7UUFDakMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFXLElBQUk7UUFDWCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQVcsUUFBUTtRQUNmLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBVyxPQUFPO1FBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQy9DLENBQUM7SUFFRCxJQUFXLGFBQWE7UUFDcEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFXLGNBQWM7UUFDckIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQ2hDLENBQUM7SUFFTyxjQUFjO1FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN4QyxPQUFPO1NBQ1Y7UUFFRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLGdCQUFnQixDQUFDLHNCQUFzQixFQUFFO1lBQ2hFLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztTQUN0QztRQUVELElBQUksQ0FBQyxjQUFjLEdBQUcsZUFBZSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN0SCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHBvcnRSZWNvcmRUeXBlLCBJRXhwb3J0UmVjb3JkIH0gZnJvbSAnLi4vZXhwb3J0ZXItY29tbW9uL2Jhc2UtZXhwb3J0LXNlcnZpY2UnO1xuaW1wb3J0IHsgRXhwb3J0VXRpbGl0aWVzIH0gZnJvbSAnLi4vZXhwb3J0ZXItY29tbW9uL2V4cG9ydC11dGlsaXRpZXMnO1xuaW1wb3J0IHsgSWd4RXhjZWxFeHBvcnRlck9wdGlvbnMgfSBmcm9tICcuL2V4Y2VsLWV4cG9ydGVyLW9wdGlvbnMnO1xuaW1wb3J0IHsgV29ya3NoZWV0RGF0YURpY3Rpb25hcnkgfSBmcm9tICcuL3dvcmtzaGVldC1kYXRhLWRpY3Rpb25hcnknO1xuXG4vKiogQGhpZGRlbiAqL1xuZXhwb3J0IGNsYXNzIFdvcmtzaGVldERhdGEge1xuICAgIHByaXZhdGUgX3Jvd0NvdW50OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfZGF0YURpY3Rpb25hcnk6IFdvcmtzaGVldERhdGFEaWN0aW9uYXJ5O1xuICAgIHByaXZhdGUgX2lzU3BlY2lhbERhdGE6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9kYXRhOiBJRXhwb3J0UmVjb3JkW10sXG4gICAgICAgICAgICAgICAgcHVibGljIG9wdGlvbnM6IElneEV4Y2VsRXhwb3J0ZXJPcHRpb25zLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBzb3J0OiBhbnksXG4gICAgICAgICAgICAgICAgcHVibGljIGNvbHVtbkNvdW50OiBudW1iZXIsXG4gICAgICAgICAgICAgICAgcHVibGljIHJvb3RLZXlzOiBzdHJpbmdbXSxcbiAgICAgICAgICAgICAgICBwdWJsaWMgaW5kZXhPZkxhc3RQaW5uZWRDb2x1bW46IG51bWJlcixcbiAgICAgICAgICAgICAgICBwdWJsaWMgY29sdW1uV2lkdGhzOiBudW1iZXJbXSkge1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplRGF0YSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgZGF0YSgpOiBJRXhwb3J0UmVjb3JkW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHJvd0NvdW50KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yb3dDb3VudDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGlzRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhdGhpcy5yb3dDb3VudCB8fCAhdGhpcy5jb2x1bW5Db3VudDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGlzU3BlY2lhbERhdGEoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1NwZWNpYWxEYXRhO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgZGF0YURpY3Rpb25hcnkoKTogV29ya3NoZWV0RGF0YURpY3Rpb25hcnkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YURpY3Rpb25hcnk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplRGF0YSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhIHx8IHRoaXMuX2RhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fZGF0YVswXS50eXBlID09PSBFeHBvcnRSZWNvcmRUeXBlLkhpZXJhcmNoaWNhbEdyaWRSZWNvcmQpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5leHBvcnRBc1RhYmxlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pc1NwZWNpYWxEYXRhID0gRXhwb3J0VXRpbGl0aWVzLmlzU3BlY2lhbERhdGEodGhpcy5fZGF0YVswXS5kYXRhKTtcbiAgICAgICAgdGhpcy5fcm93Q291bnQgPSB0aGlzLl9kYXRhLmxlbmd0aCArIDE7XG4gICAgICAgIHRoaXMuX2RhdGFEaWN0aW9uYXJ5ID0gbmV3IFdvcmtzaGVldERhdGFEaWN0aW9uYXJ5KHRoaXMuY29sdW1uQ291bnQsIHRoaXMub3B0aW9ucy5jb2x1bW5XaWR0aCwgdGhpcy5jb2x1bW5XaWR0aHMpO1xuICAgIH1cbn1cbiJdfQ==