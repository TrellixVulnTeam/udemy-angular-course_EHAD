import { ContentChildren, Directive, ElementRef, EventEmitter, Inject, Input, LOCALE_ID, Optional, Output } from '@angular/core';
import { merge, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
import { IGX_INPUT_GROUP_TYPE } from '../input-group/public_api';
import { IgxPickerToggleComponent } from './picker-icons.common';
import { PickerInteractionMode } from './types';
export class PickerBaseDirective extends DisplayDensityBase {
    constructor(element, _localeId, _displayDensityOptions, _inputGroupType) {
        super(_displayDensityOptions || { displayDensity: 'comfortable' });
        this.element = element;
        this._localeId = _localeId;
        this._displayDensityOptions = _displayDensityOptions;
        this._inputGroupType = _inputGroupType;
        /**
         * Sets the `placeholder` of the picker's input.
         *
         * @example
         * ```html
         * <igx-date-picker [placeholder]="'Choose your date'"></igx-date-picker>
         * ```
         */
        this.placeholder = '';
        /**
         * Can be `dropdown` with editable input field or `dialog` with readonly input field.
         *
         * @remarks
         * Default mode is `dropdown`
         *
         * @example
         * ```html
         * <igx-date-picker mode="dialog"></igx-date-picker>
         * ```
         */
        this.mode = PickerInteractionMode.DropDown;
        /**
         * Enables or disables the picker.
         *
         * @example
         * ```html
         * <igx-date-picker [disabled]="'true'"></igx-date-picker>
         * ```
         */
        this.disabled = false;
        /**
         * Emitted when the calendar has started opening, cancelable.
         *
         * @example
         * ```html
         * <igx-date-picker (opening)="handleOpening($event)"></igx-date-picker>
         * ```
         */
        this.opening = new EventEmitter();
        /**
         * Emitted after the calendar has opened.
         *
         * @example
         * ```html
         * <igx-date-picker (opened)="handleOpened($event)"></igx-date-picker>
         * ```
         */
        this.opened = new EventEmitter();
        /**
         * Emitted when the calendar has started closing, cancelable.
         *
         * @example
         * ```html
         * <igx-date-picker (closing)="handleClosing($event)"></igx-date-picker>
         * ```
         */
        this.closing = new EventEmitter();
        /**
         * Emitted after the calendar has closed.
         *
         * @example
         * ```html
         * <igx-date-picker (closed)="handleClosed($event)"></igx-date-picker>
         * ```
         */
        this.closed = new EventEmitter();
        this._collapsed = true;
        this._destroy$ = new Subject();
        this.locale = this.locale || this._localeId;
    }
    /**
     * Determines how the picker's input will be styled.
     *
     * @remarks
     * Default is `box`.
     *
     * @example
     * ```html
     * <igx-date-picker [type]="'line'"></igx-date-picker>
     * ```
     */
    set type(val) {
        this._type = val;
    }
    get type() {
        return this._type || this._inputGroupType;
    }
    /**
     * Gets the picker's pop-up state.
     *
     * @example
     * ```typescript
     * const state = this.picker.collapsed;
     * ```
     */
    get collapsed() {
        return this._collapsed;
    }
    /** @hidden @internal */
    get isDropdown() {
        return this.mode === PickerInteractionMode.DropDown;
    }
    /** @hidden @internal */
    ngAfterViewInit() {
        this.subToIconsClicked(this.toggleComponents, () => this.open());
        this.toggleComponents.changes.pipe(takeUntil(this._destroy$))
            .subscribe(() => this.subToIconsClicked(this.toggleComponents, () => this.open()));
    }
    /** @hidden @internal */
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    /** Subscribes to the click events of toggle/clear icons in a query */
    subToIconsClicked(components, next) {
        components.forEach(toggle => {
            toggle.clicked
                .pipe(takeUntil(merge(components.changes, this._destroy$)))
                .subscribe(next);
        });
    }
    ;
}
PickerBaseDirective.decorators = [
    { type: Directive }
];
PickerBaseDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [IGX_INPUT_GROUP_TYPE,] }] }
];
PickerBaseDirective.propDecorators = {
    inputFormat: [{ type: Input }],
    displayFormat: [{ type: Input }],
    placeholder: [{ type: Input }],
    mode: [{ type: Input }],
    overlaySettings: [{ type: Input }],
    disabled: [{ type: Input }],
    locale: [{ type: Input }],
    outlet: [{ type: Input }],
    type: [{ type: Input }],
    tabIndex: [{ type: Input }],
    opening: [{ type: Output }],
    opened: [{ type: Output }],
    closing: [{ type: Output }],
    closed: [{ type: Output }],
    toggleComponents: [{ type: ContentChildren, args: [IgxPickerToggleComponent, { descendants: true },] }]
};
//# sourceMappingURL=data:application/json;base64,