import { CommonModule } from '@angular/common';
import { NgModule, Component, ViewChild, Output, EventEmitter, HostListener, HostBinding } from '@angular/core';
import { IgxCalendarComponent, IgxCalendarModule } from '../../calendar/public_api';
import { PickerInteractionMode } from '../../date-common/types';
import { IgxButtonModule } from '../../directives/button/button.directive';
import { IgxRippleModule } from '../../directives/ripple/ripple.directive';
/** @hidden */
export class IgxCalendarContainerComponent {
    constructor() {
        this.calendarClose = new EventEmitter();
        this.todaySelection = new EventEmitter();
        this.styleClass = 'igx-date-picker';
        this.vertical = false;
        this.mode = PickerInteractionMode.DropDown;
    }
    get dropdownCSS() {
        return this.mode === PickerInteractionMode.DropDown;
    }
    get verticalCSS() {
        return this.vertical && this.mode === PickerInteractionMode.Dialog;
    }
    onEscape(event) {
        event.preventDefault();
        this.calendarClose.emit();
    }
    get isReadonly() {
        return this.mode === PickerInteractionMode.Dialog;
    }
}
IgxCalendarContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-calendar-container',
                template: "<ng-template #defaultPickerActions>\n    <div *ngIf=\"this.closeButtonLabel || this.todayButtonLabel\" class=\"igx-date-picker__buttons\">\n        <button #closeButton *ngIf=\"this.closeButtonLabel\" igxButton=\"flat\" igxRipple\n            (click)=\"this.calendarClose.emit()\">\n            {{ this.closeButtonLabel }}\n        </button>\n        <button #todayButton *ngIf=\"this.todayButtonLabel\" igxButton=\"flat\" igxRipple\n            (click)=\"this.todaySelection.emit()\">\n            {{ this.todayButtonLabel }}\n        </button>\n    </div>\n</ng-template>\n\n<igx-calendar></igx-calendar>\n<ng-container *ngTemplateOutlet=\"this.pickerActions?.template || defaultPickerActions; context: { $implicit: this.calendar }\">\n</ng-container>\n",
                styles: [':host {display: block;}']
            },] }
];
IgxCalendarContainerComponent.propDecorators = {
    calendar: [{ type: ViewChild, args: [IgxCalendarComponent, { static: true },] }],
    calendarClose: [{ type: Output }],
    todaySelection: [{ type: Output }],
    styleClass: [{ type: HostBinding, args: ['class.igx-date-picker',] }],
    dropdownCSS: [{ type: HostBinding, args: ['class.igx-date-picker--dropdown',] }],
    verticalCSS: [{ type: HostBinding, args: ['class.igx-date-picker--vertical',] }],
    onEscape: [{ type: HostListener, args: ['keydown.alt.arrowup', ['$event'],] }]
};
/** @hidden */
export class IgxCalendarContainerModule {
}
IgxCalendarContainerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxCalendarContainerComponent],
                entryComponents: [IgxCalendarContainerComponent],
                imports: [
                    CommonModule,
                    IgxButtonModule,
                    IgxRippleModule,
                    IgxCalendarModule
                ],
                exports: [IgxCalendarContainerComponent]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItY29udGFpbmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9kYXRlLWNvbW1vbi9jYWxlbmRhci1jb250YWluZXIvY2FsZW5kYXItY29udGFpbmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoSCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNwRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDM0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBRzNFLGNBQWM7QUFNZCxNQUFNLE9BQU8sNkJBQTZCO0lBTDFDO1FBVVcsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBR25DLG1CQUFjLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUdwQyxlQUFVLEdBQUcsaUJBQWlCLENBQUM7UUFZL0IsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUdqQixTQUFJLEdBQUcscUJBQXFCLENBQUMsUUFBUSxDQUFDO0lBWWpELENBQUM7SUF6QkcsSUFDVyxXQUFXO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxxQkFBcUIsQ0FBQyxRQUFRLENBQUM7SUFDeEQsQ0FBQztJQUVELElBQ1csV0FBVztRQUNsQixPQUFPLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxxQkFBcUIsQ0FBQyxNQUFNLENBQUM7SUFDdkUsQ0FBQztJQVNNLFFBQVEsQ0FBQyxLQUFLO1FBQ2pCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFXLFVBQVU7UUFDakIsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLHFCQUFxQixDQUFDLE1BQU0sQ0FBQztJQUN0RCxDQUFDOzs7WUExQ0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSx3QkFBd0I7Z0JBRWxDLCt2QkFBZ0Q7eUJBRHZDLHlCQUF5QjthQUVyQzs7O3VCQUVJLFNBQVMsU0FBQyxvQkFBb0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7NEJBR2hELE1BQU07NkJBR04sTUFBTTt5QkFHTixXQUFXLFNBQUMsdUJBQXVCOzBCQUduQyxXQUFXLFNBQUMsaUNBQWlDOzBCQUs3QyxXQUFXLFNBQUMsaUNBQWlDO3VCQVc3QyxZQUFZLFNBQUMscUJBQXFCLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0FBV25ELGNBQWM7QUFZZCxNQUFNLE9BQU8sMEJBQTBCOzs7WUFYdEMsUUFBUSxTQUFDO2dCQUNOLFlBQVksRUFBRSxDQUFDLDZCQUE2QixDQUFDO2dCQUM3QyxlQUFlLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQztnQkFDaEQsT0FBTyxFQUFFO29CQUNMLFlBQVk7b0JBQ1osZUFBZTtvQkFDZixlQUFlO29CQUNmLGlCQUFpQjtpQkFDcEI7Z0JBQ0QsT0FBTyxFQUFFLENBQUMsNkJBQTZCLENBQUM7YUFDM0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUsIENvbXBvbmVudCwgVmlld0NoaWxkLCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyLCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4Q2FsZW5kYXJDb21wb25lbnQsIElneENhbGVuZGFyTW9kdWxlIH0gZnJvbSAnLi4vLi4vY2FsZW5kYXIvcHVibGljX2FwaSc7XG5pbXBvcnQgeyBQaWNrZXJJbnRlcmFjdGlvbk1vZGUgfSBmcm9tICcuLi8uLi9kYXRlLWNvbW1vbi90eXBlcyc7XG5pbXBvcnQgeyBJZ3hCdXR0b25Nb2R1bGUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL2J1dHRvbi9idXR0b24uZGlyZWN0aXZlJztcbmltcG9ydCB7IElneFJpcHBsZU1vZHVsZSB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvcmlwcGxlL3JpcHBsZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSWd4UGlja2VyQWN0aW9uc0RpcmVjdGl2ZSB9IGZyb20gJy4uL3BpY2tlci1pY29ucy5jb21tb24nO1xuXG4vKiogQGhpZGRlbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdpZ3gtY2FsZW5kYXItY29udGFpbmVyJyxcbiAgICBzdHlsZXM6IFsnOmhvc3Qge2Rpc3BsYXk6IGJsb2NrO30nXSxcbiAgICB0ZW1wbGF0ZVVybDogJ2NhbGVuZGFyLWNvbnRhaW5lci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Q2FsZW5kYXJDb250YWluZXJDb21wb25lbnQge1xuICAgIEBWaWV3Q2hpbGQoSWd4Q2FsZW5kYXJDb21wb25lbnQsIHsgc3RhdGljOiB0cnVlIH0pXG4gICAgcHVibGljIGNhbGVuZGFyOiBJZ3hDYWxlbmRhckNvbXBvbmVudDtcblxuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBjYWxlbmRhckNsb3NlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIHRvZGF5U2VsZWN0aW9uID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtZGF0ZS1waWNrZXInKVxuICAgIHB1YmxpYyBzdHlsZUNsYXNzID0gJ2lneC1kYXRlLXBpY2tlcic7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1kYXRlLXBpY2tlci0tZHJvcGRvd24nKVxuICAgIHB1YmxpYyBnZXQgZHJvcGRvd25DU1MoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGUgPT09IFBpY2tlckludGVyYWN0aW9uTW9kZS5Ecm9wRG93bjtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1kYXRlLXBpY2tlci0tdmVydGljYWwnKVxuICAgIHB1YmxpYyBnZXQgdmVydGljYWxDU1MoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlcnRpY2FsICYmIHRoaXMubW9kZSA9PT0gUGlja2VySW50ZXJhY3Rpb25Nb2RlLkRpYWxvZztcbiAgICB9XG5cbiAgICBwdWJsaWMgdmVydGljYWwgPSBmYWxzZTtcbiAgICBwdWJsaWMgY2xvc2VCdXR0b25MYWJlbDogc3RyaW5nO1xuICAgIHB1YmxpYyB0b2RheUJ1dHRvbkxhYmVsOiBzdHJpbmc7XG4gICAgcHVibGljIG1vZGUgPSBQaWNrZXJJbnRlcmFjdGlvbk1vZGUuRHJvcERvd247XG4gICAgcHVibGljIHBpY2tlckFjdGlvbnM6IElneFBpY2tlckFjdGlvbnNEaXJlY3RpdmU7XG5cbiAgICBASG9zdExpc3RlbmVyKCdrZXlkb3duLmFsdC5hcnJvd3VwJywgWyckZXZlbnQnXSlcbiAgICBwdWJsaWMgb25Fc2NhcGUoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5jYWxlbmRhckNsb3NlLmVtaXQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGlzUmVhZG9ubHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGUgPT09IFBpY2tlckludGVyYWN0aW9uTW9kZS5EaWFsb2c7XG4gICAgfVxufVxuXG4vKiogQGhpZGRlbiAqL1xuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtJZ3hDYWxlbmRhckNvbnRhaW5lckNvbXBvbmVudF0sXG4gICAgZW50cnlDb21wb25lbnRzOiBbSWd4Q2FsZW5kYXJDb250YWluZXJDb21wb25lbnRdLFxuICAgIGltcG9ydHM6IFtcbiAgICAgICAgQ29tbW9uTW9kdWxlLFxuICAgICAgICBJZ3hCdXR0b25Nb2R1bGUsXG4gICAgICAgIElneFJpcHBsZU1vZHVsZSxcbiAgICAgICAgSWd4Q2FsZW5kYXJNb2R1bGVcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtJZ3hDYWxlbmRhckNvbnRhaW5lckNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgSWd4Q2FsZW5kYXJDb250YWluZXJNb2R1bGUgeyB9XG4iXX0=