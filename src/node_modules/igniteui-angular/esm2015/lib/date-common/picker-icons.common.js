import { CommonModule } from '@angular/common';
import { Component, Output, EventEmitter, HostListener, NgModule, Directive, TemplateRef } from '@angular/core';
/**
 * Templates the default toggle icon in the picker.
 *
 * @remarks Can be applied to IgxDatePickerComponent, IgxTimePickerComponent, IgxDateRangePickerComponent
 *
 * @example
 * ```html
 * <igx-date-range-picker>
 *   <igx-picker-toggle igxSuffix>
 *      <igx-icon>calendar_view_day</igx-icon>
 *   </igx-picker-toggle>
 * </igx-date-range-picker>
 * ```
 */
export class IgxPickerToggleComponent {
    constructor() {
        this.clicked = new EventEmitter();
    }
    onClick(event) {
        // do not focus input on click
        event.stopPropagation();
        this.clicked.emit();
    }
}
IgxPickerToggleComponent.decorators = [
    { type: Component, args: [{
                template: `<ng-content></ng-content>`,
                selector: 'igx-picker-toggle'
            },] }
];
IgxPickerToggleComponent.propDecorators = {
    clicked: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/**
 * Templates the default clear icon in the picker.
 *
 * @remarks Can be applied to IgxDatePickerComponent, IgxTimePickerComponent, IgxDateRangePickerComponent
 *
 * @example
 * ```html
 * <igx-date-picker>
 *   <igx-picker-clear igxSuffix>
 *      <igx-icon>delete</igx-icon>
 *   </igx-picker-clear>
 * </igx-date-picker>
 * ```
 */
export class IgxPickerClearComponent extends IgxPickerToggleComponent {
}
IgxPickerClearComponent.decorators = [
    { type: Component, args: [{
                template: `<ng-content></ng-content>`,
                selector: 'igx-picker-clear'
            },] }
];
/**
 * IgxPickerActionsDirective can be used to re-template the dropdown/dialog action buttons.
 *
 * @remarks Can be applied to IgxDatePickerComponent, IgxTimePickerComponent, IgxDateRangePickerComponent
 *
 */
export class IgxPickerActionsDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxPickerActionsDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxPickerActions]'
            },] }
];
IgxPickerActionsDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/** @hidden */
export class IgxPickersCommonModule {
}
IgxPickersCommonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    IgxPickerToggleComponent,
                    IgxPickerClearComponent,
                    IgxPickerActionsDirective
                ],
                imports: [CommonModule],
                exports: [
                    IgxPickerToggleComponent,
                    IgxPickerClearComponent,
                    IgxPickerActionsDirective
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyLWljb25zLmNvbW1vbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9kYXRlLWNvbW1vbi9waWNrZXItaWNvbnMuY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWhIOzs7Ozs7Ozs7Ozs7O0dBYUc7QUFLSCxNQUFNLE9BQU8sd0JBQXdCO0lBSnJDO1FBTVcsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFReEMsQ0FBQztJQUxVLE9BQU8sQ0FBQyxLQUFpQjtRQUM1Qiw4QkFBOEI7UUFDOUIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7O1lBYkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLFFBQVEsRUFBRSxtQkFBbUI7YUFDaEM7OztzQkFFSSxNQUFNO3NCQUdOLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0FBUXJDOzs7Ozs7Ozs7Ozs7O0dBYUc7QUFLSCxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsd0JBQXdCOzs7WUFKcEUsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLFFBQVEsRUFBRSxrQkFBa0I7YUFDL0I7O0FBR0Q7Ozs7O0dBS0c7QUFJSCxNQUFNLE9BQU8seUJBQXlCO0lBQ2xDLFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQzs7O1lBSnJELFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsb0JBQW9CO2FBQ2pDOzs7WUE1RDRFLFdBQVc7O0FBa0V4RixjQUFjO0FBY2QsTUFBTSxPQUFPLHNCQUFzQjs7O1lBYmxDLFFBQVEsU0FBQztnQkFDTixZQUFZLEVBQUU7b0JBQ1Ysd0JBQXdCO29CQUN4Qix1QkFBdUI7b0JBQ3ZCLHlCQUF5QjtpQkFDNUI7Z0JBQ0QsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO2dCQUN2QixPQUFPLEVBQUU7b0JBQ0wsd0JBQXdCO29CQUN4Qix1QkFBdUI7b0JBQ3ZCLHlCQUF5QjtpQkFDNUI7YUFDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBDb21wb25lbnQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIsIE5nTW9kdWxlLCBEaXJlY3RpdmUsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogVGVtcGxhdGVzIHRoZSBkZWZhdWx0IHRvZ2dsZSBpY29uIGluIHRoZSBwaWNrZXIuXG4gKlxuICogQHJlbWFya3MgQ2FuIGJlIGFwcGxpZWQgdG8gSWd4RGF0ZVBpY2tlckNvbXBvbmVudCwgSWd4VGltZVBpY2tlckNvbXBvbmVudCwgSWd4RGF0ZVJhbmdlUGlja2VyQ29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqIDxpZ3gtZGF0ZS1yYW5nZS1waWNrZXI+XG4gKiAgIDxpZ3gtcGlja2VyLXRvZ2dsZSBpZ3hTdWZmaXg+XG4gKiAgICAgIDxpZ3gtaWNvbj5jYWxlbmRhcl92aWV3X2RheTwvaWd4LWljb24+XG4gKiAgIDwvaWd4LXBpY2tlci10b2dnbGU+XG4gKiA8L2lneC1kYXRlLXJhbmdlLXBpY2tlcj5cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcbiAgICB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxuICAgIHNlbGVjdG9yOiAnaWd4LXBpY2tlci10b2dnbGUnXG59KVxuZXhwb3J0IGNsYXNzIElneFBpY2tlclRvZ2dsZUNvbXBvbmVudCB7XG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIGNsaWNrZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXG4gICAgcHVibGljIG9uQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgLy8gZG8gbm90IGZvY3VzIGlucHV0IG9uIGNsaWNrXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLmNsaWNrZWQuZW1pdCgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUZW1wbGF0ZXMgdGhlIGRlZmF1bHQgY2xlYXIgaWNvbiBpbiB0aGUgcGlja2VyLlxuICpcbiAqIEByZW1hcmtzIENhbiBiZSBhcHBsaWVkIHRvIElneERhdGVQaWNrZXJDb21wb25lbnQsIElneFRpbWVQaWNrZXJDb21wb25lbnQsIElneERhdGVSYW5nZVBpY2tlckNvbXBvbmVudFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBodG1sXG4gKiA8aWd4LWRhdGUtcGlja2VyPlxuICogICA8aWd4LXBpY2tlci1jbGVhciBpZ3hTdWZmaXg+XG4gKiAgICAgIDxpZ3gtaWNvbj5kZWxldGU8L2lneC1pY29uPlxuICogICA8L2lneC1waWNrZXItY2xlYXI+XG4gKiA8L2lneC1kYXRlLXBpY2tlcj5cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcbiAgICB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxuICAgIHNlbGVjdG9yOiAnaWd4LXBpY2tlci1jbGVhcidcbn0pXG5leHBvcnQgY2xhc3MgSWd4UGlja2VyQ2xlYXJDb21wb25lbnQgZXh0ZW5kcyBJZ3hQaWNrZXJUb2dnbGVDb21wb25lbnQgeyB9XG5cbi8qKlxuICogSWd4UGlja2VyQWN0aW9uc0RpcmVjdGl2ZSBjYW4gYmUgdXNlZCB0byByZS10ZW1wbGF0ZSB0aGUgZHJvcGRvd24vZGlhbG9nIGFjdGlvbiBidXR0b25zLlxuICpcbiAqIEByZW1hcmtzIENhbiBiZSBhcHBsaWVkIHRvIElneERhdGVQaWNrZXJDb21wb25lbnQsIElneFRpbWVQaWNrZXJDb21wb25lbnQsIElneERhdGVSYW5nZVBpY2tlckNvbXBvbmVudFxuICpcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4UGlja2VyQWN0aW9uc10nXG59KVxuZXhwb3J0IGNsYXNzIElneFBpY2tlckFjdGlvbnNEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG5cblxuLyoqIEBoaWRkZW4gKi9cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgIElneFBpY2tlclRvZ2dsZUNvbXBvbmVudCxcbiAgICAgICAgSWd4UGlja2VyQ2xlYXJDb21wb25lbnQsXG4gICAgICAgIElneFBpY2tlckFjdGlvbnNEaXJlY3RpdmVcbiAgICBdLFxuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgSWd4UGlja2VyVG9nZ2xlQ29tcG9uZW50LFxuICAgICAgICBJZ3hQaWNrZXJDbGVhckNvbXBvbmVudCxcbiAgICAgICAgSWd4UGlja2VyQWN0aW9uc0RpcmVjdGl2ZVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgSWd4UGlja2Vyc0NvbW1vbk1vZHVsZSB7IH1cbiJdfQ==