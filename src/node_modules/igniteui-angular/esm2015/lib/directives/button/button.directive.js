import { Directive, ElementRef, EventEmitter, HostBinding, Input, Output, NgModule, Renderer2, HostListener, Optional, Inject } from '@angular/core';
import { DisplayDensityBase, DisplayDensityToken, DisplayDensity } from '../../core/density';
import { mkenum } from '../../core/utils';
const IgxButtonType = mkenum({
    Flat: 'flat',
    Raised: 'raised',
    Outlined: 'outlined',
    Icon: 'icon',
    FAB: 'fab'
});
/**
 * The Button directive provides the Ignite UI Button functionality to every component that's intended to be used as a button.
 *
 * @igxModule IgxButtonModule
 *
 * @igxParent Data Entry & Display
 *
 * @igxTheme igx-button-theme
 *
 * @igxKeywords button, span, div, click
 *
 * @remarks
 * The Ignite UI Button directive is intended to be used by any button, span or div and turn it into a fully functional button.
 *
 * @example
 * ```html
 * <button igxButton="outlined">A Button</button>
 * ```
 */
export class IgxButtonDirective extends DisplayDensityBase {
    constructor(element, _renderer, _displayDensityOptions) {
        super(_displayDensityOptions);
        this.element = element;
        this._renderer = _renderer;
        this._displayDensityOptions = _displayDensityOptions;
        /**
         * Called when the button is clicked.
         */
        this.buttonClick = new EventEmitter();
        /**
         * Called when the button is selected.
         */
        this.buttonSelected = new EventEmitter();
        /**
         * Sets/gets the `role` attribute.
         *
         * @example
         * ```typescript
         * this.button.role = 'navbutton';
         * let buttonRole = this.button.role;
         * ```
         */
        this.role = 'button';
        /**
         * @hidden
         * @internal
         */
        this._cssClass = 'igx-button';
        /**
         * @hidden
         * @internal
         */
        this._disabled = false;
        /**
         * @hidden
         * @internal
         */
        this._selected = false;
    }
    /**
     * Gets or sets whether the button is selected.
     * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.
     *
     * @example
     * ```html
     * <button igxButton="flat" [selected]="button.selected"></button>
     * ```
     */
    set selected(value) {
        if (this._selected !== value) {
            if (!this._selected) {
                this.buttonSelected.emit({
                    button: this
                });
            }
            this._selected = value;
        }
    }
    get selected() {
        return this._selected;
    }
    /**
     * @hidden
     * @internal
     */
    onClick(ev) {
        this.buttonClick.emit(ev);
    }
    /**
     * Returns the underlying DOM element.
     */
    get nativeElement() {
        return this.element.nativeElement;
    }
    /**
     * Sets the type of the button.
     *
     * @example
     * ```html
     * <button igxButton="icon"></button>
     * ```
     */
    set type(type) {
        const t = type ? type : IgxButtonType.Flat;
        if (this._type !== t) {
            this._type = t;
        }
    }
    /**
     * Sets the button text color.
     *
     * @example
     * ```html
     * <button igxButton igxButtonColor="orange"></button>
     * ```
     */
    set color(value) {
        this._color = value || this.nativeElement.style.color;
        this._renderer.setStyle(this.nativeElement, 'color', this._color);
    }
    /**
     * Sets the background color of the button.
     *
     * @example
     *  ```html
     * <button igxButton igxButtonBackground="red"></button>
     * ```
     */
    set background(value) {
        this._backgroundColor = value || this._backgroundColor;
        this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);
    }
    /**
     * Sets the `aria-label` attribute.
     *
     * @example
     *  ```html
     * <button igxButton="flat" igxLabel="Label"></button>
     * ```
     */
    set label(value) {
        this._label = value || this._label;
        this._renderer.setAttribute(this.nativeElement, 'aria-label', this._label);
    }
    /**
     * Get the disabled state of the button;
     *
     * @example
     * ```typescript
     * const disabled = this.button.disabled;
     * ```
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * Enables/disables the button.
     *
     * @example
     * ```html
     * <button igxButton= "fab" [disabled]="true"></button>
     * ```
     */
    set disabled(val) {
        this._disabled = !!val;
    }
    /**
     * @hidden
     * @internal
     */
    get flat() {
        return this._type === IgxButtonType.Flat;
    }
    /**
     * @hidden
     * @internal
     */
    get raised() {
        return this._type === IgxButtonType.Raised;
    }
    /**
     * @hidden
     * @internal
     */
    get outlined() {
        return this._type === IgxButtonType.Outlined;
    }
    /**
     * @hidden
     * @internal
     */
    get icon() {
        return this._type === IgxButtonType.Icon;
    }
    /**
     * @hidden
     * @internal
     */
    get fab() {
        return this._type === IgxButtonType.FAB;
    }
    /**
     * @hidden
     * @internal
     */
    get cosy() {
        return this.displayDensity === DisplayDensity.cosy;
    }
    /**
     * @hidden
     * @internal
     */
    get compact() {
        return this.displayDensity === DisplayDensity.compact;
    }
    /**
     * @hidden
     * @internal
     */
    get disabledAttribute() {
        return this._disabled ? this._disabled : null;
    }
    /**
     * @hidden
     * @internal
     */
    select() {
        this.selected = true;
    }
    /**
     * @hidden
     * @internal
     */
    deselect() {
        this._selected = false;
    }
}
IgxButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxButton]'
            },] }
];
IgxButtonDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
IgxButtonDirective.propDecorators = {
    buttonClick: [{ type: Output }],
    buttonSelected: [{ type: Output }],
    role: [{ type: HostBinding, args: ['attr.role',] }],
    _cssClass: [{ type: HostBinding, args: ['class.igx-button',] }],
    selected: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    type: [{ type: Input, args: ['igxButton',] }],
    color: [{ type: Input, args: ['igxButtonColor',] }],
    background: [{ type: Input, args: ['igxButtonBackground',] }],
    label: [{ type: Input, args: ['igxLabel',] }],
    disabled: [{ type: Input }, { type: HostBinding, args: ['class.igx-button--disabled',] }],
    flat: [{ type: HostBinding, args: ['class.igx-button--flat',] }],
    raised: [{ type: HostBinding, args: ['class.igx-button--raised',] }],
    outlined: [{ type: HostBinding, args: ['class.igx-button--outlined',] }],
    icon: [{ type: HostBinding, args: ['class.igx-button--icon',] }],
    fab: [{ type: HostBinding, args: ['class.igx-button--fab',] }],
    cosy: [{ type: HostBinding, args: ['class.igx-button--cosy',] }],
    compact: [{ type: HostBinding, args: ['class.igx-button--compact',] }],
    disabledAttribute: [{ type: HostBinding, args: ['attr.disabled',] }]
};
/**
 *
 * @hidden
 */
export class IgxButtonModule {
}
IgxButtonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxButtonDirective],
                exports: [IgxButtonDirective]
            },] }
];
//# sourceMappingURL=data:application/json;base64,