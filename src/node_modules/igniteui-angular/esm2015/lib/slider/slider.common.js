import { Directive } from '@angular/core';
import { mkenum } from '../core/utils';
/**
 * Template directive that allows you to set a custom template representing the lower label value of the {@link IgxSliderComponent}
 *
 * ```html
 * <igx-slider>
 *  <ng-template igxSliderThumbFrom let-value let-labels>{{value}}</ng-template>
 * </igx-slider>
 * ```
 *
 * @context {@link IgxSliderComponent.context}
 */
export class IgxThumbFromTemplateDirective {
}
IgxThumbFromTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxSliderThumbFrom]'
            },] }
];
/**
 * Template directive that allows you to set a custom template representing the upper label value of the {@link IgxSliderComponent}
 *
 * ```html
 * <igx-slider>
 *  <ng-template igxSliderThumbTo let-value let-labels>{{value}}</ng-template>
 * </igx-slider>
 * ```
 *
 * @context {@link IgxSliderComponent.context}
 */
export class IgxThumbToTemplateDirective {
}
IgxThumbToTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxSliderThumbTo]'
            },] }
];
/**
 * Template directive that allows you to set a custom template, represeting primary/secondary tick labels of the {@link IgxSliderComponent}
 *
 * @context {@link IgxTicksComponent.context}
 */
export class IgxTickLabelTemplateDirective {
}
IgxTickLabelTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxSliderTickLabel]'
            },] }
];
export const IgxSliderType = mkenum({
    /**
     * Slider with single thumb.
     */
    SLIDER: 'slider',
    /**
     *  Range slider with multiple thumbs, that can mark the range.
     */
    RANGE: 'range'
});
export const SliderHandle = mkenum({
    FROM: 'from',
    TO: 'to'
});
/**
 * Slider Tick labels Orientation
 */
export const TickLabelsOrientation = mkenum({
    Horizontal: 'horizontal',
    TopToBottom: 'toptobottom',
    BottomToTop: 'bottomtotop'
});
/**
 * Slider Ticks orientation
 */
export const TicksOrientation = mkenum({
    Top: 'top',
    Bottom: 'bottom',
    Mirror: 'mirror'
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLmNvbW1vbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9zbGlkZXIvc2xpZGVyLmNvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkM7Ozs7Ozs7Ozs7R0FVRztBQUlILE1BQU0sT0FBTyw2QkFBNkI7OztZQUh6QyxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHNCQUFzQjthQUNuQzs7QUFHRDs7Ozs7Ozs7OztHQVVHO0FBSUgsTUFBTSxPQUFPLDJCQUEyQjs7O1lBSHZDLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsb0JBQW9CO2FBQ2pDOztBQUdEOzs7O0dBSUc7QUFJSCxNQUFNLE9BQU8sNkJBQTZCOzs7WUFIekMsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxzQkFBc0I7YUFDbkM7O0FBYUQsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQztJQUNoQzs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0lBQ2hCOztPQUVHO0lBQ0gsS0FBSyxFQUFFLE9BQU87Q0FDakIsQ0FBQyxDQUFDO0FBR0gsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQztJQUMvQixJQUFJLEVBQUUsTUFBTTtJQUNaLEVBQUUsRUFBRSxJQUFJO0NBQ1gsQ0FBQyxDQUFDO0FBR0g7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxNQUFNLENBQUM7SUFDeEMsVUFBVSxFQUFFLFlBQVk7SUFDeEIsV0FBVyxFQUFFLGFBQWE7SUFDMUIsV0FBVyxFQUFFLGFBQWE7Q0FDN0IsQ0FBQyxDQUFDO0FBR0g7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUM7SUFDbkMsR0FBRyxFQUFFLEtBQUs7SUFDVixNQUFNLEVBQUUsUUFBUTtJQUNoQixNQUFNLEVBQUUsUUFBUTtDQUNuQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG1rZW51bSB9IGZyb20gJy4uL2NvcmUvdXRpbHMnO1xuXG4vKipcbiAqIFRlbXBsYXRlIGRpcmVjdGl2ZSB0aGF0IGFsbG93cyB5b3UgdG8gc2V0IGEgY3VzdG9tIHRlbXBsYXRlIHJlcHJlc2VudGluZyB0aGUgbG93ZXIgbGFiZWwgdmFsdWUgb2YgdGhlIHtAbGluayBJZ3hTbGlkZXJDb21wb25lbnR9XG4gKlxuICogYGBgaHRtbFxuICogPGlneC1zbGlkZXI+XG4gKiAgPG5nLXRlbXBsYXRlIGlneFNsaWRlclRodW1iRnJvbSBsZXQtdmFsdWUgbGV0LWxhYmVscz57e3ZhbHVlfX08L25nLXRlbXBsYXRlPlxuICogPC9pZ3gtc2xpZGVyPlxuICogYGBgXG4gKlxuICogQGNvbnRleHQge0BsaW5rIElneFNsaWRlckNvbXBvbmVudC5jb250ZXh0fVxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hTbGlkZXJUaHVtYkZyb21dJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hUaHVtYkZyb21UZW1wbGF0ZURpcmVjdGl2ZSB7fVxuXG4vKipcbiAqIFRlbXBsYXRlIGRpcmVjdGl2ZSB0aGF0IGFsbG93cyB5b3UgdG8gc2V0IGEgY3VzdG9tIHRlbXBsYXRlIHJlcHJlc2VudGluZyB0aGUgdXBwZXIgbGFiZWwgdmFsdWUgb2YgdGhlIHtAbGluayBJZ3hTbGlkZXJDb21wb25lbnR9XG4gKlxuICogYGBgaHRtbFxuICogPGlneC1zbGlkZXI+XG4gKiAgPG5nLXRlbXBsYXRlIGlneFNsaWRlclRodW1iVG8gbGV0LXZhbHVlIGxldC1sYWJlbHM+e3t2YWx1ZX19PC9uZy10ZW1wbGF0ZT5cbiAqIDwvaWd4LXNsaWRlcj5cbiAqIGBgYFxuICpcbiAqIEBjb250ZXh0IHtAbGluayBJZ3hTbGlkZXJDb21wb25lbnQuY29udGV4dH1cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4U2xpZGVyVGh1bWJUb10nXG59KVxuZXhwb3J0IGNsYXNzIElneFRodW1iVG9UZW1wbGF0ZURpcmVjdGl2ZSB7fVxuXG4vKipcbiAqIFRlbXBsYXRlIGRpcmVjdGl2ZSB0aGF0IGFsbG93cyB5b3UgdG8gc2V0IGEgY3VzdG9tIHRlbXBsYXRlLCByZXByZXNldGluZyBwcmltYXJ5L3NlY29uZGFyeSB0aWNrIGxhYmVscyBvZiB0aGUge0BsaW5rIElneFNsaWRlckNvbXBvbmVudH1cbiAqXG4gKiBAY29udGV4dCB7QGxpbmsgSWd4VGlja3NDb21wb25lbnQuY29udGV4dH1cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4U2xpZGVyVGlja0xhYmVsXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4VGlja0xhYmVsVGVtcGxhdGVEaXJlY3RpdmUge31cblxuZXhwb3J0IGludGVyZmFjZSBJUmFuZ2VTbGlkZXJWYWx1ZSB7XG4gICAgbG93ZXI6IG51bWJlcjtcbiAgICB1cHBlcjogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTbGlkZXJWYWx1ZUNoYW5nZUV2ZW50QXJncyB7XG4gICAgb2xkVmFsdWU6IG51bWJlciB8IElSYW5nZVNsaWRlclZhbHVlO1xuICAgIHZhbHVlOiBudW1iZXIgfCBJUmFuZ2VTbGlkZXJWYWx1ZTtcbn1cblxuZXhwb3J0IGNvbnN0IElneFNsaWRlclR5cGUgPSBta2VudW0oe1xuICAgIC8qKlxuICAgICAqIFNsaWRlciB3aXRoIHNpbmdsZSB0aHVtYi5cbiAgICAgKi9cbiAgICBTTElERVI6ICdzbGlkZXInLFxuICAgIC8qKlxuICAgICAqICBSYW5nZSBzbGlkZXIgd2l0aCBtdWx0aXBsZSB0aHVtYnMsIHRoYXQgY2FuIG1hcmsgdGhlIHJhbmdlLlxuICAgICAqL1xuICAgIFJBTkdFOiAncmFuZ2UnXG59KTtcbmV4cG9ydCB0eXBlIElneFNsaWRlclR5cGUgPSAodHlwZW9mIElneFNsaWRlclR5cGUpW2tleW9mIHR5cGVvZiBJZ3hTbGlkZXJUeXBlXTtcblxuZXhwb3J0IGNvbnN0IFNsaWRlckhhbmRsZSA9IG1rZW51bSh7XG4gICAgRlJPTTogJ2Zyb20nLFxuICAgIFRPOiAndG8nXG59KTtcbmV4cG9ydCB0eXBlIFNsaWRlckhhbmRsZSA9ICh0eXBlb2YgU2xpZGVySGFuZGxlKVtrZXlvZiB0eXBlb2YgU2xpZGVySGFuZGxlXTtcblxuLyoqXG4gKiBTbGlkZXIgVGljayBsYWJlbHMgT3JpZW50YXRpb25cbiAqL1xuZXhwb3J0IGNvbnN0IFRpY2tMYWJlbHNPcmllbnRhdGlvbiA9IG1rZW51bSh7XG4gICAgSG9yaXpvbnRhbDogJ2hvcml6b250YWwnLFxuICAgIFRvcFRvQm90dG9tOiAndG9wdG9ib3R0b20nLFxuICAgIEJvdHRvbVRvVG9wOiAnYm90dG9tdG90b3AnXG59KTtcbmV4cG9ydCB0eXBlIFRpY2tMYWJlbHNPcmllbnRhdGlvbiA9ICh0eXBlb2YgVGlja0xhYmVsc09yaWVudGF0aW9uKVtrZXlvZiB0eXBlb2YgVGlja0xhYmVsc09yaWVudGF0aW9uXTtcblxuLyoqXG4gKiBTbGlkZXIgVGlja3Mgb3JpZW50YXRpb25cbiAqL1xuZXhwb3J0IGNvbnN0IFRpY2tzT3JpZW50YXRpb24gPSBta2VudW0oe1xuICAgIFRvcDogJ3RvcCcsXG4gICAgQm90dG9tOiAnYm90dG9tJyxcbiAgICBNaXJyb3I6ICdtaXJyb3InXG59KTtcbmV4cG9ydCB0eXBlIFRpY2tzT3JpZW50YXRpb24gPSAodHlwZW9mIFRpY2tzT3JpZW50YXRpb24pW2tleW9mIHR5cGVvZiBUaWNrc09yaWVudGF0aW9uXTtcbiJdfQ==