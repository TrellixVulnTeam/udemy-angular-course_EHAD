import { DatePickerResourceStringsEN } from './date-picker-resources';
import { DateRangePickerResourceStringsEN } from './date-range-picker-resources';
import { GridResourceStringsEN } from './grid-resources';
import { TimePickerResourceStringsEN } from './time-picker-resources';
import { PaginatorResourceStringsEN } from './paginator-resources';
import { cloneValue } from '../utils';
import { CarouselResourceStringsEN } from './carousel-resources';
import { ChipResourceStringsEN } from './chip-resources';
import { ListResourceStringsEN } from './list-resources';
import { CalendarResourceStringsEN } from './calendar-resources';
import { InputResourceStringsEN } from './input-resources';
import { TreeResourceStringsEN } from './tree-resources';
/**
 * @hidden
 */
export const CurrentResourceStrings = {
    GridResStrings: cloneValue(GridResourceStringsEN),
    PaginatorResStrings: cloneValue(PaginatorResourceStringsEN),
    TimePickerResStrings: cloneValue(TimePickerResourceStringsEN),
    CalendarResStrings: cloneValue(CalendarResourceStringsEN),
    ChipResStrings: cloneValue(ChipResourceStringsEN),
    DatePickerResourceStrings: cloneValue(DatePickerResourceStringsEN),
    DateRangePickerResStrings: cloneValue(DateRangePickerResourceStringsEN),
    CarouselResStrings: cloneValue(CarouselResourceStringsEN),
    ListResStrings: cloneValue(ListResourceStringsEN),
    InputResStrings: cloneValue(InputResourceStringsEN),
    TreeResStrings: cloneValue(TreeResourceStringsEN),
};
const updateResourceStrings = (currentStrings, newStrings) => {
    for (const key of Object.keys(newStrings)) {
        if (key in currentStrings) {
            currentStrings[key] = newStrings[key];
        }
    }
};
const ɵ0 = updateResourceStrings;
/**
 * Changes the resource strings for all components in the application
 * ```
 * @param resourceStrings to be applied
 */
export const changei18n = (resourceStrings) => {
    for (const key of Object.keys(CurrentResourceStrings)) {
        updateResourceStrings(CurrentResourceStrings[key], resourceStrings);
    }
};
/**
 * Returns current resource strings for all components
 */
export const getCurrentResourceStrings = () => (Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, CurrentResourceStrings.CalendarResStrings), CurrentResourceStrings.CarouselResStrings), CurrentResourceStrings.ChipResStrings), CurrentResourceStrings.DatePickerResourceStrings), CurrentResourceStrings.DateRangePickerResStrings), CurrentResourceStrings.GridResStrings), CurrentResourceStrings.InputResStrings), CurrentResourceStrings.ListResStrings), CurrentResourceStrings.PaginatorResStrings), CurrentResourceStrings.TimePickerResStrings), CurrentResourceStrings.TreeResStrings));
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2NvcmUvaTE4bi9yZXNvdXJjZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLDJCQUEyQixFQUE4QixNQUFNLHlCQUF5QixDQUFDO0FBQ2xHLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBbUMsTUFBTSwrQkFBK0IsQ0FBQztBQUNsSCxPQUFPLEVBQXdCLHFCQUFxQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDL0UsT0FBTyxFQUE4QiwyQkFBMkIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2xHLE9BQU8sRUFBNkIsMEJBQTBCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM5RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBNEIseUJBQXlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMzRixPQUFPLEVBQXdCLHFCQUFxQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDL0UsT0FBTyxFQUF3QixxQkFBcUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQy9FLE9BQU8sRUFBRSx5QkFBeUIsRUFBNEIsTUFBTSxzQkFBc0IsQ0FBQztBQUMzRixPQUFPLEVBQXlCLHNCQUFzQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEYsT0FBTyxFQUF3QixxQkFBcUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBTS9FOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUc7SUFDbEMsY0FBYyxFQUFFLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQztJQUNqRCxtQkFBbUIsRUFBRSxVQUFVLENBQUMsMEJBQTBCLENBQUM7SUFDM0Qsb0JBQW9CLEVBQUUsVUFBVSxDQUFDLDJCQUEyQixDQUFDO0lBQzdELGtCQUFrQixFQUFFLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQztJQUN6RCxjQUFjLEVBQUUsVUFBVSxDQUFDLHFCQUFxQixDQUFDO0lBQ2pELHlCQUF5QixFQUFFLFVBQVUsQ0FBQywyQkFBMkIsQ0FBQztJQUNsRSx5QkFBeUIsRUFBRSxVQUFVLENBQUMsZ0NBQWdDLENBQUM7SUFDdkUsa0JBQWtCLEVBQUUsVUFBVSxDQUFDLHlCQUF5QixDQUFDO0lBQ3pELGNBQWMsRUFBRSxVQUFVLENBQUMscUJBQXFCLENBQUM7SUFDakQsZUFBZSxFQUFFLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQztJQUNuRCxjQUFjLEVBQUUsVUFBVSxDQUFDLHFCQUFxQixDQUFDO0NBQ3BELENBQUM7QUFFRixNQUFNLHFCQUFxQixHQUFHLENBQUMsY0FBZ0MsRUFBRSxVQUE0QixFQUFFLEVBQUU7SUFDN0YsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ3ZDLElBQUksR0FBRyxJQUFJLGNBQWMsRUFBRTtZQUN2QixjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3pDO0tBQ0o7QUFDTCxDQUFDLENBQUM7O0FBRUY7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLGVBQWlDLEVBQUUsRUFBRTtJQUM1RCxLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsRUFBRTtRQUNuRCxxQkFBcUIsQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQztLQUN2RTtBQUNMLENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsR0FBcUIsRUFBRSxDQUFDLCtKQUMxRCxzQkFBc0IsQ0FBQyxrQkFBa0IsR0FDekMsc0JBQXNCLENBQUMsa0JBQWtCLEdBQ3pDLHNCQUFzQixDQUFDLGNBQWMsR0FDckMsc0JBQXNCLENBQUMseUJBQXlCLEdBQ2hELHNCQUFzQixDQUFDLHlCQUF5QixHQUNoRCxzQkFBc0IsQ0FBQyxjQUFjLEdBQ3JDLHNCQUFzQixDQUFDLGVBQWUsR0FDdEMsc0JBQXNCLENBQUMsY0FBYyxHQUNyQyxzQkFBc0IsQ0FBQyxtQkFBbUIsR0FDMUMsc0JBQXNCLENBQUMsb0JBQW9CLEdBQzNDLHNCQUFzQixDQUFDLGNBQWMsRUFDMUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGVQaWNrZXJSZXNvdXJjZVN0cmluZ3NFTiwgSURhdGVQaWNrZXJSZXNvdXJjZVN0cmluZ3MgfSBmcm9tICcuL2RhdGUtcGlja2VyLXJlc291cmNlcyc7XG5pbXBvcnQgeyBEYXRlUmFuZ2VQaWNrZXJSZXNvdXJjZVN0cmluZ3NFTiwgSURhdGVSYW5nZVBpY2tlclJlc291cmNlU3RyaW5ncyB9IGZyb20gJy4vZGF0ZS1yYW5nZS1waWNrZXItcmVzb3VyY2VzJztcbmltcG9ydCB7IElHcmlkUmVzb3VyY2VTdHJpbmdzLCBHcmlkUmVzb3VyY2VTdHJpbmdzRU4gfSBmcm9tICcuL2dyaWQtcmVzb3VyY2VzJztcbmltcG9ydCB7IElUaW1lUGlja2VyUmVzb3VyY2VTdHJpbmdzLCBUaW1lUGlja2VyUmVzb3VyY2VTdHJpbmdzRU4gfSBmcm9tICcuL3RpbWUtcGlja2VyLXJlc291cmNlcyc7XG5pbXBvcnQgeyBJUGFnaW5hdG9yUmVzb3VyY2VTdHJpbmdzLCBQYWdpbmF0b3JSZXNvdXJjZVN0cmluZ3NFTiB9IGZyb20gJy4vcGFnaW5hdG9yLXJlc291cmNlcyc7XG5pbXBvcnQgeyBjbG9uZVZhbHVlIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgSUNhcm91c2VsUmVzb3VyY2VTdHJpbmdzLCBDYXJvdXNlbFJlc291cmNlU3RyaW5nc0VOIH0gZnJvbSAnLi9jYXJvdXNlbC1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgSUNoaXBSZXNvdXJjZVN0cmluZ3MsIENoaXBSZXNvdXJjZVN0cmluZ3NFTiB9IGZyb20gJy4vY2hpcC1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgSUxpc3RSZXNvdXJjZVN0cmluZ3MsIExpc3RSZXNvdXJjZVN0cmluZ3NFTiB9IGZyb20gJy4vbGlzdC1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgQ2FsZW5kYXJSZXNvdXJjZVN0cmluZ3NFTiwgSUNhbGVuZGFyUmVzb3VyY2VTdHJpbmdzIH0gZnJvbSAnLi9jYWxlbmRhci1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgSUlucHV0UmVzb3VyY2VTdHJpbmdzLCBJbnB1dFJlc291cmNlU3RyaW5nc0VOIH0gZnJvbSAnLi9pbnB1dC1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgSVRyZWVSZXNvdXJjZVN0cmluZ3MsIFRyZWVSZXNvdXJjZVN0cmluZ3NFTiB9IGZyb20gJy4vdHJlZS1yZXNvdXJjZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElSZXNvdXJjZVN0cmluZ3MgZXh0ZW5kcyBJR3JpZFJlc291cmNlU3RyaW5ncywgSVRpbWVQaWNrZXJSZXNvdXJjZVN0cmluZ3MsIElDYWxlbmRhclJlc291cmNlU3RyaW5ncyxcbiAgICBJQ2Fyb3VzZWxSZXNvdXJjZVN0cmluZ3MsIElDaGlwUmVzb3VyY2VTdHJpbmdzLCBJSW5wdXRSZXNvdXJjZVN0cmluZ3MsIElEYXRlUGlja2VyUmVzb3VyY2VTdHJpbmdzLCBJRGF0ZVJhbmdlUGlja2VyUmVzb3VyY2VTdHJpbmdzLFxuICAgIElMaXN0UmVzb3VyY2VTdHJpbmdzLCBJUGFnaW5hdG9yUmVzb3VyY2VTdHJpbmdzLCBJVHJlZVJlc291cmNlU3RyaW5ncyB7IH1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjb25zdCBDdXJyZW50UmVzb3VyY2VTdHJpbmdzID0ge1xuICAgIEdyaWRSZXNTdHJpbmdzOiBjbG9uZVZhbHVlKEdyaWRSZXNvdXJjZVN0cmluZ3NFTiksXG4gICAgUGFnaW5hdG9yUmVzU3RyaW5nczogY2xvbmVWYWx1ZShQYWdpbmF0b3JSZXNvdXJjZVN0cmluZ3NFTiksXG4gICAgVGltZVBpY2tlclJlc1N0cmluZ3M6IGNsb25lVmFsdWUoVGltZVBpY2tlclJlc291cmNlU3RyaW5nc0VOKSxcbiAgICBDYWxlbmRhclJlc1N0cmluZ3M6IGNsb25lVmFsdWUoQ2FsZW5kYXJSZXNvdXJjZVN0cmluZ3NFTiksXG4gICAgQ2hpcFJlc1N0cmluZ3M6IGNsb25lVmFsdWUoQ2hpcFJlc291cmNlU3RyaW5nc0VOKSxcbiAgICBEYXRlUGlja2VyUmVzb3VyY2VTdHJpbmdzOiBjbG9uZVZhbHVlKERhdGVQaWNrZXJSZXNvdXJjZVN0cmluZ3NFTiksXG4gICAgRGF0ZVJhbmdlUGlja2VyUmVzU3RyaW5nczogY2xvbmVWYWx1ZShEYXRlUmFuZ2VQaWNrZXJSZXNvdXJjZVN0cmluZ3NFTiksXG4gICAgQ2Fyb3VzZWxSZXNTdHJpbmdzOiBjbG9uZVZhbHVlKENhcm91c2VsUmVzb3VyY2VTdHJpbmdzRU4pLFxuICAgIExpc3RSZXNTdHJpbmdzOiBjbG9uZVZhbHVlKExpc3RSZXNvdXJjZVN0cmluZ3NFTiksXG4gICAgSW5wdXRSZXNTdHJpbmdzOiBjbG9uZVZhbHVlKElucHV0UmVzb3VyY2VTdHJpbmdzRU4pLFxuICAgIFRyZWVSZXNTdHJpbmdzOiBjbG9uZVZhbHVlKFRyZWVSZXNvdXJjZVN0cmluZ3NFTiksXG59O1xuXG5jb25zdCB1cGRhdGVSZXNvdXJjZVN0cmluZ3MgPSAoY3VycmVudFN0cmluZ3M6IElSZXNvdXJjZVN0cmluZ3MsIG5ld1N0cmluZ3M6IElSZXNvdXJjZVN0cmluZ3MpID0+IHtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhuZXdTdHJpbmdzKSkge1xuICAgICAgICBpZiAoa2V5IGluIGN1cnJlbnRTdHJpbmdzKSB7XG4gICAgICAgICAgICBjdXJyZW50U3RyaW5nc1trZXldID0gbmV3U3RyaW5nc1trZXldO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqXG4gKiBDaGFuZ2VzIHRoZSByZXNvdXJjZSBzdHJpbmdzIGZvciBhbGwgY29tcG9uZW50cyBpbiB0aGUgYXBwbGljYXRpb25cbiAqIGBgYFxuICogQHBhcmFtIHJlc291cmNlU3RyaW5ncyB0byBiZSBhcHBsaWVkXG4gKi9cbmV4cG9ydCBjb25zdCBjaGFuZ2VpMThuID0gKHJlc291cmNlU3RyaW5nczogSVJlc291cmNlU3RyaW5ncykgPT4ge1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKEN1cnJlbnRSZXNvdXJjZVN0cmluZ3MpKSB7XG4gICAgICAgIHVwZGF0ZVJlc291cmNlU3RyaW5ncyhDdXJyZW50UmVzb3VyY2VTdHJpbmdzW2tleV0sIHJlc291cmNlU3RyaW5ncyk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGN1cnJlbnQgcmVzb3VyY2Ugc3RyaW5ncyBmb3IgYWxsIGNvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGNvbnN0IGdldEN1cnJlbnRSZXNvdXJjZVN0cmluZ3MgPSAoKTogSVJlc291cmNlU3RyaW5ncyA9PiAoe1xuICAgIC4uLkN1cnJlbnRSZXNvdXJjZVN0cmluZ3MuQ2FsZW5kYXJSZXNTdHJpbmdzLFxuICAgIC4uLkN1cnJlbnRSZXNvdXJjZVN0cmluZ3MuQ2Fyb3VzZWxSZXNTdHJpbmdzLFxuICAgIC4uLkN1cnJlbnRSZXNvdXJjZVN0cmluZ3MuQ2hpcFJlc1N0cmluZ3MsXG4gICAgLi4uQ3VycmVudFJlc291cmNlU3RyaW5ncy5EYXRlUGlja2VyUmVzb3VyY2VTdHJpbmdzLFxuICAgIC4uLkN1cnJlbnRSZXNvdXJjZVN0cmluZ3MuRGF0ZVJhbmdlUGlja2VyUmVzU3RyaW5ncyxcbiAgICAuLi5DdXJyZW50UmVzb3VyY2VTdHJpbmdzLkdyaWRSZXNTdHJpbmdzLFxuICAgIC4uLkN1cnJlbnRSZXNvdXJjZVN0cmluZ3MuSW5wdXRSZXNTdHJpbmdzLFxuICAgIC4uLkN1cnJlbnRSZXNvdXJjZVN0cmluZ3MuTGlzdFJlc1N0cmluZ3MsXG4gICAgLi4uQ3VycmVudFJlc291cmNlU3RyaW5ncy5QYWdpbmF0b3JSZXNTdHJpbmdzLFxuICAgIC4uLkN1cnJlbnRSZXNvdXJjZVN0cmluZ3MuVGltZVBpY2tlclJlc1N0cmluZ3MsXG4gICAgLi4uQ3VycmVudFJlc291cmNlU3RyaW5ncy5UcmVlUmVzU3RyaW5nc1xufSk7XG4iXX0=