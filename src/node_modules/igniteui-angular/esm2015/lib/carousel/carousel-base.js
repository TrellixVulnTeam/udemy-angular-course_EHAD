import { useAnimation } from '@angular/animations';
import { fadeIn } from '../animations/fade';
import { slideInLeft } from '../animations/slide';
import { mkenum } from '../core/utils';
export var Direction;
(function (Direction) {
    Direction[Direction["NONE"] = 0] = "NONE";
    Direction[Direction["NEXT"] = 1] = "NEXT";
    Direction[Direction["PREV"] = 2] = "PREV";
})(Direction || (Direction = {}));
export const CarouselAnimationType = mkenum({
    none: 'none',
    slide: 'slide',
    fade: 'fade'
});
/** @hidden */
export class IgxCarouselComponentBase {
    constructor(builder) {
        this.builder = builder;
        /** @hidden */
        this.animationType = CarouselAnimationType.slide;
        /** @hidden */
        this.animationDuration = 320;
        /** @hidden */
        this.animationPosition = 0;
        /** @hidden */
        this.newDuration = 0;
    }
    /** @hidden */
    triggerAnimations() {
        if (this.animationType !== CarouselAnimationType.none) {
            if (this.animationStarted(this.leaveAnimationPlayer) || this.animationStarted(this.enterAnimationPlayer)) {
                requestAnimationFrame(() => {
                    this.resetAnimations();
                    this.playAnimations();
                });
            }
            else {
                this.playAnimations();
            }
        }
    }
    /** @hidden */
    animationStarted(animation) {
        return animation && animation.hasStarted();
    }
    /** @hidden */
    playAnimations() {
        this.playLeaveAnimation();
        this.playEnterAnimation();
    }
    resetAnimations() {
        if (this.animationStarted(this.leaveAnimationPlayer)) {
            this.leaveAnimationPlayer.reset();
        }
        if (this.animationStarted(this.enterAnimationPlayer)) {
            this.enterAnimationPlayer.reset();
        }
    }
    getAnimation() {
        let duration;
        if (this.newDuration) {
            duration = this.animationPosition ? this.animationPosition * this.newDuration : this.newDuration;
        }
        else {
            duration = this.animationPosition ? this.animationPosition * this.animationDuration : this.animationDuration;
        }
        switch (this.animationType) {
            case CarouselAnimationType.slide:
                const trans = this.animationPosition ? this.animationPosition * 100 : 100;
                return {
                    enterAnimation: useAnimation(slideInLeft, {
                        params: {
                            delay: '0s',
                            duration: `${duration}ms`,
                            endOpacity: 1,
                            startOpacity: 1,
                            fromPosition: `translateX(${this.currentItem.direction === 1 ? trans : -trans}%)`,
                            toPosition: 'translateX(0%)'
                        }
                    }),
                    leaveAnimation: useAnimation(slideInLeft, {
                        params: {
                            delay: '0s',
                            duration: `${duration}ms`,
                            endOpacity: 1,
                            startOpacity: 1,
                            fromPosition: `translateX(0%)`,
                            toPosition: `translateX(${this.currentItem.direction === 1 ? -trans : trans}%)`,
                        }
                    })
                };
            case CarouselAnimationType.fade:
                return {
                    enterAnimation: useAnimation(fadeIn, { params: { duration: `${duration}ms`, startOpacity: `${this.animationPosition}` } }),
                    leaveAnimation: null
                };
        }
        return {
            enterAnimation: null,
            leaveAnimation: null
        };
    }
    playEnterAnimation() {
        const animation = this.getAnimation().enterAnimation;
        if (!animation) {
            return;
        }
        const animationBuilder = this.builder.build(animation);
        this.enterAnimationPlayer = animationBuilder.create(this.getCurrentElement());
        this.enterAnimationPlayer.onDone(() => {
            if (this.enterAnimationPlayer) {
                this.enterAnimationPlayer.reset();
                this.enterAnimationPlayer = null;
            }
            this.animationPosition = 0;
            this.newDuration = 0;
            this.previousItem.previous = false;
        });
        this.previousItem.previous = true;
        this.enterAnimationPlayer.play();
    }
    playLeaveAnimation() {
        const animation = this.getAnimation().leaveAnimation;
        if (!animation) {
            return;
        }
        const animationBuilder = this.builder.build(animation);
        this.leaveAnimationPlayer = animationBuilder.create(this.getPreviousElement());
        this.leaveAnimationPlayer.onDone(() => {
            if (this.leaveAnimationPlayer) {
                this.leaveAnimationPlayer.reset();
                this.leaveAnimationPlayer = null;
            }
            this.animationPosition = 0;
            this.newDuration = 0;
        });
        this.leaveAnimationPlayer.play();
    }
}
//# sourceMappingURL=data:application/json;base64,