import { AnimationBuilder, useAnimation } from '@angular/animations';
import { Directive, EventEmitter } from '@angular/core';
import { noop, Subject } from 'rxjs';
import { growVerIn, growVerOut } from '../animations/grow';
/** @hidden @internal */
export var ANIMATION_TYPE;
(function (ANIMATION_TYPE) {
    ANIMATION_TYPE["OPEN"] = "open";
    ANIMATION_TYPE["CLOSE"] = "close";
})(ANIMATION_TYPE || (ANIMATION_TYPE = {}));
/**@hidden @internal */
// eslint-disable-next-line @angular-eslint/directive-class-suffix
export class ToggleAnimationPlayer {
    constructor(builder) {
        this.builder = builder;
        /** @hidden @internal */
        this.openAnimationDone = new EventEmitter();
        /** @hidden @internal */
        this.closeAnimationDone = new EventEmitter();
        /** @hidden @internal */
        this.openAnimationStart = new EventEmitter();
        /** @hidden @internal */
        this.closeAnimationStart = new EventEmitter();
        /** @hidden @internal */
        this.openAnimationPlayer = null;
        /** @hidden @internal */
        this.closeAnimationPlayer = null;
        this.destroy$ = new Subject();
        this.players = new Map();
        this._animationSettings = {
            openAnimation: growVerIn,
            closeAnimation: growVerOut
        };
        this.closeInterrupted = false;
        this.openInterrupted = false;
        this._defaultClosedCallback = noop;
        this._defaultOpenedCallback = noop;
        this.onClosedCallback = this._defaultClosedCallback;
        this.onOpenedCallback = this._defaultOpenedCallback;
    }
    get animationSettings() {
        return this._animationSettings;
    }
    set animationSettings(value) {
        this._animationSettings = value;
    }
    /** @hidden @internal */
    playOpenAnimation(targetElement, onDone) {
        this.startPlayer(ANIMATION_TYPE.OPEN, targetElement, onDone || this._defaultOpenedCallback);
    }
    /** @hidden @internal */
    playCloseAnimation(targetElement, onDone) {
        this.startPlayer(ANIMATION_TYPE.CLOSE, targetElement, onDone || this._defaultClosedCallback);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    startPlayer(type, targetElement, callback) {
        if (!targetElement) { // if no element is passed, there is nothing to animate
            return;
        }
        let target = this.getPlayer(type);
        if (!target) {
            target = this.initializePlayer(type, targetElement, callback);
        }
        if (target.hasStarted()) {
            return;
        }
        const targetEmitter = type === ANIMATION_TYPE.OPEN ? this.openAnimationStart : this.closeAnimationStart;
        targetEmitter.emit();
        target.play();
    }
    initializePlayer(type, targetElement, callback) {
        const oppositeType = type === ANIMATION_TYPE.OPEN ? ANIMATION_TYPE.CLOSE : ANIMATION_TYPE.OPEN;
        const animationSettings = type === ANIMATION_TYPE.OPEN ?
            this.animationSettings.openAnimation : this.animationSettings.closeAnimation;
        const animation = useAnimation(animationSettings);
        const animationBuilder = this.builder.build(animation);
        const opposite = this.getPlayer(oppositeType);
        let oppositePosition = 1;
        if (opposite) {
            if (opposite.hasStarted()) {
                // .getPosition() still returns 0 sometimes, regardless of the fix for https://github.com/angular/angular/issues/18891;
                oppositePosition = opposite._renderer.engine.players[0].getPosition();
            }
            this.cleanUpPlayer(oppositeType);
        }
        if (type === ANIMATION_TYPE.OPEN) {
            this.openAnimationPlayer = animationBuilder.create(targetElement.nativeElement);
        }
        else if (type === ANIMATION_TYPE.CLOSE) {
            this.closeAnimationPlayer = animationBuilder.create(targetElement.nativeElement);
        }
        const target = this.getPlayer(type);
        target.init();
        this.getPlayer(type).setPosition(1 - oppositePosition);
        if (type === ANIMATION_TYPE.OPEN) {
            this.onOpenedCallback = callback;
            this.openInterrupted = false;
        }
        else if (type === ANIMATION_TYPE.CLOSE) {
            this.onClosedCallback = callback;
            this.closeInterrupted = false;
        }
        const targetEmitter = type === ANIMATION_TYPE.OPEN ? this.openAnimationDone : this.closeAnimationDone;
        target.onDone(() => {
            const targetCallback = type === ANIMATION_TYPE.OPEN ? this.onOpenedCallback : this.onClosedCallback;
            targetCallback();
            if (!(type === ANIMATION_TYPE.OPEN ? this.openInterrupted : this.closeInterrupted)) {
                targetEmitter.emit();
            }
            this.cleanUpPlayer(type);
        });
        return target;
    }
    cleanUpPlayer(target) {
        switch (target) {
            case ANIMATION_TYPE.CLOSE:
                if (this.closeAnimationPlayer != null) {
                    this.closeAnimationPlayer.reset();
                    this.closeAnimationPlayer.destroy();
                    this.closeAnimationPlayer = null;
                }
                this.closeInterrupted = true;
                this.onClosedCallback = this._defaultClosedCallback;
                break;
            case ANIMATION_TYPE.OPEN:
                if (this.openAnimationPlayer != null) {
                    this.openAnimationPlayer.reset();
                    this.openAnimationPlayer.destroy();
                    this.openAnimationPlayer = null;
                }
                this.openInterrupted = true;
                this.onOpenedCallback = this._defaultOpenedCallback;
                break;
            default:
                break;
        }
    }
    getPlayer(type) {
        switch (type) {
            case ANIMATION_TYPE.OPEN:
                return this.openAnimationPlayer;
            case ANIMATION_TYPE.CLOSE:
                return this.closeAnimationPlayer;
            default:
                return null;
        }
    }
}
ToggleAnimationPlayer.decorators = [
    { type: Directive }
];
ToggleAnimationPlayer.ctorParameters = () => [
    { type: AnimationBuilder }
];
//# sourceMappingURL=data:application/json;base64,