import { Component, ChangeDetectorRef, EventEmitter, HostBinding, Input, Output, ContentChild } from '@angular/core';
import { AnimationBuilder } from '@angular/animations';
import { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';
import { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';
import { IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';
import { ToggleAnimationPlayer } from './toggle-animation-component';
let NEXT_ID = 0;
export class IgxExpansionPanelComponent extends ToggleAnimationPlayer {
    constructor(cdr, builder) {
        super(builder);
        this.cdr = cdr;
        this.builder = builder;
        /**
         * Sets/gets the `id` of the expansion panel component.
         * If not set, `id` will have value `"igx-expansion-panel-0"`;
         * ```html
         * <igx-expansion-panel id = "my-first-expansion-panel"></igx-expansion-panel>
         * ```
         * ```typescript
         * let panelId =  this.panel.id;
         * ```
         *
         * @memberof IgxExpansionPanelComponent
         */
        this.id = `igx-expansion-panel-${NEXT_ID++}`;
        /**
         * @hidden
         */
        this.cssClass = 'igx-expansion-panel';
        /**
         * @hidden
         */
        this.collapsedChange = new EventEmitter();
        /**
         * Emitted when the expansion panel finishes collapsing
         * ```typescript
         *  handleCollapsed(event: IExpansionPanelEventArgs)
         * ```
         * ```html
         *  <igx-expansion-panel (onCollapsed)="handleCollapsed($event)">
         *      ...
         *  </igx-expansion-panel>
         * ```
         */
        this.onCollapsed = new EventEmitter();
        /**
         * Emitted when the expansion panel finishes expanding
         * ```typescript
         *  handleExpanded(event: IExpansionPanelEventArgs)
         * ```
         * ```html
         *  <igx-expansion-panel (onExpanded)="handleExpanded($event)">
         *      ...
         *  </igx-expansion-panel>
         * ```
         */
        this.onExpanded = new EventEmitter();
        this._collapsed = true;
    }
    /**
     * Sets/gets the animation settings of the expansion panel component
     * Open and Close animation should be passed
     *
     * Get
     * ```typescript
     *  const currentAnimations = this.panel.animationSettings;
     * ```
     * Set
     * ```typescript
     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';
     *  ...
     *  this.panel.animationsSettings = {
     *      openAnimation: slideInLeft,
     *      closeAnimation: slideOutRight
     * };
     * ```
     * or via template
     * ```typescript
     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';
     *  ...
     *  myCustomAnimationObject = {
     *      openAnimation: slideInLeft,
     *      closeAnimation: slideOutRight
     * };
     * ```html
     *  <igx-expansion-panel [animationSettings]='myCustomAnimationObject'>
     *  ...
     *  </igx-expansion-panel>
     * ```
     */
    get animationSettings() {
        return this._animationSettings;
    }
    set animationSettings(value) {
        this._animationSettings = value;
    }
    /**
     * Gets/sets whether the component is collapsed (its content is hidden)
     * Get
     * ```typescript
     *  const myPanelState: boolean = this.panel.collapsed;
     * ```
     * Set
     * ```html
     *  this.panel.collapsed = true;
     * ```
     *
     * Two-way data binding:
     * ```html
     * <igx-expansion-panel [(collapsed)]="model.isCollapsed"></igx-expansion-panel>
     * ```
     */
    get collapsed() {
        return this._collapsed;
    }
    set collapsed(value) {
        this._collapsed = value;
        this.collapsedChange.emit(this._collapsed);
    }
    /**
     * @hidden
     */
    get headerId() {
        return this.header ? `${this.id}-header` : '';
    }
    /** @hidden */
    ngAfterContentInit() {
        if (this.body && this.header) {
            // schedule at end of turn:
            Promise.resolve().then(() => {
                this.body.labelledBy = this.body.labelledBy || this.headerId;
                this.body.label = this.body.label || this.id + '-region';
            });
        }
    }
    /**
     * Collapses the panel
     *
     * ```html
     *  <igx-expansion-panel #myPanel>
     *      ...
     *  </igx-expansion-panel>
     *  <button (click)="myPanel.collapse($event)">Collpase Panel</button>
     * ```
     */
    collapse(evt) {
        var _a;
        if (this.collapsed) { // If expansion panel is already collapsed, do nothing
            return;
        }
        this.playCloseAnimation((_a = this.body) === null || _a === void 0 ? void 0 : _a.element, () => {
            this.onCollapsed.emit({ event: evt, panel: this, owner: this });
            this.collapsed = true;
            this.cdr.markForCheck();
        });
    }
    /**
     * Expands the panel
     *
     * ```html
     *  <igx-expansion-panel #myPanel>
     *      ...
     *  </igx-expansion-panel>
     *  <button (click)="myPanel.expand($event)">Expand Panel</button>
     * ```
     */
    expand(evt) {
        var _a;
        if (!this.collapsed) { // If the panel is already opened, do nothing
            return;
        }
        this.collapsed = false;
        this.cdr.detectChanges();
        this.playOpenAnimation((_a = this.body) === null || _a === void 0 ? void 0 : _a.element, () => {
            this.onExpanded.emit({ event: evt, panel: this, owner: this });
        });
    }
    /**
     * Toggles the panel
     *
     * ```html
     *  <igx-expansion-panel #myPanel>
     *      ...
     *  </igx-expansion-panel>
     *  <button (click)="myPanel.toggle($event)">Expand Panel</button>
     * ```
     */
    toggle(evt) {
        if (this.collapsed) {
            this.open(evt);
        }
        else {
            this.close(evt);
        }
    }
    open(evt) {
        this.expand(evt);
    }
    close(evt) {
        this.collapse(evt);
    }
}
IgxExpansionPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-expansion-panel',
                template: "<ng-content select=\"igx-expansion-panel-header\"></ng-content>\n<ng-content *ngIf=\"!collapsed\" select=\"igx-expansion-panel-body\"></ng-content>\n",
                providers: [{ provide: IGX_EXPANSION_PANEL_COMPONENT, useExisting: IgxExpansionPanelComponent }]
            },] }
];
IgxExpansionPanelComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: AnimationBuilder }
];
IgxExpansionPanelComponent.propDecorators = {
    animationSettings: [{ type: Input }],
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    cssClass: [{ type: HostBinding, args: ['class.igx-expansion-panel',] }],
    collapsed: [{ type: Input }],
    collapsedChange: [{ type: Output }],
    onCollapsed: [{ type: Output }],
    onExpanded: [{ type: Output }],
    body: [{ type: ContentChild, args: [IgxExpansionPanelBodyComponent, { read: IgxExpansionPanelBodyComponent },] }],
    header: [{ type: ContentChild, args: [IgxExpansionPanelHeaderComponent, { read: IgxExpansionPanelHeaderComponent },] }]
};
//# sourceMappingURL=data:application/json;base64,