import { __decorate } from "tslib";
import { Component, HostBinding, Input, ViewChildren, EventEmitter, Output, IterableDiffers } from '@angular/core';
import { ColumnDisplayOrder } from '../common/enums';
import { IgxCheckboxComponent } from '../../checkbox/checkbox.component';
import { DeprecateProperty } from '../../core/deprecateDecorators';
let NEXT_ID = 0;
/**
 * Providing reference to `IgxColumnActionsComponent`:
 * ```typescript
 *  @ViewChild('columnActions', { read: IgxColumnActionsComponent })
 *  public columnActions: IgxColumnActionsComponent;
 */
export class IgxColumnActionsComponent {
    constructor(differs) {
        this.differs = differs;
        /**
         * Gets/sets the indentation of columns in the column list based on their hierarchy level.
         *
         * @example
         * ```
         * <igx-column-actions [indentation]="15"></igx-column-actions>
         * ```
         */
        this.indentation = 30;
        /**
         * Sets/Gets the css class selector.
         * By default the value of the `class` attribute is `"igx-column-actions"`.
         * ```typescript
         * let cssCLass =  this.columnHidingUI.cssClass;
         * ```
         * ```typescript
         * this.columnHidingUI.cssClass = 'column-chooser';
         * ```
         */
        this.cssClass = 'igx-column-actions';
        /**
         * Gets/sets the max height of the columns area.
         *
         * @remarks
         * The default max height is 100%.
         * @example
         * ```html
         * <igx-column-actions [columnsAreaMaxHeight]="200px"></igx-column-actions>
         * ```
         */
        this.columnsAreaMaxHeight = '100%';
        /**
         * Shows/hides the columns filtering input from the UI.
         *
         * @example
         * ```html
         *  <igx-column-actions [hideFilter]="true"></igx-column-actions>
         * ```
         */
        this.hideFilter = false;
        /**
         * Gets/sets the title of the column actions component.
         *
         * @example
         * ```html
         * <igx-column-actions [title]="'Pin Columns'"></igx-column-actions>
         * ```
         */
        this.title = '';
        /**
         * An event that is emitted after a column's checked state is changed.
         * Provides references to the `column` and the `checked` properties as event arguments.
         * ```html
         *  <igx-column-actions (columnToggled)="columnToggled($event)"></igx-column-actions>
         * ```
         */
        this.columnToggled = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.actionableColumns = [];
        /**
         * @hidden @internal
         */
        this.filteredColumns = [];
        /**
         * @hidden @internal
         */
        this.pipeTrigger = 0;
        this._differ = null;
        /**
         * @hidden @internal
         */
        this._filterColumnsPrompt = '';
        /**
         * @hidden @internal
         */
        this._filterCriteria = '';
        /**
         * @hidden @internal
         */
        this._columnDisplayOrder = ColumnDisplayOrder.DisplayOrder;
        /**
         * @hidden @internal
         */
        this._id = `igx-column-actions-${NEXT_ID++}`;
        /**
         * @hidden @internal
         */
        this.trackChanges = (index, col) => col.field + '_' + this.actionsDirective.actionEnabledColumnsFilter(col, index, []);
        this._differ = this.differs.find([]).create(this.trackChanges);
    }
    /**
     * Gets the grid columns to provide an action for.
     *
     * @deprecated
     * @example
     * ```typescript
     * let gridColumns = this.columnActions.columns;
     * ```
     */
    get columns() {
        var _a;
        return (_a = this.grid) === null || _a === void 0 ? void 0 : _a.columns;
    }
    set columns(value) {
        if (value && value.length > 0) {
            this.grid = value[0].grid;
        }
    }
    /**
     * Gets the prompt that is displayed in the filter input.
     *
     * @example
     * ```typescript
     * let filterColumnsPrompt = this.columnActions.filterColumnsPrompt;
     * ```
     */
    get filterColumnsPrompt() {
        return this._filterColumnsPrompt;
    }
    /**
     * Sets the prompt that is displayed in the filter input.
     *
     * @example
     * ```html
     * <igx-column-actions [filterColumnsPrompt]="'Type here to search'"></igx-column-actions>
     * ```
     */
    set filterColumnsPrompt(value) {
        this._filterColumnsPrompt = value || '';
    }
    /**
     * Gets the value which filters the columns list.
     *
     * @example
     * ```typescript
     * let filterCriteria =  this.columnActions.filterCriteria;
     * ```
     */
    get filterCriteria() {
        return this._filterCriteria;
    }
    /**
     * Sets the value which filters the columns list.
     *
     * @example
     * ```html
     *  <igx-column-actions [filterCriteria]="'ID'"></igx-column-actions>
     * ```
     */
    set filterCriteria(value) {
        value = value || '';
        if (value !== this._filterCriteria) {
            this._filterCriteria = value;
            this.pipeTrigger++;
        }
    }
    /**
     * Gets the display order of the columns.
     *
     * @example
     * ```typescript
     * let columnDisplayOrder = this.columnActions.columnDisplayOrder;
     * ```
     */
    get columnDisplayOrder() {
        return this._columnDisplayOrder;
    }
    /**
     * Sets the display order of the columns.
     *
     * @example
     * ```typescript
     * this.columnActions.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;
     * ```
     */
    set columnDisplayOrder(value) {
        if (value && value !== this._columnDisplayOrder) {
            this._columnDisplayOrder = value;
            this.pipeTrigger++;
        }
    }
    /**
     * Gets the text of the button that unchecks all columns.
     *
     * @remarks
     * If unset it is obtained from the IgxColumnActionsBased derived directive applied.
     * @example
     * ```typescript
     * let uncheckAllText = this.columnActions.uncheckAllText;
     * ```
     */
    get uncheckAllText() {
        return this._uncheckAllText || this.actionsDirective.uncheckAllLabel;
    }
    /**
     * Sets the text of the button that unchecks all columns.
     *
     * @example
     * ```html
     * <igx-column-actions [uncheckAllText]="'Show All'"></igx-column-actions>
     * ```
     */
    set uncheckAllText(value) {
        this._uncheckAllText = value;
    }
    /**
     * Gets the text of the button that checks all columns.
     *
     * @remarks
     * If unset it is obtained from the IgxColumnActionsBased derived directive applied.
     * @example
     * ```typescript
     * let uncheckAllText = this.columnActions.uncheckAllText;
     * ```
     */
    get checkAllText() {
        return this._checkAllText || this.actionsDirective.checkAllLabel;
    }
    /**
     * Sets the text of the button that checks all columns.
     *
     * @remarks
     * If unset it is obtained from the IgxColumnActionsBased derived directive applied.
     * @example
     * ```html
     * <igx-column-actions [checkAllText]="'Hide All'"></igx-column-actions>
     * ```
     */
    set checkAllText(value) {
        this._checkAllText = value;
    }
    /**
     * @hidden @internal
     */
    get checkAllDisabled() {
        return this.actionsDirective.allUnchecked;
    }
    /**
     * @hidden @internal
     */
    get uncheckAllDisabled() {
        return this.actionsDirective.allChecked;
    }
    /**
     * Gets/Sets the value of the `id` attribute.
     *
     * @remarks
     * If not provided it will be automatically generated.
     * @example
     * ```html
     * <igx-column-actions [id]="'igx-actions-1'"></igx-column-actions>
     * ```
     */
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    /**
     * @hidden @internal
     */
    get titleID() {
        return this.id + '_title';
    }
    /**
     * @hidden @internal
     */
    ngDoCheck() {
        var _a;
        if (this._differ) {
            const changes = this._differ.diff((_a = this.grid) === null || _a === void 0 ? void 0 : _a.columns);
            if (changes) {
                this.pipeTrigger++;
            }
        }
    }
    /**
     * Unchecks all columns and performs the appropriate action.
     *
     * @example
     * ```typescript
     * this.columnActions.uncheckAllColumns();
     * ```
     */
    uncheckAllColumns() {
        this.actionsDirective.uncheckAll();
    }
    /**
     * Checks all columns and performs the appropriate action.
     *
     * @example
     * ```typescript
     * this.columnActions.checkAllColumns();
     * ```
     */
    checkAllColumns() {
        this.actionsDirective.checkAll();
    }
    /**
     * @hidden @internal
     */
    toggleColumn(column) {
        this.actionsDirective.toggleColumn(column);
        this.columnToggled.emit({ column, checked: this.actionsDirective.columnChecked(column) });
    }
}
IgxColumnActionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-column-actions',
                template: "<div class=\"igx-column-actions__header\">\n    <h4 [attr.id]='titleID' class=\"igx-column-actions__header-title\" *ngIf=\"title\">{{ title }}</h4>\n\n    <igx-input-group class=\"igx-column-actions__header-input\" *ngIf=\"!hideFilter\">\n        <input igxInput\n            type=\"text\"\n            [attr.aria-describedby]='titleID'\n            [(ngModel)]=\"filterCriteria\"\n            [placeholder]=\"filterColumnsPrompt\"\n            autocomplete=\"off\" />\n    </igx-input-group>\n</div>\n\n<div class=\"igx-column-actions__columns\" tabindex=\"0\"\n    [style.max-height]=\"columnsAreaMaxHeight\">\n    <igx-checkbox\n        *ngFor=\"let column of grid?.columns\n            | columnActionEnabled:actionsDirective.actionEnabledColumnsFilter:pipeTrigger\n            | filterActionColumns:filterCriteria:pipeTrigger\n            | sortActionColumns:columnDisplayOrder:pipeTrigger;\"\n        class=\"igx-column-actions__columns-item\"\n        [readonly]=\"true\"\n        (click)=\"toggleColumn(column)\"\n        [checked]=\"actionsDirective.columnChecked(column)\"\n        [style.margin-left.px]=\"column.level * indentation\">\n        {{ column.header || column.field }}\n    </igx-checkbox>\n</div>\n\n<div class=\"igx-column-actions__buttons\">\n    <button igxButton igxRipple (click)=\"uncheckAllColumns()\" [disabled]=\"uncheckAllDisabled\">{{ uncheckAllText }}</button>\n    <button igxButton igxRipple (click)=\"checkAllColumns()\" [disabled]=\"checkAllDisabled\">{{ checkAllText }}</button>\n</div>\n"
            },] }
];
IgxColumnActionsComponent.ctorParameters = () => [
    { type: IterableDiffers }
];
IgxColumnActionsComponent.propDecorators = {
    grid: [{ type: Input }],
    indentation: [{ type: Input }],
    cssClass: [{ type: HostBinding, args: ['attr.class',] }],
    columnsAreaMaxHeight: [{ type: Input }],
    hideFilter: [{ type: Input }],
    columnItems: [{ type: ViewChildren, args: [IgxCheckboxComponent,] }],
    title: [{ type: Input }],
    columnToggled: [{ type: Output }],
    columns: [{ type: Input }],
    filterColumnsPrompt: [{ type: Input }],
    filterCriteria: [{ type: Input }],
    columnDisplayOrder: [{ type: Input }],
    uncheckAllText: [{ type: Input }],
    checkAllText: [{ type: Input }],
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }]
};
__decorate([
    DeprecateProperty(`Deprecated. Use 'grid' input instead.`)
], IgxColumnActionsComponent.prototype, "columns", null);
//# sourceMappingURL=data:application/json;base64,