import { Component, Input, HostBinding, HostListener, ChangeDetectionStrategy, ElementRef } from '@angular/core';
import { IgxCurrencySummaryOperand, IgxDateSummaryOperand, IgxNumberSummaryOperand, IgxPercentSummaryOperand, IgxTimeSummaryOperand } from './grid-summary';
import { getLocaleCurrencyCode } from '@angular/common';
export class IgxSummaryCellComponent {
    constructor(element) {
        this.element = element;
        this.firstCellIndentation = 0;
        this.hasSummary = false;
    }
    get visibleColumnIndex() {
        return this.column.visibleIndex;
    }
    get attrCellID() {
        return `${this.grid.id}_${this.rowIndex}_${this.visibleColumnIndex}`;
    }
    activate() {
        const currNode = this.grid.navigation.activeNode;
        if (currNode && this.rowIndex === currNode.row && this.visibleColumnIndex === currNode.column) {
            return;
        }
        this.grid.navigation.setActiveNode({ row: this.rowIndex, column: this.visibleColumnIndex }, 'summaryCell');
        this.grid.cdr.detectChanges();
    }
    get selectionNode() {
        return {
            row: this.rowIndex,
            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,
            isSummaryRow: true
        };
    }
    get width() {
        return this.column.getCellWidth();
    }
    get nativeElement() {
        return this.element.nativeElement;
    }
    get columnDatatype() {
        return this.column.dataType;
    }
    get itemHeight() {
        return this.column.grid.defaultSummaryHeight;
    }
    /**
     * @hidden
     */
    get grid() {
        return this.column.grid;
    }
    /**
     * @hidden @internal
     */
    get currencyCode() {
        return this.column.pipeArgs.currencyCode ?
            this.column.pipeArgs.currencyCode : getLocaleCurrencyCode(this.grid.locale);
    }
    translateSummary(summary) {
        return this.grid.resourceStrings[`igx_grid_summary_${summary.key}`] || summary.label;
    }
    /**
     * @hidden @internal
     */
    isNumberOperand() {
        var _a;
        return ((_a = this.column.summaries) === null || _a === void 0 ? void 0 : _a.constructor) === IgxNumberSummaryOperand;
    }
    /**
     * @hidden @internal
     */
    isDateOperand() {
        var _a;
        return ((_a = this.column.summaries) === null || _a === void 0 ? void 0 : _a.constructor) === IgxDateSummaryOperand;
    }
    /**
     * @hidden @internal
     */
    isTimeOperand() {
        var _a;
        return ((_a = this.column.summaries) === null || _a === void 0 ? void 0 : _a.constructor) === IgxTimeSummaryOperand;
    }
    /**
     * @hidden @internal
     */
    isCurrencyOperand() {
        var _a;
        return ((_a = this.column.summaries) === null || _a === void 0 ? void 0 : _a.constructor) === IgxCurrencySummaryOperand;
    }
    /**
     * @hidden @internal
     */
    isPercentOperand() {
        var _a;
        return ((_a = this.column.summaries) === null || _a === void 0 ? void 0 : _a.constructor) === IgxPercentSummaryOperand;
    }
}
IgxSummaryCellComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                selector: 'igx-grid-summary-cell',
                template: "<ng-container *ngIf=\"hasSummary\">\n    <ng-container *ngFor=\"let summary of summaryResults\">\n            <div class=\"igx-grid-summary__item\" [style.height.px]=\"itemHeight\">\n\n                <ng-container *ngIf=\"visibleColumnIndex === 0 && firstCellIndentation >= 0\">\n                    <div class=\"igx-grid__tree-cell--padding-level-{{firstCellIndentation}}\"></div>\n\n                    <div #indicator class=\"igx-grid__tree-grouping-indicator\" style=\"visibility: hidden\">\n                        <igx-icon>chevron_right</igx-icon>\n                    </div>\n                </ng-container>\n\n                <span class=\"igx-grid-summary__label\" [title]=\"summary.label\">{{ translateSummary(summary) }}</span>\n                <span class=\"igx-grid-summary__result\" [title]=\"summary.summaryResult\">\n                    {{\n                        summaryFormatter\n                        ? (summary | summaryFormatter:column.summaries:summaryFormatter)\n                        : (isNumberOperand() && summary.key !== 'count')\n                        ? (summary.summaryResult | number:column.pipeArgs.digitsInfo:grid.locale)\n                        : ((isDateOperand() || isTimeOperand()) && summary.key !== 'count')\n                        ? (summary.summaryResult | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale)\n                        : (isCurrencyOperand() && summary.key !== 'count')\n                        ? (summary.summaryResult | currency:currencyCode:column.pipeArgs.display:column.pipeArgs.digitsInfo:grid.locale)\n                        : (isPercentOperand() && summary.key !== 'count')\n                        ? (summary.summaryResult | percent:column.pipeArgs.digitsInfo:grid.locale)\n                        : (summary.key === 'count' && (isNumberOperand() || isDateOperand() || isCurrencyOperand() || isPercentOperand()))\n                        ? (summary.summaryResult | number:undefined:grid.locale)\n                        : summary.summaryResult\n                    }}\n                </span>\n            </div>\n    </ng-container>\n</ng-container>\n"
            },] }
];
IgxSummaryCellComponent.ctorParameters = () => [
    { type: ElementRef }
];
IgxSummaryCellComponent.propDecorators = {
    summaryResults: [{ type: Input }],
    column: [{ type: Input }],
    firstCellIndentation: [{ type: Input }],
    hasSummary: [{ type: Input }],
    density: [{ type: Input }],
    summaryFormatter: [{ type: Input }],
    active: [{ type: Input }, { type: HostBinding, args: ['class.igx-grid-summary--active',] }],
    rowIndex: [{ type: Input }, { type: HostBinding, args: ['attr.data-rowIndex',] }],
    visibleColumnIndex: [{ type: HostBinding, args: ['attr.data-visibleIndex',] }],
    attrCellID: [{ type: HostBinding, args: ['attr.id',] }],
    activate: [{ type: HostListener, args: ['pointerdown',] }]
};
//# sourceMappingURL=data:application/json;base64,