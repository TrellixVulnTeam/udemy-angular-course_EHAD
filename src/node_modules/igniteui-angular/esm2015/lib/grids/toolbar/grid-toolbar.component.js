import { Component, ContentChild, ElementRef, HostBinding, Inject, Input, Optional } from '@angular/core';
import { first } from 'rxjs/operators';
import { DisplayDensityToken, DisplayDensityBase } from '../../core/displayDensity';
import { IgxIconService } from '../../icon/public_api';
import { pinLeft, unpinLeft } from '@igniteui/material-icons-extended';
import { IgxGridToolbarTitleDirective, IgxGridToolbarActionsDirective } from './common';
import { GridBaseAPIService } from '../api.service';
/**
 * Provides a context-aware container component for UI operations for the grid components.
 *
 * @igxModule IgxGridToolbarModule
 *
 */
export class IgxGridToolbarComponent extends DisplayDensityBase {
    constructor(_displayDensityOptions, api, iconService, element) {
        super(_displayDensityOptions);
        this._displayDensityOptions = _displayDensityOptions;
        this.api = api;
        this.iconService = iconService;
        this.element = element;
        /**
         * When enabled, shows the indeterminate progress bar.
         *
         * @remarks
         * By default this will be toggled, when the default exporter component is present
         * and an exporting is in progress.
         */
        this.showProgress = false;
        /**
         * @hidden
         * @internal
         */
        this.defaultStyle = true;
        /** @hidden @internal */
        this.width = null;
        this.iconService.addSvgIconFromText(pinLeft.name, pinLeft.value, 'imx-icons');
        this.iconService.addSvgIconFromText(unpinLeft.name, unpinLeft.value, 'imx-icons');
    }
    /**
     * Gets/sets the grid component for the toolbar component.
     *
     * @remarks
     * Usually you should not set this property in the context of the default grid/tree grid.
     * The only grids that demands this to be set are the hierarchical child grids. For additional
     * information check the toolbar topic.
     */
    get grid() {
        if (this._grid) {
            return this._grid;
        }
        return this.api.grid;
    }
    set grid(value) {
        this._grid = value;
    }
    /** Returns the native DOM element of the toolbar component */
    get nativeElement() {
        return this.element.nativeElement;
    }
    /**
     * @hidden
     * @internal
     */
    get cosyStyle() {
        return this.displayDensity === 'cosy';
    }
    /**
     * @hidden
     * @internal
     */
    get compactStyle() {
        return this.displayDensity === 'compact';
    }
    /** @hidden @internal */
    ngOnInit() {
        this.grid.rendered$.pipe(first()).subscribe(() => this.width = this.grid.outerWidth);
        this.sub = this.grid.resizeNotify.subscribe(() => this.width = this.grid.outerWidth);
    }
    /** @hidden @internal */
    ngOnDestroy() {
        var _a;
        (_a = this.sub) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
}
IgxGridToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-grid-toolbar',
                template: "<ng-template #title>\n    <ng-content select=\"[igxGridToolbarTitle],igx-grid-toolbar-title\"></ng-content>\n</ng-template>\n<igx-grid-toolbar-title *ngIf=\"!hasTitle\">{{ grid.toolbarTitle }}</igx-grid-toolbar-title>\n<ng-container *ngTemplateOutlet=\"title\"></ng-container>\n\n<div class=\"igx-grid-toolbar__custom-content\">\n    <ng-content></ng-content>\n</div>\n\n<ng-template #actions>\n    <ng-content select=\"[igxGridToolbarActions],igx-grid-toolbar-actions\"></ng-content>\n</ng-template>\n<igx-grid-toolbar-actions *ngIf=\"!hasActions\">\n    <igx-grid-toolbar-advanced-filtering *ngIf=\"grid.allowAdvancedFiltering\"></igx-grid-toolbar-advanced-filtering>\n    <igx-grid-toolbar-hiding *ngIf=\"grid.columnHiding\"></igx-grid-toolbar-hiding>\n    <igx-grid-toolbar-pinning *ngIf=\"grid.columnPinning\"></igx-grid-toolbar-pinning>\n    <igx-grid-toolbar-exporter *ngIf=\"grid.exportExcel || grid.exportCsv\" (exportStarted)=\"showProgress = true\" (exportEnded)=\"showProgress = false\">\n    </igx-grid-toolbar-exporter>\n</igx-grid-toolbar-actions>\n<ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n\n<div class=\"igx-grid-toolbar__progress-bar\" *ngIf=\"showProgress\">\n    <igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n</div>\n"
            },] }
];
IgxGridToolbarComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] },
    { type: GridBaseAPIService },
    { type: IgxIconService },
    { type: ElementRef }
];
IgxGridToolbarComponent.propDecorators = {
    showProgress: [{ type: Input }],
    grid: [{ type: Input }],
    hasTitle: [{ type: ContentChild, args: [IgxGridToolbarTitleDirective,] }],
    hasActions: [{ type: ContentChild, args: [IgxGridToolbarActionsDirective,] }],
    defaultStyle: [{ type: HostBinding, args: ['class.igx-grid-toolbar',] }],
    cosyStyle: [{ type: HostBinding, args: ['class.igx-grid-toolbar--cosy',] }],
    compactStyle: [{ type: HostBinding, args: ['class.igx-grid-toolbar--compact',] }],
    width: [{ type: HostBinding, args: ['style.max-width.px',] }, { type: HostBinding, args: ['style.flex-basis.px',] }]
};
//# sourceMappingURL=data:application/json;base64,