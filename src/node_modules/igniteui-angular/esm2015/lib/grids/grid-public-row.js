import { __decorate } from "tslib";
import { DeprecateProperty } from '../core/deprecateDecorators';
import { IgxRow } from './common/crud.service';
class BaseRow {
    /**
     * Gets the row key.
     * A row in the grid is identified either by:
     * - primaryKey data value,
     * - the whole rowData, if the primaryKey is omitted.
     *
     * ```typescript
     * let rowKey = row.key;
     * ```
     */
    get key() {
        const data = this.data;
        const primaryKey = this.grid.primaryKey;
        return primaryKey ? data[primaryKey] : data;
    }
    /**
     * The data record that populates the row.
     *
     * ```typescript
     * let rowData = row.data;
     * ```
     */
    get data() {
        var _a;
        return (_a = this._data) !== null && _a !== void 0 ? _a : this.grid.dataView[this.index];
    }
    /**
     * @deprecated Use 'data' instead.
     *
     * The data record that populates the row
     */
    get rowData() {
        return this.data;
    }
    /**
     * @deprecated Use 'key' instead.
     *
     */
    get rowID() {
        return this.key;
    }
    /**
     * Returns the view index calculated per the grid page.
     */
    get viewIndex() {
        return this.index + this.grid.page * this.grid.perPage;
    }
    /**
     * Returns if the row is currently in edit mode.
     */
    get inEditMode() {
        if (this.grid.rowEditable) {
            const editRowState = this.grid.crudService.row;
            return (editRowState && editRowState.id === this.key) || false;
        }
        else {
            return false;
        }
    }
    /**
     * Gets whether the row is pinned.
     * Default value is `false`.
     * ```typescript
     * const isPinned = row.pinned;
     * ```
     */
    get pinned() {
        return this.grid.isRecordPinned(this.data);
    }
    /**
     * Sets whether the row is pinned.
     * Default value is `false`.
     * ```typescript
     * row.pinned = !row.pinned;
     * ```
     */
    set pinned(val) {
        if (val) {
            this.pin();
        }
        else {
            this.unpin();
        }
    }
    /**
     * Gets the row expanded/collapsed state.
     *
     * ```typescript
     * const isExpanded = row.expanded;
     * ```
     */
    get expanded() {
        return this.grid.gridAPI.get_row_expansion_state(this.data);
    }
    /**
     * Expands/collapses the row.
     *
     * ```typescript
     * row.expanded = true;
     * ```
     */
    set expanded(val) {
        this.grid.gridAPI.set_row_expansion_state(this.key, val);
    }
    /**
     * Gets whether the row is selected.
     * Default value is `false`.
     * ```typescript
     * row.selected = true;
     * ```
     */
    get selected() {
        return this.grid.selectionService.isRowSelected(this.key);
    }
    /**
     * Sets whether the row is selected.
     * Default value is `false`.
     * ```typescript
     * row.selected = !row.selected;
     * ```
     */
    set selected(val) {
        if (val) {
            this.grid.selectionService.selectRowsWithNoEvent([this.key]);
        }
        else {
            this.grid.selectionService.deselectRowsWithNoEvent([this.key]);
        }
        this.grid.cdr.markForCheck();
    }
    /**
     * Returns if the row is in delete state.
     */
    get deleted() {
        return this.grid.gridAPI.row_deleted_transaction(this.key);
    }
    /**
     * Returns if the row has child rows. Always return false for IgxGridRow.
     */
    get hasChildren() {
        return false;
    }
    /**
     * TODO after cell facade class is implemented
     * Gets the rendered cells in the row component.
     * public get cells()
     */
    /**
     * Pins the specified row.
     * This method emits `onRowPinning` event.
     *
     * ```typescript
     * // pin the selected row from the grid
     * this.grid.selectedRows[0].pin();
     * ```
     */
    pin() {
        return this.grid.pinRow(this.key);
    }
    /**
     * Unpins the specified row.
     * This method emits `onRowPinning` event.
     *
     * ```typescript
     * // unpin the selected row from the grid
     * this.grid.selectedRows[0].unpin();
     * ```
     */
    unpin() {
        return this.grid.unpinRow(this.key);
    }
    /**
     * Updates the specified row object and the data source record with the passed value.
     * This method emits `onEditDone` event.
     *
     * ```typescript
     * // update the second selected row's value
     * let newValue = "Apple";
     * this.grid.selectedRows[1].update(newValue);
     * ```
     */
    update(value) {
        const crudService = this.grid.crudService;
        if (crudService.cellInEditMode && crudService.cell.id.rowID === this.key) {
            this.grid.endEdit(false);
        }
        const row = new IgxRow(this.key, this.index, this.data, this.grid);
        this.grid.gridAPI.update_row(row, value);
        this.grid.notifyChanges();
    }
    /**
     * Removes the specified row from the grid's data source.
     * This method emits `onRowDeleted` event.
     *
     * ```typescript
     * // delete the third selected row from the grid
     * this.grid.selectedRows[2].delete();
     * ```
     */
    delete() {
        this.grid.deleteRowById(this.key);
    }
}
__decorate([
    DeprecateProperty(`'rowData' property is deprecated. Use 'data' instead.`)
], BaseRow.prototype, "rowData", null);
__decorate([
    DeprecateProperty(`'rowID' property is deprecated. Use 'key' instead.`)
], BaseRow.prototype, "rowID", null);
export class IgxGridRow extends BaseRow {
    /**
     * @hidden
     */
    constructor(grid, index, _data) {
        super();
        this.grid = grid;
        this.index = index;
        this._data = _data;
    }
    /**
     * Returns the view index calculated per the grid page.
     */
    get viewIndex() {
        if (this.grid.groupingExpressions.length) {
            return this.grid.filteredSortedData.indexOf(this.data);
        }
        return this.index + this.grid.page * this.grid.perPage;
    }
    /**
     * Returns the parent row, if grid is grouped.
     */
    get parent() {
        let parent;
        if (!this.grid.groupingExpressions.length) {
            return undefined;
        }
        let i = this.index - 1;
        while (i >= 0 && !parent) {
            const rec = this.grid.dataView[i];
            if (this.grid.isGroupByRecord(rec)) {
                parent = new IgxGroupByRow(this.grid, i, rec);
            }
            i--;
        }
        return parent;
    }
}
export class IgxTreeGridRow extends BaseRow {
    /**
     * @hidden
     */
    constructor(grid, index, _data, _treeRow) {
        super();
        this.grid = grid;
        this.index = index;
        this._data = _data;
        this._treeRow = _treeRow;
    }
    /**
     *  The data passed to the row component.
     *
     * ```typescript
     * let selectedRowData = this.grid.selectedRows[0].rowData;
     * ```
     */
    get data() {
        if (this._data) {
            return this._data;
        }
        else {
            const rec = this.grid.dataView[this.index];
            return this.grid.isTreeRow(rec) ? rec.data : rec;
        }
    }
    /**
     * Returns the child rows.
     */
    get children() {
        const children = [];
        if (this.treeRow.expanded) {
            this.treeRow.children.forEach((rec, i) => {
                const row = new IgxTreeGridRow(this.grid, this.index + 1 + i, rec.data);
                children.push(row);
            });
        }
        return children;
    }
    /**
     * Returns the parent row.
     */
    get parent() {
        const row = this.grid.getRowByKey(this.treeRow.parent.rowID);
        return row;
    }
    /**
     * Returns true if child rows exist. Always return false for IgxGridRow.
     */
    get hasChildren() {
        if (this.treeRow.children) {
            return this.treeRow.children.length > 0;
        }
        else {
            return false;
        }
    }
    /**
     * The `ITreeGridRecord` with metadata about the row in the context of the tree grid.
     *
     * ```typescript
     * const rowParent = this.treeGrid.getRowByKey(1).treeRow.parent;
     * ```
     */
    get treeRow() {
        var _a;
        return (_a = this._treeRow) !== null && _a !== void 0 ? _a : this.grid.records.get(this.key);
    }
    /**
     * Gets whether the row is pinned.
     *
     * ```typescript
     * let isPinned = row.pinned;
     * ```
     */
    get pinned() {
        return this.grid.isRecordPinned(this);
    }
    /**
     * Sets whether the row is pinned.
     * Default value is `false`.
     * ```typescript
     * row.pinned = !row.pinned;
     * ```
     */
    set pinned(val) {
        if (val) {
            this.pin();
        }
        else {
            this.unpin();
        }
    }
    /**
     * Gets whether the row is expanded.
     *
     * ```typescript
     * let esExpanded = row.expanded;
     * ```
     */
    get expanded() {
        return this.grid.gridAPI.get_row_expansion_state(this.treeRow);
    }
    /**
     * Expands/collapses the row.
     *
     * ```typescript
     * row.expanded = true;
     * ```
     */
    set expanded(val) {
        this.grid.gridAPI.set_row_expansion_state(this.key, val);
    }
}
export class IgxHierarchicalGridRow extends BaseRow {
    /**
     * @hidden
     */
    constructor(grid, index, _data) {
        super();
        this.grid = grid;
        this.index = index;
        this._data = _data;
    }
    /**
     * Returns the view index calculated per the grid page.
     */
    get viewIndex() {
        return this.index + this.grid.page * this.grid.perPage;
    }
    /**
     * Returns true if row islands exist.
     */
    get hasChildren() {
        return !!this.grid.childLayoutKeys.length;
    }
}
export class IgxGroupByRow {
    /**
     * @hidden
     */
    constructor(grid, index, _groupRow) {
        this._groupRow = _groupRow;
        this.grid = grid;
        this.index = index;
        this.isGroupByRow = true;
    }
    /**
     * The IGroupByRecord object, representing the group record, if the row is a GroupByRow.
     */
    get groupRow() {
        return this._groupRow ? this._groupRow : this.grid.dataView[this.index];
    }
    /**
     * Returns the child rows.
     */
    get children() {
        const children = [];
        this.groupRow.records.forEach((rec, i) => {
            const row = new IgxGridRow(this.grid, this.index + 1 + i, rec);
            children.push(row);
        });
        return children;
    }
    /**
     * Gets whether the row is selected.
     * Default value is `false`.
     * ```typescript
     * row.selected = true;
     * ```
     */
    get selected() {
        return this.children.every(row => row.selected);
    }
    /**
     * Sets whether the row is selected.
     * Default value is `false`.
     * ```typescript
     * row.selected = !row.selected;
     * ```
     */
    set selected(val) {
        if (val) {
            this.children.forEach(row => {
                this.grid.selectionService.selectRowsWithNoEvent([row.key]);
            });
        }
        else {
            this.children.forEach(row => {
                this.grid.selectionService.deselectRowsWithNoEvent([row.key]);
            });
        }
        this.grid.cdr.markForCheck();
    }
    /**
     * Gets/sets whether the group row is expanded.
     * ```typescript
     * const groupRowExpanded = groupRow.expanded;
     * ```
     */
    get expanded() {
        return this.grid.isExpandedGroup(this.groupRow);
    }
    set expanded(value) {
        this.gridAPI.set_grouprow_expansion_state(this.groupRow, value);
    }
    isActive() {
        return this.grid.navigation.activeNode ? this.grid.navigation.activeNode.row === this.index : false;
    }
    /**
     * Toggles the group row expanded/collapsed state.
     * ```typescript
     * groupRow.toggle()
     * ```
     */
    toggle() {
        this.grid.toggleGroup(this.groupRow);
    }
    get gridAPI() {
        return this.grid.gridAPI;
    }
}
export class IgxSummaryRow {
    /**
     * @hidden
     */
    constructor(grid, index, _summaries) {
        this._summaries = _summaries;
        this.grid = grid;
        this.index = index;
        this.isSummaryRow = true;
    }
    /**
     * The IGroupByRecord object, representing the group record, if the row is a GroupByRow.
     */
    get summaries() {
        return this._summaries ? this._summaries : this.grid.dataView[this.index].summaries;
    }
}
//# sourceMappingURL=data:application/json;base64,