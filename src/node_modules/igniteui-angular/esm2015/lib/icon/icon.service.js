import { Injectable, SecurityContext, Inject, Optional } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { DOCUMENT } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "@angular/common/http";
import * as i3 from "@angular/common";
/**
 * **Ignite UI for Angular Icon Service** -
 *
 * The Ignite UI Icon Service makes it easy for developers to include custom SVG images and use them with IgxIconComponent.
 * In addition it could be used to associate a custom class to be applied on IgxIconComponent according to given font-family.
 *
 * Example:
 * ```typescript
 * this.iconService.registerFamilyAlias('material', 'material-icons');
 * this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');
 * ```
 */
export class IgxIconService {
    constructor(_sanitizer, _httpClient, _document) {
        this._sanitizer = _sanitizer;
        this._httpClient = _httpClient;
        this._document = _document;
        this._family = 'material-icons';
        this._familyAliases = new Map();
        this._cachedSvgIcons = new Set();
        this._iconLoaded = new Subject();
        this.iconLoaded = this._iconLoaded.asObservable();
    }
    /**
     * @hidden
     * @internal
     */
    ngOnDestroy() {
        this.cleanSvgContainer();
    }
    /**
     *  Returns the default font-family.
     * ```typescript
     *   const defaultFamily = this.iconService.defaultFamily;
     * ```
     */
    get defaultFamily() {
        return this._family;
    }
    /**
     *  Sets the default font-family.
     * ```typescript
     *   this.iconService.defaultFamily = 'svg-flags';
     * ```
     */
    set defaultFamily(className) {
        this._family = className;
    }
    /**
     *  Registers a custom class to be applied to IgxIconComponent for a given font-family.
     * ```typescript
     *   this.iconService.registerFamilyAlias('material', 'material-icons');
     * ```
     */
    registerFamilyAlias(alias, className = alias) {
        this._familyAliases.set(alias, className);
        return this;
    }
    /**
     *  Returns the custom class, if any, associated to a given font-family.
     * ```typescript
     *   const familyClass = this.iconService.familyClassName('material');
     * ```
     */
    familyClassName(alias) {
        return this._familyAliases.get(alias) || alias;
    }
    /**
     *  Adds an SVG image to the cache. SVG source is an url.
     * ```typescript
     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');
     * ```
     */
    addSvgIcon(name, url, family = '') {
        if (name && url) {
            const safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(url);
            if (!safeUrl) {
                throw new Error(`The provided URL could not be processed as trusted resource URL by Angular's DomSanitizer: "${url}".`);
            }
            const sanitizedUrl = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);
            if (!sanitizedUrl) {
                throw new Error(`The URL provided was not trusted as a resource URL: "${url}".`);
            }
            if (!this.isSvgIconCached(name, family)) {
                this.fetchSvg(url).subscribe((res) => {
                    this.cacheSvgIcon(name, res, family);
                    this._iconLoaded.next({ name, value: res, family });
                });
            }
        }
        else {
            throw new Error('You should provide at least `name` and `url` to register an svg icon.');
        }
    }
    /**
     *  Adds an SVG image to the cache. SVG source is its text.
     * ```typescript
     *   this.iconService.addSvgIconFromText('simple', '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200">
     *   <path d="M74 74h54v54H74" /></svg>', 'svg-flags');
     * ```
     */
    addSvgIconFromText(name, iconText, family = '') {
        if (name && iconText) {
            if (this.isSvgIconCached(name, family)) {
                return;
            }
            this.cacheSvgIcon(name, iconText, family);
        }
        else {
            throw new Error('You should provide at least `name` and `iconText` to register an svg icon.');
        }
    }
    /**
     *  Returns whether a given SVG image is present in the cache.
     * ```typescript
     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');
     * ```
     */
    isSvgIconCached(name, family = '') {
        const iconKey = this.getSvgIconKey(name, family);
        return this._cachedSvgIcons.has(iconKey);
    }
    /**
     *  Returns the key of a cached SVG image.
     * ```typescript
     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');
     * ```
     */
    getSvgIconKey(name, family = '') {
        return family + '_' + name;
    }
    /**
     * @hidden
     */
    fetchSvg(url) {
        const req = this._httpClient.get(url, { responseType: 'text' });
        return req;
    }
    /**
     * @hidden
     */
    cleanSvgContainer() {
        const container = this._document.documentElement.querySelector('.igx-svg-container');
        while (container.firstChild) {
            container.removeChild(container.firstChild);
        }
    }
    /**
     * @hidden
     */
    cacheSvgIcon(name, value, family = '') {
        if (name && value) {
            this.ensureSvgContainerCreated();
            const div = this._document.createElement('DIV');
            div.innerHTML = value;
            const svg = div.querySelector('svg');
            if (svg) {
                const iconKey = this.getSvgIconKey(name, family);
                svg.setAttribute('id', iconKey);
                svg.setAttribute('fit', '');
                svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
                svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.
                if (this.isSvgIconCached(name, family)) {
                    const oldChild = this._svgContainer.querySelector(`svg[id='${iconKey}']`);
                    this._svgContainer.removeChild(oldChild);
                }
                this._svgContainer.appendChild(svg);
                this._cachedSvgIcons.add(iconKey);
            }
        }
    }
    /**
     * @hidden
     */
    ensureSvgContainerCreated() {
        if (!this._svgContainer) {
            this._svgContainer = this._document.documentElement.querySelector('.igx-svg-container');
            if (!this._svgContainer) {
                this._svgContainer = this._document.createElement('DIV');
                this._svgContainer.classList.add('igx-svg-container');
                this._document.body.appendChild(this._svgContainer);
            }
        }
    }
}
IgxIconService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IgxIconService_Factory() { return new IgxIconService(i0.ɵɵinject(i1.DomSanitizer, 8), i0.ɵɵinject(i2.HttpClient, 8), i0.ɵɵinject(i3.DOCUMENT, 8)); }, token: IgxIconService, providedIn: "root" });
IgxIconService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
IgxIconService.ctorParameters = () => [
    { type: DomSanitizer, decorators: [{ type: Optional }] },
    { type: HttpClient, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
];
//# sourceMappingURL=data:application/json;base64,