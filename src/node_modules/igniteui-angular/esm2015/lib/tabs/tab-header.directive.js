import { Directive, ElementRef, HostBinding, HostListener } from '@angular/core';
import { PlatformUtil } from '../core/utils';
import { IgxTabItemDirective } from './tab-item.directive';
import { IgxTabsBase } from './tabs.base';
export class IgxTabHeaderDirective {
    /** @hidden */
    constructor(tabs, tab, elementRef, platform) {
        this.tabs = tabs;
        this.tab = tab;
        this.elementRef = elementRef;
        this.platform = platform;
        /** @hidden */
        this.role = 'tab';
    }
    /** @hidden */
    get tabIndex() {
        return this.tab.selected ? 0 : -1;
    }
    /** @hidden */
    get ariaSelected() {
        return this.tab.selected;
    }
    /** @hidden */
    get ariaDisabled() {
        return this.tab.disabled;
    }
    /** @hidden */
    onClick() {
        if (this.tab.panelComponent) {
            this.tabs.selectTab(this.tab, true);
        }
    }
    /** @hidden */
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    ;
}
IgxTabHeaderDirective.decorators = [
    { type: Directive }
];
IgxTabHeaderDirective.ctorParameters = () => [
    { type: IgxTabsBase },
    { type: IgxTabItemDirective },
    { type: ElementRef },
    { type: PlatformUtil }
];
IgxTabHeaderDirective.propDecorators = {
    role: [{ type: HostBinding, args: ['attr.role',] }],
    tabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    ariaSelected: [{ type: HostBinding, args: ['attr.aria-selected',] }],
    ariaDisabled: [{ type: HostBinding, args: ['attr.aria-disabled',] }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWhlYWRlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvdGFicy90YWItaGVhZGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDM0QsT0FBTyxFQUFvQixXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFHNUQsTUFBTSxPQUFnQixxQkFBcUI7SUFNdkMsY0FBYztJQUNkLFlBQ2MsSUFBaUIsRUFDcEIsR0FBd0IsRUFDdkIsVUFBbUMsRUFDakMsUUFBc0I7UUFIdEIsU0FBSSxHQUFKLElBQUksQ0FBYTtRQUNwQixRQUFHLEdBQUgsR0FBRyxDQUFxQjtRQUN2QixlQUFVLEdBQVYsVUFBVSxDQUF5QjtRQUNqQyxhQUFRLEdBQVIsUUFBUSxDQUFjO1FBVHBDLGNBQWM7UUFFUCxTQUFJLEdBQUcsS0FBSyxDQUFDO0lBUWhCLENBQUM7SUFFTCxjQUFjO0lBQ2QsSUFDVyxRQUFRO1FBQ2YsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsY0FBYztJQUNkLElBQ1csWUFBWTtRQUNuQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDO0lBQzdCLENBQUM7SUFFRCxjQUFjO0lBQ2QsSUFDVyxZQUFZO1FBQ25CLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7SUFDN0IsQ0FBQztJQUVELGNBQWM7SUFFUCxPQUFPO1FBQ1YsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRTtZQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3ZDO0lBQ0wsQ0FBQztJQUVELGNBQWM7SUFDZCxJQUFXLGFBQWE7UUFDcEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztJQUN6QyxDQUFDO0lBQUEsQ0FBQzs7O1lBNUNMLFNBQVM7OztZQUZpQixXQUFXO1lBRDdCLG1CQUFtQjtZQUZSLFVBQVU7WUFDckIsWUFBWTs7O21CQVFoQixXQUFXLFNBQUMsV0FBVzt1QkFZdkIsV0FBVyxTQUFDLGVBQWU7MkJBTTNCLFdBQVcsU0FBQyxvQkFBb0I7MkJBTWhDLFdBQVcsU0FBQyxvQkFBb0I7c0JBTWhDLFlBQVksU0FBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQbGF0Zm9ybVV0aWwgfSBmcm9tICcuLi9jb3JlL3V0aWxzJztcclxuaW1wb3J0IHsgSWd4VGFiSXRlbURpcmVjdGl2ZSB9IGZyb20gJy4vdGFiLWl0ZW0uZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgSWd4VGFiSGVhZGVyQmFzZSwgSWd4VGFic0Jhc2UgfSBmcm9tICcuL3RhYnMuYmFzZSc7XHJcblxyXG5ARGlyZWN0aXZlKClcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIElneFRhYkhlYWRlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIElneFRhYkhlYWRlckJhc2Uge1xyXG5cclxuICAgIC8qKiBAaGlkZGVuICovXHJcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIucm9sZScpXHJcbiAgICBwdWJsaWMgcm9sZSA9ICd0YWInO1xyXG5cclxuICAgIC8qKiBAaGlkZGVuICovXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcm90ZWN0ZWQgdGFiczogSWd4VGFic0Jhc2UsXHJcbiAgICAgICAgcHVibGljIHRhYjogSWd4VGFiSXRlbURpcmVjdGl2ZSxcclxuICAgICAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxyXG4gICAgICAgIHByb3RlY3RlZCBwbGF0Zm9ybTogUGxhdGZvcm1VdGlsXHJcbiAgICApIHsgfVxyXG5cclxuICAgIC8qKiBAaGlkZGVuICovXHJcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIudGFiaW5kZXgnKVxyXG4gICAgcHVibGljIGdldCB0YWJJbmRleCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50YWIuc2VsZWN0ZWQgPyAwIDogLTE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBoaWRkZW4gKi9cclxuICAgIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLXNlbGVjdGVkJylcclxuICAgIHB1YmxpYyBnZXQgYXJpYVNlbGVjdGVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRhYi5zZWxlY3RlZDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGhpZGRlbiAqL1xyXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtZGlzYWJsZWQnKVxyXG4gICAgcHVibGljIGdldCBhcmlhRGlzYWJsZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGFiLmRpc2FibGVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaGlkZGVuICovXHJcbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycpXHJcbiAgICBwdWJsaWMgb25DbGljaygpIHtcclxuICAgICAgICBpZiAodGhpcy50YWIucGFuZWxDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy50YWJzLnNlbGVjdFRhYih0aGlzLnRhYiwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaGlkZGVuICovXHJcbiAgICBwdWJsaWMgZ2V0IG5hdGl2ZUVsZW1lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xyXG4gICAgfTtcclxufVxyXG4iXX0=