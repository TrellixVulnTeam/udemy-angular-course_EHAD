import { ContentChild, Directive, Input, ViewChild } from '@angular/core';
import { Direction } from '../carousel/carousel-base';
import { IgxTabHeaderBase, IgxTabContentBase, IgxTabsBase } from './tabs.base';
export class IgxTabItemDirective {
    /** @hidden */
    constructor(tabs) {
        this.tabs = tabs;
        /**
         * An @Input property that allows you to enable/disable the item.
         */
        this.disabled = false;
        /** @hidden */
        this.direction = Direction.NONE;
        this._selected = false;
    }
    /**
     * An @Input property which determines whether an item is selected.
     */
    get selected() {
        return this._selected;
    }
    ;
    set selected(value) {
        if (this._selected !== value) {
            this._selected = value;
            this.tabs.selectTab(this, this._selected);
        }
    }
}
IgxTabItemDirective.decorators = [
    { type: Directive }
];
IgxTabItemDirective.ctorParameters = () => [
    { type: IgxTabsBase }
];
IgxTabItemDirective.propDecorators = {
    headerComponent: [{ type: ContentChild, args: [IgxTabHeaderBase,] }],
    panelComponent: [{ type: ContentChild, args: [IgxTabContentBase,] }],
    headerTemplate: [{ type: ViewChild, args: ['headerTemplate', { static: true },] }],
    panelTemplate: [{ type: ViewChild, args: ['panelTemplate', { static: true },] }],
    disabled: [{ type: Input }],
    selected: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWl0ZW0uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL3RhYnMvdGFiLWl0ZW0uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBZSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkYsT0FBTyxFQUFFLFNBQVMsRUFBeUIsTUFBTSwyQkFBMkIsQ0FBQztBQUM3RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQWtCLGlCQUFpQixFQUFFLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUcvRixNQUFNLE9BQWdCLG1CQUFtQjtJQThDckMsY0FBYztJQUNkLFlBQW9CLElBQWlCO1FBQWpCLFNBQUksR0FBSixJQUFJLENBQWE7UUE3QnJDOztXQUVHO1FBRUksYUFBUSxHQUFHLEtBQUssQ0FBQztRQUV4QixjQUFjO1FBQ1AsY0FBUyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFJMUIsY0FBUyxHQUFHLEtBQUssQ0FBQztJQW1CMUIsQ0FBQztJQWpCRDs7T0FFRztJQUNILElBQ1csUUFBUTtRQUNmLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBQUEsQ0FBQztJQUVGLElBQVcsUUFBUSxDQUFDLEtBQWM7UUFDOUIsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLEtBQUssRUFBRTtZQUMxQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzdDO0lBQ0wsQ0FBQzs7O1lBN0NKLFNBQVM7OztZQUZvRCxXQUFXOzs7OEJBTXBFLFlBQVksU0FBQyxnQkFBZ0I7NkJBSTdCLFlBQVksU0FBQyxpQkFBaUI7NkJBSTlCLFNBQVMsU0FBQyxnQkFBZ0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7NEJBSTVDLFNBQVMsU0FBQyxlQUFlLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO3VCQU0zQyxLQUFLO3VCQWFMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250ZW50Q2hpbGQsIERpcmVjdGl2ZSwgSW5wdXQsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGlyZWN0aW9uLCBJZ3hTbGlkZUNvbXBvbmVudEJhc2UgfSBmcm9tICcuLi9jYXJvdXNlbC9jYXJvdXNlbC1iYXNlJztcclxuaW1wb3J0IHsgSWd4VGFiSGVhZGVyQmFzZSwgSWd4VGFiSXRlbUJhc2UsIElneFRhYkNvbnRlbnRCYXNlLCBJZ3hUYWJzQmFzZSB9IGZyb20gJy4vdGFicy5iYXNlJztcclxuXHJcbkBEaXJlY3RpdmUoKVxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSWd4VGFiSXRlbURpcmVjdGl2ZSBpbXBsZW1lbnRzIElneFRhYkl0ZW1CYXNlLCBJZ3hTbGlkZUNvbXBvbmVudEJhc2Uge1xyXG5cclxuICAgIC8qKiBAaGlkZGVuICovXHJcbiAgICBAQ29udGVudENoaWxkKElneFRhYkhlYWRlckJhc2UpXHJcbiAgICBwdWJsaWMgaGVhZGVyQ29tcG9uZW50OiBJZ3hUYWJIZWFkZXJCYXNlO1xyXG5cclxuICAgIC8qKiBAaGlkZGVuICovXHJcbiAgICBAQ29udGVudENoaWxkKElneFRhYkNvbnRlbnRCYXNlKVxyXG4gICAgcHVibGljIHBhbmVsQ29tcG9uZW50OiBJZ3hUYWJDb250ZW50QmFzZTtcclxuXHJcbiAgICAvKiogQGhpZGRlbiAqL1xyXG4gICAgQFZpZXdDaGlsZCgnaGVhZGVyVGVtcGxhdGUnLCB7IHN0YXRpYzogdHJ1ZSB9KVxyXG4gICAgcHVibGljIGhlYWRlclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG5cclxuICAgIC8qKiBAaGlkZGVuICovXHJcbiAgICBAVmlld0NoaWxkKCdwYW5lbFRlbXBsYXRlJywgeyBzdGF0aWM6IHRydWUgfSlcclxuICAgIHB1YmxpYyBwYW5lbFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gQElucHV0IHByb3BlcnR5IHRoYXQgYWxsb3dzIHlvdSB0byBlbmFibGUvZGlzYWJsZSB0aGUgaXRlbS5cclxuICAgICAqL1xyXG4gICAgQElucHV0KClcclxuICAgIHB1YmxpYyBkaXNhYmxlZCA9IGZhbHNlO1xyXG5cclxuICAgIC8qKiBAaGlkZGVuICovXHJcbiAgICBwdWJsaWMgZGlyZWN0aW9uID0gRGlyZWN0aW9uLk5PTkU7XHJcbiAgICAvKiogQGhpZGRlbiAqL1xyXG4gICAgcHVibGljIHByZXZpb3VzOiBib29sZWFuO1xyXG5cclxuICAgIHByaXZhdGUgX3NlbGVjdGVkID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgd2hpY2ggZGV0ZXJtaW5lcyB3aGV0aGVyIGFuIGl0ZW0gaXMgc2VsZWN0ZWQuXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpXHJcbiAgICBwdWJsaWMgZ2V0IHNlbGVjdGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZDtcclxuICAgIH07XHJcblxyXG4gICAgcHVibGljIHNldCBzZWxlY3RlZCh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLl9zZWxlY3RlZCAhPT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2VsZWN0ZWQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy50YWJzLnNlbGVjdFRhYih0aGlzLCB0aGlzLl9zZWxlY3RlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaGlkZGVuICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRhYnM6IElneFRhYnNCYXNlKSB7XHJcbiAgICB9XHJcbn1cclxuIl19