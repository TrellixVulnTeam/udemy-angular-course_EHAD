import { Component, ElementRef, HostBinding, HostListener, NgZone } from '@angular/core';
import { IgxTabItemDirective } from '../tab-item.directive';
import { IgxTabHeaderDirective } from '../tab-header.directive';
import { IgxTabHeaderBase } from '../tabs.base';
import { IgxTabsComponent } from './tabs.component';
import { getResizeObserver } from '../../core/utils';
import { PlatformUtil } from '../../core/utils';
export class IgxTabHeaderComponent extends IgxTabHeaderDirective {
    /** @hidden @internal */
    constructor(tabs, tab, elementRef, platform, ngZone) {
        super(tabs, tab, elementRef, platform);
        this.tabs = tabs;
        this.platform = platform;
        this.ngZone = ngZone;
        /** @hidden @internal */
        this.cssClass = true;
    }
    /** @hidden @internal */
    get provideCssClassSelected() {
        return this.tab.selected;
    }
    /** @hidden @internal */
    get provideCssClassDisabled() {
        return this.tab.disabled;
    }
    /** @hidden @internal */
    keyDown(event) {
        let unsupportedKey = false;
        const itemsArray = this.tabs.items.toArray();
        const previousIndex = itemsArray.indexOf(this.tab);
        let newIndex = previousIndex;
        const hasDisabledItems = itemsArray.some((item) => item.disabled);
        switch (event.key) {
            case this.platform.KEYMAP.ARROW_RIGHT:
                newIndex = newIndex === itemsArray.length - 1 ? 0 : newIndex + 1;
                while (hasDisabledItems && itemsArray[newIndex].disabled && newIndex < itemsArray.length) {
                    newIndex = newIndex === itemsArray.length - 1 ? 0 : newIndex + 1;
                }
                break;
            case this.platform.KEYMAP.ARROW_LEFT:
                newIndex = newIndex === 0 ? itemsArray.length - 1 : newIndex - 1;
                while (hasDisabledItems && itemsArray[newIndex].disabled && newIndex >= 0) {
                    newIndex = newIndex === 0 ? itemsArray.length - 1 : newIndex - 1;
                }
                break;
            case this.platform.KEYMAP.HOME:
                event.preventDefault();
                newIndex = 0;
                while (itemsArray[newIndex].disabled && newIndex < itemsArray.length) {
                    newIndex = newIndex === itemsArray.length - 1 ? 0 : newIndex + 1;
                }
                break;
            case this.platform.KEYMAP.END:
                event.preventDefault();
                newIndex = itemsArray.length - 1;
                while (hasDisabledItems && itemsArray[newIndex].disabled && newIndex > 0) {
                    newIndex = newIndex === 0 ? itemsArray.length - 1 : newIndex - 1;
                }
                break;
            case this.platform.KEYMAP.ENTER:
                if (!this.tab.panelComponent) {
                    this.nativeElement.click();
                }
                unsupportedKey = true;
                break;
            case this.platform.KEYMAP.SPACE:
                event.preventDefault();
                if (!this.tab.panelComponent) {
                    this.nativeElement.click();
                }
                unsupportedKey = true;
                break;
            default:
                unsupportedKey = true;
                break;
        }
        if (!unsupportedKey) {
            itemsArray[newIndex].headerComponent.nativeElement.focus();
            if (this.tab.panelComponent) {
                this.tabs.selectedIndex = newIndex;
            }
        }
    }
    /** @hidden @internal */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this._resizeObserver = new (getResizeObserver())(() => {
                this.tabs.realignSelectedIndicator();
            });
            this._resizeObserver.observe(this.nativeElement);
        });
    }
    /** @hidden @internal */
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            this._resizeObserver.disconnect();
        });
    }
}
IgxTabHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-tab-header',
                template: "<ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\r\n\r\n<div class=\"igx-tabs__header-item-inner\">\r\n    <ng-content></ng-content>\r\n</div>\r\n\r\n<ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\r\n",
                providers: [{ provide: IgxTabHeaderBase, useExisting: IgxTabHeaderComponent }]
            },] }
];
IgxTabHeaderComponent.ctorParameters = () => [
    { type: IgxTabsComponent },
    { type: IgxTabItemDirective },
    { type: ElementRef },
    { type: PlatformUtil },
    { type: NgZone }
];
IgxTabHeaderComponent.propDecorators = {
    provideCssClassSelected: [{ type: HostBinding, args: ['class.igx-tabs__header-item--selected',] }],
    provideCssClassDisabled: [{ type: HostBinding, args: ['class.igx-tabs__header-item--disabled',] }],
    cssClass: [{ type: HostBinding, args: ['class.igx-tabs__header-item',] }],
    keyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,